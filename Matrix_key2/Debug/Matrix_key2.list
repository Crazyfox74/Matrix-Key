
Matrix_key2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005250  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  0800530c  0800530c  0001530c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005438  08005438  00020098  2**0
                  CONTENTS
  4 .ARM          00000000  08005438  08005438  00020098  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005438  08005438  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005444  08005444  00015444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024ac  20000098  080054e0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002544  080054e0  00022544  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe61  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000285a  00000000  00000000  0002ff21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00032780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c48  00000000  00000000  000334f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0e9  00000000  00000000  00034138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000123c2  00000000  00000000  00052221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9eb4  00000000  00000000  000645e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e497  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003230  00000000  00000000  0010e4e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000098 	.word	0x20000098
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080052f4 	.word	0x080052f4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000009c 	.word	0x2000009c
 8000100:	080052f4 	.word	0x080052f4

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <_ZN6ButtonC1Ev>:
WS2812 led1;


extern uint8_t key[5][8];

Button::Button() {
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	// TODO Auto-generated constructor stub
	cnt_scan = 0;
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2200      	movs	r2, #0
 800024c:	701a      	strb	r2, [r3, #0]
	col_numb = 0;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	2200      	movs	r2, #0
 8000252:	705a      	strb	r2, [r3, #1]
	row_numb = 0;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	2200      	movs	r2, #0
 8000258:	709a      	strb	r2, [r3, #2]
	st_kbd = 0;
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	2200      	movs	r2, #0
 800025e:	70da      	strb	r2, [r3, #3]
	cnt_tick = 0;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2200      	movs	r2, #0
 8000264:	711a      	strb	r2, [r3, #4]
	row_data = 0xFF;
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	22ff      	movs	r2, #255	; 0xff
 800026a:	715a      	strb	r2, [r3, #5]
	n_col = 0;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	2200      	movs	r2, #0
 8000270:	725a      	strb	r2, [r3, #9]
	n_row = 0;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	2200      	movs	r2, #0
 8000276:	729a      	strb	r2, [r3, #10]

}
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	0018      	movs	r0, r3
 800027c:	46bd      	mov	sp, r7
 800027e:	b002      	add	sp, #8
 8000280:	bd80      	pop	{r7, pc}
	...

08000284 <_ZN6Button8COL_SCANEv>:


void Button::COL_SCAN(){
 8000284:	b580      	push	{r7, lr}
 8000286:	b082      	sub	sp, #8
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	if(cnt_scan > 0)	cnt_scan--;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	2b00      	cmp	r3, #0
 8000292:	d006      	beq.n	80002a2 <_ZN6Button8COL_SCANEv+0x1e>
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	3b01      	subs	r3, #1
 800029a:	b2da      	uxtb	r2, r3
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	701a      	strb	r2, [r3, #0]
 80002a0:	e002      	b.n	80002a8 <_ZN6Button8COL_SCANEv+0x24>
		else cnt_scan = 0;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	2200      	movs	r2, #0
 80002a6:	701a      	strb	r2, [r3, #0]
	switch (col_numb){
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	785b      	ldrb	r3, [r3, #1]
 80002ac:	2b07      	cmp	r3, #7
 80002ae:	d900      	bls.n	80002b2 <_ZN6Button8COL_SCANEv+0x2e>
 80002b0:	e0ba      	b.n	8000428 <_ZN6Button8COL_SCANEv+0x1a4>
 80002b2:	009a      	lsls	r2, r3, #2
 80002b4:	4b5e      	ldr	r3, [pc, #376]	; (8000430 <_ZN6Button8COL_SCANEv+0x1ac>)
 80002b6:	18d3      	adds	r3, r2, r3
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	469f      	mov	pc, r3
	case 0:
		M_COL_A;
 80002bc:	4b5d      	ldr	r3, [pc, #372]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 80002be:	699a      	ldr	r2, [r3, #24]
 80002c0:	4b5c      	ldr	r3, [pc, #368]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 80002c2:	2180      	movs	r1, #128	; 0x80
 80002c4:	0509      	lsls	r1, r1, #20
 80002c6:	430a      	orrs	r2, r1
 80002c8:	619a      	str	r2, [r3, #24]
 80002ca:	4b5b      	ldr	r3, [pc, #364]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 80002cc:	699a      	ldr	r2, [r3, #24]
 80002ce:	4b5a      	ldr	r3, [pc, #360]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 80002d0:	21f8      	movs	r1, #248	; 0xf8
 80002d2:	430a      	orrs	r2, r1
 80002d4:	619a      	str	r2, [r3, #24]
 80002d6:	2390      	movs	r3, #144	; 0x90
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	699a      	ldr	r2, [r3, #24]
 80002dc:	2390      	movs	r3, #144	; 0x90
 80002de:	05db      	lsls	r3, r3, #23
 80002e0:	2188      	movs	r1, #136	; 0x88
 80002e2:	0209      	lsls	r1, r1, #8
 80002e4:	430a      	orrs	r2, r1
 80002e6:	619a      	str	r2, [r3, #24]
		break;
 80002e8:	e09e      	b.n	8000428 <_ZN6Button8COL_SCANEv+0x1a4>
	case 1:
		M_COL_B;
 80002ea:	4b52      	ldr	r3, [pc, #328]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 80002ec:	699a      	ldr	r2, [r3, #24]
 80002ee:	4b51      	ldr	r3, [pc, #324]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 80002f0:	2180      	movs	r1, #128	; 0x80
 80002f2:	0109      	lsls	r1, r1, #4
 80002f4:	430a      	orrs	r2, r1
 80002f6:	619a      	str	r2, [r3, #24]
 80002f8:	4b4f      	ldr	r3, [pc, #316]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 80002fa:	699a      	ldr	r2, [r3, #24]
 80002fc:	4b4e      	ldr	r3, [pc, #312]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 80002fe:	494f      	ldr	r1, [pc, #316]	; (800043c <_ZN6Button8COL_SCANEv+0x1b8>)
 8000300:	430a      	orrs	r2, r1
 8000302:	619a      	str	r2, [r3, #24]
 8000304:	2390      	movs	r3, #144	; 0x90
 8000306:	05db      	lsls	r3, r3, #23
 8000308:	699a      	ldr	r2, [r3, #24]
 800030a:	2390      	movs	r3, #144	; 0x90
 800030c:	05db      	lsls	r3, r3, #23
 800030e:	2188      	movs	r1, #136	; 0x88
 8000310:	0209      	lsls	r1, r1, #8
 8000312:	430a      	orrs	r2, r1
 8000314:	619a      	str	r2, [r3, #24]
		break;
 8000316:	e087      	b.n	8000428 <_ZN6Button8COL_SCANEv+0x1a4>
	case 2:
		M_COL_C;
 8000318:	4b46      	ldr	r3, [pc, #280]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 800031a:	699a      	ldr	r2, [r3, #24]
 800031c:	4b45      	ldr	r3, [pc, #276]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 800031e:	2180      	movs	r1, #128	; 0x80
 8000320:	0109      	lsls	r1, r1, #4
 8000322:	430a      	orrs	r2, r1
 8000324:	619a      	str	r2, [r3, #24]
 8000326:	4b44      	ldr	r3, [pc, #272]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 8000328:	699a      	ldr	r2, [r3, #24]
 800032a:	4b43      	ldr	r3, [pc, #268]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 800032c:	4944      	ldr	r1, [pc, #272]	; (8000440 <_ZN6Button8COL_SCANEv+0x1bc>)
 800032e:	430a      	orrs	r2, r1
 8000330:	619a      	str	r2, [r3, #24]
 8000332:	2390      	movs	r3, #144	; 0x90
 8000334:	05db      	lsls	r3, r3, #23
 8000336:	699a      	ldr	r2, [r3, #24]
 8000338:	2390      	movs	r3, #144	; 0x90
 800033a:	05db      	lsls	r3, r3, #23
 800033c:	2188      	movs	r1, #136	; 0x88
 800033e:	0209      	lsls	r1, r1, #8
 8000340:	430a      	orrs	r2, r1
 8000342:	619a      	str	r2, [r3, #24]
		break;
 8000344:	e070      	b.n	8000428 <_ZN6Button8COL_SCANEv+0x1a4>
	case 3:
		M_COL_D;
 8000346:	4b3b      	ldr	r3, [pc, #236]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 8000348:	699a      	ldr	r2, [r3, #24]
 800034a:	4b3a      	ldr	r3, [pc, #232]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 800034c:	2180      	movs	r1, #128	; 0x80
 800034e:	0109      	lsls	r1, r1, #4
 8000350:	430a      	orrs	r2, r1
 8000352:	619a      	str	r2, [r3, #24]
 8000354:	4b38      	ldr	r3, [pc, #224]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 8000356:	699a      	ldr	r2, [r3, #24]
 8000358:	4b37      	ldr	r3, [pc, #220]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 800035a:	493a      	ldr	r1, [pc, #232]	; (8000444 <_ZN6Button8COL_SCANEv+0x1c0>)
 800035c:	430a      	orrs	r2, r1
 800035e:	619a      	str	r2, [r3, #24]
 8000360:	2390      	movs	r3, #144	; 0x90
 8000362:	05db      	lsls	r3, r3, #23
 8000364:	699a      	ldr	r2, [r3, #24]
 8000366:	2390      	movs	r3, #144	; 0x90
 8000368:	05db      	lsls	r3, r3, #23
 800036a:	2188      	movs	r1, #136	; 0x88
 800036c:	0209      	lsls	r1, r1, #8
 800036e:	430a      	orrs	r2, r1
 8000370:	619a      	str	r2, [r3, #24]
		break;
 8000372:	e059      	b.n	8000428 <_ZN6Button8COL_SCANEv+0x1a4>
	case 4:
		M_COL_E;
 8000374:	4b2f      	ldr	r3, [pc, #188]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 8000376:	699a      	ldr	r2, [r3, #24]
 8000378:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 800037a:	2180      	movs	r1, #128	; 0x80
 800037c:	0109      	lsls	r1, r1, #4
 800037e:	430a      	orrs	r2, r1
 8000380:	619a      	str	r2, [r3, #24]
 8000382:	4b2d      	ldr	r3, [pc, #180]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 8000384:	699a      	ldr	r2, [r3, #24]
 8000386:	4b2c      	ldr	r3, [pc, #176]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 8000388:	492f      	ldr	r1, [pc, #188]	; (8000448 <_ZN6Button8COL_SCANEv+0x1c4>)
 800038a:	430a      	orrs	r2, r1
 800038c:	619a      	str	r2, [r3, #24]
 800038e:	2390      	movs	r3, #144	; 0x90
 8000390:	05db      	lsls	r3, r3, #23
 8000392:	699a      	ldr	r2, [r3, #24]
 8000394:	2390      	movs	r3, #144	; 0x90
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	2188      	movs	r1, #136	; 0x88
 800039a:	0209      	lsls	r1, r1, #8
 800039c:	430a      	orrs	r2, r1
 800039e:	619a      	str	r2, [r3, #24]
		break;
 80003a0:	e042      	b.n	8000428 <_ZN6Button8COL_SCANEv+0x1a4>
	case 5:
		M_COL_F;
 80003a2:	4b24      	ldr	r3, [pc, #144]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 80003a4:	699a      	ldr	r2, [r3, #24]
 80003a6:	4b23      	ldr	r3, [pc, #140]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 80003a8:	2180      	movs	r1, #128	; 0x80
 80003aa:	0109      	lsls	r1, r1, #4
 80003ac:	430a      	orrs	r2, r1
 80003ae:	619a      	str	r2, [r3, #24]
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 80003b2:	699a      	ldr	r2, [r3, #24]
 80003b4:	4b20      	ldr	r3, [pc, #128]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 80003b6:	4925      	ldr	r1, [pc, #148]	; (800044c <_ZN6Button8COL_SCANEv+0x1c8>)
 80003b8:	430a      	orrs	r2, r1
 80003ba:	619a      	str	r2, [r3, #24]
 80003bc:	2390      	movs	r3, #144	; 0x90
 80003be:	05db      	lsls	r3, r3, #23
 80003c0:	699a      	ldr	r2, [r3, #24]
 80003c2:	2390      	movs	r3, #144	; 0x90
 80003c4:	05db      	lsls	r3, r3, #23
 80003c6:	2188      	movs	r1, #136	; 0x88
 80003c8:	0209      	lsls	r1, r1, #8
 80003ca:	430a      	orrs	r2, r1
 80003cc:	619a      	str	r2, [r3, #24]
		break;
 80003ce:	e02b      	b.n	8000428 <_ZN6Button8COL_SCANEv+0x1a4>
	case 6:
		M_COL_G;
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 80003d2:	699a      	ldr	r2, [r3, #24]
 80003d4:	4b17      	ldr	r3, [pc, #92]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 80003d6:	2180      	movs	r1, #128	; 0x80
 80003d8:	0109      	lsls	r1, r1, #4
 80003da:	430a      	orrs	r2, r1
 80003dc:	619a      	str	r2, [r3, #24]
 80003de:	4b16      	ldr	r3, [pc, #88]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 80003e0:	699a      	ldr	r2, [r3, #24]
 80003e2:	4b15      	ldr	r3, [pc, #84]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 80003e4:	21f8      	movs	r1, #248	; 0xf8
 80003e6:	430a      	orrs	r2, r1
 80003e8:	619a      	str	r2, [r3, #24]
 80003ea:	2390      	movs	r3, #144	; 0x90
 80003ec:	05db      	lsls	r3, r3, #23
 80003ee:	699a      	ldr	r2, [r3, #24]
 80003f0:	2390      	movs	r3, #144	; 0x90
 80003f2:	05db      	lsls	r3, r3, #23
 80003f4:	4916      	ldr	r1, [pc, #88]	; (8000450 <_ZN6Button8COL_SCANEv+0x1cc>)
 80003f6:	430a      	orrs	r2, r1
 80003f8:	619a      	str	r2, [r3, #24]
		break;
 80003fa:	e015      	b.n	8000428 <_ZN6Button8COL_SCANEv+0x1a4>
	case 7:
		M_COL_DP;
 80003fc:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 80003fe:	699a      	ldr	r2, [r3, #24]
 8000400:	4b0c      	ldr	r3, [pc, #48]	; (8000434 <_ZN6Button8COL_SCANEv+0x1b0>)
 8000402:	2180      	movs	r1, #128	; 0x80
 8000404:	0109      	lsls	r1, r1, #4
 8000406:	430a      	orrs	r2, r1
 8000408:	619a      	str	r2, [r3, #24]
 800040a:	4b0b      	ldr	r3, [pc, #44]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 800040c:	699a      	ldr	r2, [r3, #24]
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <_ZN6Button8COL_SCANEv+0x1b4>)
 8000410:	21f8      	movs	r1, #248	; 0xf8
 8000412:	430a      	orrs	r2, r1
 8000414:	619a      	str	r2, [r3, #24]
 8000416:	2390      	movs	r3, #144	; 0x90
 8000418:	05db      	lsls	r3, r3, #23
 800041a:	699a      	ldr	r2, [r3, #24]
 800041c:	2390      	movs	r3, #144	; 0x90
 800041e:	05db      	lsls	r3, r3, #23
 8000420:	490c      	ldr	r1, [pc, #48]	; (8000454 <_ZN6Button8COL_SCANEv+0x1d0>)
 8000422:	430a      	orrs	r2, r1
 8000424:	619a      	str	r2, [r3, #24]
		break;
 8000426:	46c0      	nop			; (mov r8, r8)
	}
}
 8000428:	46c0      	nop			; (mov r8, r8)
 800042a:	46bd      	mov	sp, r7
 800042c:	b002      	add	sp, #8
 800042e:	bd80      	pop	{r7, pc}
 8000430:	08005334 	.word	0x08005334
 8000434:	48001400 	.word	0x48001400
 8000438:	48000400 	.word	0x48000400
 800043c:	00800078 	.word	0x00800078
 8000440:	004000b8 	.word	0x004000b8
 8000444:	002000d8 	.word	0x002000d8
 8000448:	001000e8 	.word	0x001000e8
 800044c:	000800f0 	.word	0x000800f0
 8000450:	80000800 	.word	0x80000800
 8000454:	08008000 	.word	0x08008000

08000458 <_ZN6Button8ROW_SCANEv>:


void Button::ROW_SCAN(){
 8000458:	b580      	push	{r7, lr}
 800045a:	b082      	sub	sp, #8
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
	if((GPIOA->IDR & (1 << 8)) == 0) {row_data &= 0xFE;	} else {	row_data |= 0x01;}
 8000460:	2390      	movs	r3, #144	; 0x90
 8000462:	05db      	lsls	r3, r3, #23
 8000464:	691a      	ldr	r2, [r3, #16]
 8000466:	2380      	movs	r3, #128	; 0x80
 8000468:	005b      	lsls	r3, r3, #1
 800046a:	4013      	ands	r3, r2
 800046c:	425a      	negs	r2, r3
 800046e:	4153      	adcs	r3, r2
 8000470:	b2db      	uxtb	r3, r3
 8000472:	2b00      	cmp	r3, #0
 8000474:	d007      	beq.n	8000486 <_ZN6Button8ROW_SCANEv+0x2e>
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	795b      	ldrb	r3, [r3, #5]
 800047a:	2201      	movs	r2, #1
 800047c:	4393      	bics	r3, r2
 800047e:	b2da      	uxtb	r2, r3
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	715a      	strb	r2, [r3, #5]
 8000484:	e006      	b.n	8000494 <_ZN6Button8ROW_SCANEv+0x3c>
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	795b      	ldrb	r3, [r3, #5]
 800048a:	2201      	movs	r2, #1
 800048c:	4313      	orrs	r3, r2
 800048e:	b2da      	uxtb	r2, r3
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	715a      	strb	r2, [r3, #5]
			if((GPIOB->IDR & (1 << 15)) == 0) {row_data &= 0xFD;	} else {	row_data |= 0x02;}
 8000494:	4b6f      	ldr	r3, [pc, #444]	; (8000654 <_ZN6Button8ROW_SCANEv+0x1fc>)
 8000496:	691a      	ldr	r2, [r3, #16]
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	021b      	lsls	r3, r3, #8
 800049c:	4013      	ands	r3, r2
 800049e:	425a      	negs	r2, r3
 80004a0:	4153      	adcs	r3, r2
 80004a2:	b2db      	uxtb	r3, r3
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	d007      	beq.n	80004b8 <_ZN6Button8ROW_SCANEv+0x60>
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	795b      	ldrb	r3, [r3, #5]
 80004ac:	2202      	movs	r2, #2
 80004ae:	4393      	bics	r3, r2
 80004b0:	b2da      	uxtb	r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	715a      	strb	r2, [r3, #5]
 80004b6:	e006      	b.n	80004c6 <_ZN6Button8ROW_SCANEv+0x6e>
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	795b      	ldrb	r3, [r3, #5]
 80004bc:	2202      	movs	r2, #2
 80004be:	4313      	orrs	r3, r2
 80004c0:	b2da      	uxtb	r2, r3
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	715a      	strb	r2, [r3, #5]
			if((GPIOB->IDR & (1 << 14)) == 0) {row_data &= 0xFB;	} else {	row_data |= 0x04;}
 80004c6:	4b63      	ldr	r3, [pc, #396]	; (8000654 <_ZN6Button8ROW_SCANEv+0x1fc>)
 80004c8:	691a      	ldr	r2, [r3, #16]
 80004ca:	2380      	movs	r3, #128	; 0x80
 80004cc:	01db      	lsls	r3, r3, #7
 80004ce:	4013      	ands	r3, r2
 80004d0:	425a      	negs	r2, r3
 80004d2:	4153      	adcs	r3, r2
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d007      	beq.n	80004ea <_ZN6Button8ROW_SCANEv+0x92>
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	795b      	ldrb	r3, [r3, #5]
 80004de:	2204      	movs	r2, #4
 80004e0:	4393      	bics	r3, r2
 80004e2:	b2da      	uxtb	r2, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	715a      	strb	r2, [r3, #5]
 80004e8:	e006      	b.n	80004f8 <_ZN6Button8ROW_SCANEv+0xa0>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	795b      	ldrb	r3, [r3, #5]
 80004ee:	2204      	movs	r2, #4
 80004f0:	4313      	orrs	r3, r2
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	715a      	strb	r2, [r3, #5]
			if((GPIOB->IDR & (1 << 13)) == 0) {row_data &= 0xF7;	} else {	row_data |= 0x08;}
 80004f8:	4b56      	ldr	r3, [pc, #344]	; (8000654 <_ZN6Button8ROW_SCANEv+0x1fc>)
 80004fa:	691a      	ldr	r2, [r3, #16]
 80004fc:	2380      	movs	r3, #128	; 0x80
 80004fe:	019b      	lsls	r3, r3, #6
 8000500:	4013      	ands	r3, r2
 8000502:	425a      	negs	r2, r3
 8000504:	4153      	adcs	r3, r2
 8000506:	b2db      	uxtb	r3, r3
 8000508:	2b00      	cmp	r3, #0
 800050a:	d007      	beq.n	800051c <_ZN6Button8ROW_SCANEv+0xc4>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	2208      	movs	r2, #8
 8000512:	4393      	bics	r3, r2
 8000514:	b2da      	uxtb	r2, r3
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	715a      	strb	r2, [r3, #5]
 800051a:	e006      	b.n	800052a <_ZN6Button8ROW_SCANEv+0xd2>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	795b      	ldrb	r3, [r3, #5]
 8000520:	2208      	movs	r2, #8
 8000522:	4313      	orrs	r3, r2
 8000524:	b2da      	uxtb	r2, r3
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	715a      	strb	r2, [r3, #5]
			if((GPIOB->IDR & (1 << 12)) == 0) {row_data &= 0xEF;	} else {	row_data |= 0x10;}
 800052a:	4b4a      	ldr	r3, [pc, #296]	; (8000654 <_ZN6Button8ROW_SCANEv+0x1fc>)
 800052c:	691a      	ldr	r2, [r3, #16]
 800052e:	2380      	movs	r3, #128	; 0x80
 8000530:	015b      	lsls	r3, r3, #5
 8000532:	4013      	ands	r3, r2
 8000534:	425a      	negs	r2, r3
 8000536:	4153      	adcs	r3, r2
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d007      	beq.n	800054e <_ZN6Button8ROW_SCANEv+0xf6>
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	795b      	ldrb	r3, [r3, #5]
 8000542:	2210      	movs	r2, #16
 8000544:	4393      	bics	r3, r2
 8000546:	b2da      	uxtb	r2, r3
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	715a      	strb	r2, [r3, #5]
 800054c:	e006      	b.n	800055c <_ZN6Button8ROW_SCANEv+0x104>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	795b      	ldrb	r3, [r3, #5]
 8000552:	2210      	movs	r2, #16
 8000554:	4313      	orrs	r3, r2
 8000556:	b2da      	uxtb	r2, r3
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	715a      	strb	r2, [r3, #5]
			switch(row_data){
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	795b      	ldrb	r3, [r3, #5]
 8000560:	3bef      	subs	r3, #239	; 0xef
 8000562:	2b10      	cmp	r3, #16
 8000564:	d900      	bls.n	8000568 <_ZN6Button8ROW_SCANEv+0x110>
 8000566:	e071      	b.n	800064c <_ZN6Button8ROW_SCANEv+0x1f4>
 8000568:	009a      	lsls	r2, r3, #2
 800056a:	4b3b      	ldr	r3, [pc, #236]	; (8000658 <_ZN6Button8ROW_SCANEv+0x200>)
 800056c:	18d3      	adds	r3, r2, r3
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	469f      	mov	pc, r3
			case 0xFE:
			case 0xFD:
			case 0xFB:
			case 0xF7:
			case 0xEF:
				switch(but_status){
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	799b      	ldrb	r3, [r3, #6]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d002      	beq.n	8000580 <_ZN6Button8ROW_SCANEv+0x128>
 800057a:	2b01      	cmp	r3, #1
 800057c:	d007      	beq.n	800058e <_ZN6Button8ROW_SCANEv+0x136>
						b_butpres = true;
						b_enprint = true;
					}
					break;
				}
				break;
 800057e:	e065      	b.n	800064c <_ZN6Button8ROW_SCANEv+0x1f4>
					but_status = 1;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2201      	movs	r2, #1
 8000584:	719a      	strb	r2, [r3, #6]
					cnt_scan = 10;
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	220a      	movs	r2, #10
 800058a:	701a      	strb	r2, [r3, #0]
					break;
 800058c:	e02f      	b.n	80005ee <_ZN6Button8ROW_SCANEv+0x196>
					if(cnt_scan == 0){
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d12a      	bne.n	80005ec <_ZN6Button8ROW_SCANEv+0x194>
						but_status = 2;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	2202      	movs	r2, #2
 800059a:	719a      	strb	r2, [r3, #6]
						switch(row_data){
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	795b      	ldrb	r3, [r3, #5]
 80005a0:	3bef      	subs	r3, #239	; 0xef
 80005a2:	2b0f      	cmp	r3, #15
 80005a4:	d818      	bhi.n	80005d8 <_ZN6Button8ROW_SCANEv+0x180>
 80005a6:	009a      	lsls	r2, r3, #2
 80005a8:	4b2c      	ldr	r3, [pc, #176]	; (800065c <_ZN6Button8ROW_SCANEv+0x204>)
 80005aa:	18d3      	adds	r3, r2, r3
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	469f      	mov	pc, r3
							n_row = 4;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2204      	movs	r2, #4
 80005b4:	729a      	strb	r2, [r3, #10]
							break;
 80005b6:	e00f      	b.n	80005d8 <_ZN6Button8ROW_SCANEv+0x180>
							n_row = 3;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	2203      	movs	r2, #3
 80005bc:	729a      	strb	r2, [r3, #10]
							break;
 80005be:	e00b      	b.n	80005d8 <_ZN6Button8ROW_SCANEv+0x180>
							n_row = 2;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2202      	movs	r2, #2
 80005c4:	729a      	strb	r2, [r3, #10]
							break;
 80005c6:	e007      	b.n	80005d8 <_ZN6Button8ROW_SCANEv+0x180>
							n_row = 1;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2201      	movs	r2, #1
 80005cc:	729a      	strb	r2, [r3, #10]
							break;
 80005ce:	e003      	b.n	80005d8 <_ZN6Button8ROW_SCANEv+0x180>
							n_row = 0;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	2200      	movs	r2, #0
 80005d4:	729a      	strb	r2, [r3, #10]
							break;
 80005d6:	46c0      	nop			; (mov r8, r8)
						n_col = col_numb;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	785a      	ldrb	r2, [r3, #1]
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	725a      	strb	r2, [r3, #9]
						b_butpres = true;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2201      	movs	r2, #1
 80005e4:	71da      	strb	r2, [r3, #7]
						b_enprint = true;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	2201      	movs	r2, #1
 80005ea:	721a      	strb	r2, [r3, #8]
					break;
 80005ec:	46c0      	nop			; (mov r8, r8)
				break;
 80005ee:	e02d      	b.n	800064c <_ZN6Button8ROW_SCANEv+0x1f4>

			case 0xFF:	// когда ни одна кнопка не нажата
				switch(but_status){
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	799b      	ldrb	r3, [r3, #6]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d01a      	beq.n	800062e <_ZN6Button8ROW_SCANEv+0x1d6>
 80005f8:	dc27      	bgt.n	800064a <_ZN6Button8ROW_SCANEv+0x1f2>
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d002      	beq.n	8000604 <_ZN6Button8ROW_SCANEv+0x1ac>
 80005fe:	2b02      	cmp	r3, #2
 8000600:	d00e      	beq.n	8000620 <_ZN6Button8ROW_SCANEv+0x1c8>
						b_butpres = false;

					}
					break;
				}
					break;
 8000602:	e022      	b.n	800064a <_ZN6Button8ROW_SCANEv+0x1f2>
					col_numb++;
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	785b      	ldrb	r3, [r3, #1]
 8000608:	3301      	adds	r3, #1
 800060a:	b2da      	uxtb	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	705a      	strb	r2, [r3, #1]
					if(col_numb == COL_COUNT){
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	785b      	ldrb	r3, [r3, #1]
 8000614:	2b08      	cmp	r3, #8
 8000616:	d115      	bne.n	8000644 <_ZN6Button8ROW_SCANEv+0x1ec>
						col_numb = 0;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	705a      	strb	r2, [r3, #1]
					break;
 800061e:	e011      	b.n	8000644 <_ZN6Button8ROW_SCANEv+0x1ec>
					but_status = 3;
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	2203      	movs	r2, #3
 8000624:	719a      	strb	r2, [r3, #6]
					cnt_scan = 10;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	220a      	movs	r2, #10
 800062a:	701a      	strb	r2, [r3, #0]
					break;
 800062c:	e00d      	b.n	800064a <_ZN6Button8ROW_SCANEv+0x1f2>
					if(cnt_scan == 0){
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d108      	bne.n	8000648 <_ZN6Button8ROW_SCANEv+0x1f0>
						but_status = 0;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2200      	movs	r2, #0
 800063a:	719a      	strb	r2, [r3, #6]
						b_butpres = false;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	71da      	strb	r2, [r3, #7]
					break;
 8000642:	e001      	b.n	8000648 <_ZN6Button8ROW_SCANEv+0x1f0>
					break;
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	e000      	b.n	800064a <_ZN6Button8ROW_SCANEv+0x1f2>
					break;
 8000648:	46c0      	nop			; (mov r8, r8)
					break;
 800064a:	46c0      	nop			; (mov r8, r8)
			}
}
 800064c:	46c0      	nop			; (mov r8, r8)
 800064e:	46bd      	mov	sp, r7
 8000650:	b002      	add	sp, #8
 8000652:	bd80      	pop	{r7, pc}
 8000654:	48000400 	.word	0x48000400
 8000658:	08005354 	.word	0x08005354
 800065c:	08005398 	.word	0x08005398

08000660 <_ZN6Button9Print_KeyEv>:


void Button::Print_Key(){
 8000660:	b590      	push	{r4, r7, lr}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if(b_enprint == true){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7a1b      	ldrb	r3, [r3, #8]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d123      	bne.n	80006b8 <_ZN6Button9Print_KeyEv+0x58>
		sprintf(key_print,"%d\r\n",key[n_row][n_col]);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	330b      	adds	r3, #11
 8000674:	0018      	movs	r0, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	7a9b      	ldrb	r3, [r3, #10]
 800067a:	001c      	movs	r4, r3
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	7a5b      	ldrb	r3, [r3, #9]
 8000680:	0019      	movs	r1, r3
 8000682:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <_ZN6Button9Print_KeyEv+0x60>)
 8000684:	00e3      	lsls	r3, r4, #3
 8000686:	18d3      	adds	r3, r2, r3
 8000688:	5c5b      	ldrb	r3, [r3, r1]
 800068a:	001a      	movs	r2, r3
 800068c:	4b0d      	ldr	r3, [pc, #52]	; (80006c4 <_ZN6Button9Print_KeyEv+0x64>)
 800068e:	0019      	movs	r1, r3
 8000690:	f004 f9c6 	bl	8004a20 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)&key_print, strlen(key_print), 100);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	330b      	adds	r3, #11
 8000698:	001c      	movs	r4, r3
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	330b      	adds	r3, #11
 800069e:	0018      	movs	r0, r3
 80006a0:	f7ff fd30 	bl	8000104 <strlen>
 80006a4:	0003      	movs	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	4807      	ldr	r0, [pc, #28]	; (80006c8 <_ZN6Button9Print_KeyEv+0x68>)
 80006aa:	2364      	movs	r3, #100	; 0x64
 80006ac:	0021      	movs	r1, r4
 80006ae:	f003 fd33 	bl	8004118 <HAL_UART_Transmit>
		b_enprint = false;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	2200      	movs	r2, #0
 80006b6:	721a      	strb	r2, [r3, #8]
	}
}
 80006b8:	46c0      	nop			; (mov r8, r8)
 80006ba:	46bd      	mov	sp, r7
 80006bc:	b003      	add	sp, #12
 80006be:	bd90      	pop	{r4, r7, pc}
 80006c0:	20000000 	.word	0x20000000
 80006c4:	0800530c 	.word	0x0800530c
 80006c8:	200024ac 	.word	0x200024ac

080006cc <_ZN6Button10Key_led_onEv>:

void Button::Key_led_on(){
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	if(b_butpres == true){
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	79db      	ldrb	r3, [r3, #7]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d10a      	bne.n	80006f2 <_ZN6Button10Key_led_onEv+0x26>
		led1.WS2812_LED_ON(n_row, n_col);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7a99      	ldrb	r1, [r3, #10]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	7a5a      	ldrb	r2, [r3, #9]
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <_ZN6Button10Key_led_onEv+0x30>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fa1a 	bl	8000b20 <_ZN6WS281213WS2812_LED_ONEhh>
		b_butpres = false;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2200      	movs	r2, #0
 80006f0:	71da      	strb	r2, [r3, #7]
	}
}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	46bd      	mov	sp, r7
 80006f6:	b002      	add	sp, #8
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	46c0      	nop			; (mov r8, r8)
 80006fc:	200000b4 	.word	0x200000b4

08000700 <_ZN6Button11Key_led_offEv>:

void Button::Key_led_off(){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	if(but_status == 0){
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	799b      	ldrb	r3, [r3, #6]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d103      	bne.n	8000718 <_ZN6Button11Key_led_offEv+0x18>
		led1.WS2812_LED_OFF();
 8000710:	4b03      	ldr	r3, [pc, #12]	; (8000720 <_ZN6Button11Key_led_offEv+0x20>)
 8000712:	0018      	movs	r0, r3
 8000714:	f000 fa38 	bl	8000b88 <_ZN6WS281214WS2812_LED_OFFEv>
	}
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b002      	add	sp, #8
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000b4 	.word	0x200000b4

08000724 <_Z41__static_initialization_and_destruction_0ii>:
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2b01      	cmp	r3, #1
 8000732:	d107      	bne.n	8000744 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8000734:	683b      	ldr	r3, [r7, #0]
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8000738:	4293      	cmp	r3, r2
 800073a:	d103      	bne.n	8000744 <_Z41__static_initialization_and_destruction_0ii+0x20>
WS2812 led1;
 800073c:	4b04      	ldr	r3, [pc, #16]	; (8000750 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800073e:	0018      	movs	r0, r3
 8000740:	f000 f864 	bl	800080c <_ZN6WS2812C1Ev>
}
 8000744:	46c0      	nop			; (mov r8, r8)
 8000746:	46bd      	mov	sp, r7
 8000748:	b002      	add	sp, #8
 800074a:	bd80      	pop	{r7, pc}
 800074c:	0000ffff 	.word	0x0000ffff
 8000750:	200000b4 	.word	0x200000b4

08000754 <_GLOBAL__sub_I_led1>:
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
 8000758:	4b03      	ldr	r3, [pc, #12]	; (8000768 <_GLOBAL__sub_I_led1+0x14>)
 800075a:	0019      	movs	r1, r3
 800075c:	2001      	movs	r0, #1
 800075e:	f7ff ffe1 	bl	8000724 <_Z41__static_initialization_and_destruction_0ii>
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	0000ffff 	.word	0x0000ffff

0800076c <HAL_TIM_PeriodElapsedCallback>:
//WS2812 led;
Button keyboard;



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
		if(htim -> Instance == TIM3){
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	4a07      	ldr	r2, [pc, #28]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d107      	bne.n	800078e <HAL_TIM_PeriodElapsedCallback+0x22>
		//	led.WS2812_LED_OFF();
			keyboard.COL_SCAN();
 800077e:	4b07      	ldr	r3, [pc, #28]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000780:	0018      	movs	r0, r3
 8000782:	f7ff fd7f 	bl	8000284 <_ZN6Button8COL_SCANEv>
			keyboard.ROW_SCAN();
 8000786:	4b05      	ldr	r3, [pc, #20]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000788:	0018      	movs	r0, r3
 800078a:	f7ff fe65 	bl	8000458 <_ZN6Button8ROW_SCANEv>

		if(htim->Instance == TIM7){


		}
	}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b002      	add	sp, #8
 8000794:	bd80      	pop	{r7, pc}
 8000796:	46c0      	nop			; (mov r8, r8)
 8000798:	40000400 	.word	0x40000400
 800079c:	20002340 	.word	0x20002340

080007a0 <CppMain>:

void CppMain(){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

	//led.WS2812_LED_OFF();

	while(1){

		keyboard.Key_led_on();
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <CppMain+0x20>)
 80007a6:	0018      	movs	r0, r3
 80007a8:	f7ff ff90 	bl	80006cc <_ZN6Button10Key_led_onEv>
		keyboard.Key_led_off();
 80007ac:	4b04      	ldr	r3, [pc, #16]	; (80007c0 <CppMain+0x20>)
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff ffa6 	bl	8000700 <_ZN6Button11Key_led_offEv>

		keyboard.Print_Key();
 80007b4:	4b02      	ldr	r3, [pc, #8]	; (80007c0 <CppMain+0x20>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff ff52 	bl	8000660 <_ZN6Button9Print_KeyEv>
		keyboard.Key_led_on();
 80007bc:	e7f2      	b.n	80007a4 <CppMain+0x4>
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	20002340 	.word	0x20002340

080007c4 <_Z41__static_initialization_and_destruction_0ii>:


	}
}
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	6039      	str	r1, [r7, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d107      	bne.n	80007e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80007d4:	683b      	ldr	r3, [r7, #0]
 80007d6:	4a05      	ldr	r2, [pc, #20]	; (80007ec <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80007d8:	4293      	cmp	r3, r2
 80007da:	d103      	bne.n	80007e4 <_Z41__static_initialization_and_destruction_0ii+0x20>
Button keyboard;
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f7ff fd2e 	bl	8000240 <_ZN6ButtonC1Ev>
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b002      	add	sp, #8
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	0000ffff 	.word	0x0000ffff
 80007f0:	20002340 	.word	0x20002340

080007f4 <_GLOBAL__sub_I_keyboard>:
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	4b03      	ldr	r3, [pc, #12]	; (8000808 <_GLOBAL__sub_I_keyboard+0x14>)
 80007fa:	0019      	movs	r1, r3
 80007fc:	2001      	movs	r0, #1
 80007fe:	f7ff ffe1 	bl	80007c4 <_Z41__static_initialization_and_destruction_0ii>
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	0000ffff 	.word	0x0000ffff

0800080c <_ZN6WS2812C1Ev>:
				  {25,26,27,28,29,30,31,32},
				  {33,34,35,36,37,38,39,40}};



WS2812::WS2812() {
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	3308      	adds	r3, #8
 8000818:	228a      	movs	r2, #138	; 0x8a
 800081a:	0192      	lsls	r2, r2, #6
 800081c:	2100      	movs	r1, #0
 800081e:	0018      	movs	r0, r3
 8000820:	f004 f8f6 	bl	8004a10 <memset>
	// TODO Auto-generated constructor stub
	BlBite = 0;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2200      	movs	r2, #0
 8000828:	709a      	strb	r2, [r3, #2]
	ReBite = 0;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	2200      	movs	r2, #0
 800082e:	70da      	strb	r2, [r3, #3]
	GrBite = 0;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	2200      	movs	r2, #0
 8000834:	711a      	strb	r2, [r3, #4]
	posX = 0;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2200      	movs	r2, #0
 800083a:	801a      	strh	r2, [r3, #0]

}
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	0018      	movs	r0, r3
 8000840:	46bd      	mov	sp, r7
 8000842:	b002      	add	sp, #8
 8000844:	bd80      	pop	{r7, pc}

08000846 <_ZN6WS281211WS2812_initEv>:

void WS2812::WS2812_init(void){
 8000846:	b580      	push	{r7, lr}
 8000848:	b084      	sub	sp, #16
 800084a:	af00      	add	r7, sp, #0
 800084c:	6078      	str	r0, [r7, #4]
	  int i;
	  for(i=DELAY_LEN;i<ARRAY_LEN;i++) BUF_DMA[i] = LOW;
 800084e:	2330      	movs	r3, #48	; 0x30
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fa      	ldr	r2, [r7, #12]
 8000854:	238a      	movs	r3, #138	; 0x8a
 8000856:	011b      	lsls	r3, r3, #4
 8000858:	429a      	cmp	r2, r3
 800085a:	da09      	bge.n	8000870 <_ZN6WS281211WS2812_initEv+0x2a>
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	3202      	adds	r2, #2
 8000862:	0092      	lsls	r2, r2, #2
 8000864:	2113      	movs	r1, #19
 8000866:	50d1      	str	r1, [r2, r3]
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	3301      	adds	r3, #1
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e7f0      	b.n	8000852 <_ZN6WS281211WS2812_initEv+0xc>
}
 8000870:	46c0      	nop			; (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b004      	add	sp, #16
 8000876:	bd80      	pop	{r7, pc}

08000878 <_ZN6WS281217WS2812_RGB_to_DMAEhhht>:

void WS2812::WS2812_RGB_to_DMA(uint8_t BlBite, uint8_t ReBite, uint8_t GrBite, uint16_t _posX){
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	000c      	movs	r4, r1
 8000882:	0010      	movs	r0, r2
 8000884:	0019      	movs	r1, r3
 8000886:	1cfb      	adds	r3, r7, #3
 8000888:	1c22      	adds	r2, r4, #0
 800088a:	701a      	strb	r2, [r3, #0]
 800088c:	1cbb      	adds	r3, r7, #2
 800088e:	1c02      	adds	r2, r0, #0
 8000890:	701a      	strb	r2, [r3, #0]
 8000892:	1c7b      	adds	r3, r7, #1
 8000894:	1c0a      	adds	r2, r1, #0
 8000896:	701a      	strb	r2, [r3, #0]
	volatile uint16_t i;
	  for(i=0;i<8;i++)
 8000898:	230e      	movs	r3, #14
 800089a:	18fb      	adds	r3, r7, r3
 800089c:	2200      	movs	r2, #0
 800089e:	801a      	strh	r2, [r3, #0]
 80008a0:	200e      	movs	r0, #14
 80008a2:	183b      	adds	r3, r7, r0
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	2107      	movs	r1, #7
 80008aa:	2300      	movs	r3, #0
 80008ac:	4291      	cmp	r1, r2
 80008ae:	415b      	adcs	r3, r3
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d100      	bne.n	80008b8 <_ZN6WS281217WS2812_RGB_to_DMAEhhht+0x40>
 80008b6:	e0bd      	b.n	8000a34 <_ZN6WS281217WS2812_RGB_to_DMAEhhht+0x1bc>
	  {
	    if (BitIsSet(ReBite,(7-i)) == 1)
 80008b8:	1cbb      	adds	r3, r7, #2
 80008ba:	781a      	ldrb	r2, [r3, #0]
 80008bc:	183b      	adds	r3, r7, r0
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	0019      	movs	r1, r3
 80008c4:	2307      	movs	r3, #7
 80008c6:	1a5b      	subs	r3, r3, r1
 80008c8:	411a      	asrs	r2, r3
 80008ca:	0013      	movs	r3, r2
 80008cc:	2201      	movs	r2, #1
 80008ce:	4013      	ands	r3, r2
 80008d0:	1e5a      	subs	r2, r3, #1
 80008d2:	4193      	sbcs	r3, r2
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	3b01      	subs	r3, #1
 80008d8:	425a      	negs	r2, r3
 80008da:	4153      	adcs	r3, r2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d013      	beq.n	800090a <_ZN6WS281217WS2812_RGB_to_DMAEhhht+0x92>
	    {
	      BUF_DMA[DELAY_LEN+_posX*24+i+8] = HIGH;
 80008e2:	2320      	movs	r3, #32
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	881a      	ldrh	r2, [r3, #0]
 80008e8:	0013      	movs	r3, r2
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	189b      	adds	r3, r3, r2
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	3330      	adds	r3, #48	; 0x30
 80008f2:	183a      	adds	r2, r7, r0
 80008f4:	8812      	ldrh	r2, [r2, #0]
 80008f6:	b292      	uxth	r2, r2
 80008f8:	189b      	adds	r3, r3, r2
 80008fa:	3308      	adds	r3, #8
 80008fc:	001a      	movs	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	3202      	adds	r2, #2
 8000902:	0092      	lsls	r2, r2, #2
 8000904:	2129      	movs	r1, #41	; 0x29
 8000906:	50d1      	str	r1, [r2, r3]
 8000908:	e013      	b.n	8000932 <_ZN6WS281217WS2812_RGB_to_DMAEhhht+0xba>
	    }else
	    {
	      BUF_DMA[DELAY_LEN+_posX*24+i+8] = LOW;
 800090a:	2320      	movs	r3, #32
 800090c:	18fb      	adds	r3, r7, r3
 800090e:	881a      	ldrh	r2, [r3, #0]
 8000910:	0013      	movs	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	189b      	adds	r3, r3, r2
 8000916:	00db      	lsls	r3, r3, #3
 8000918:	3330      	adds	r3, #48	; 0x30
 800091a:	220e      	movs	r2, #14
 800091c:	18ba      	adds	r2, r7, r2
 800091e:	8812      	ldrh	r2, [r2, #0]
 8000920:	b292      	uxth	r2, r2
 8000922:	189b      	adds	r3, r3, r2
 8000924:	3308      	adds	r3, #8
 8000926:	001a      	movs	r2, r3
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	3202      	adds	r2, #2
 800092c:	0092      	lsls	r2, r2, #2
 800092e:	2113      	movs	r1, #19
 8000930:	50d1      	str	r1, [r2, r3]
	    }
	    if (BitIsSet(GrBite,(7-i)) == 1)
 8000932:	1c7b      	adds	r3, r7, #1
 8000934:	781a      	ldrb	r2, [r3, #0]
 8000936:	200e      	movs	r0, #14
 8000938:	183b      	adds	r3, r7, r0
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	b29b      	uxth	r3, r3
 800093e:	0019      	movs	r1, r3
 8000940:	2307      	movs	r3, #7
 8000942:	1a5b      	subs	r3, r3, r1
 8000944:	411a      	asrs	r2, r3
 8000946:	0013      	movs	r3, r2
 8000948:	2201      	movs	r2, #1
 800094a:	4013      	ands	r3, r2
 800094c:	1e5a      	subs	r2, r3, #1
 800094e:	4193      	sbcs	r3, r2
 8000950:	b2db      	uxtb	r3, r3
 8000952:	3b01      	subs	r3, #1
 8000954:	425a      	negs	r2, r3
 8000956:	4153      	adcs	r3, r2
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b00      	cmp	r3, #0
 800095c:	d011      	beq.n	8000982 <_ZN6WS281217WS2812_RGB_to_DMAEhhht+0x10a>
	    {
	      BUF_DMA[DELAY_LEN+_posX*24+i+0] = HIGH;
 800095e:	2320      	movs	r3, #32
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	881a      	ldrh	r2, [r3, #0]
 8000964:	0013      	movs	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	189b      	adds	r3, r3, r2
 800096a:	00db      	lsls	r3, r3, #3
 800096c:	3330      	adds	r3, #48	; 0x30
 800096e:	183a      	adds	r2, r7, r0
 8000970:	8812      	ldrh	r2, [r2, #0]
 8000972:	b292      	uxth	r2, r2
 8000974:	189a      	adds	r2, r3, r2
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	3202      	adds	r2, #2
 800097a:	0092      	lsls	r2, r2, #2
 800097c:	2129      	movs	r1, #41	; 0x29
 800097e:	50d1      	str	r1, [r2, r3]
 8000980:	e011      	b.n	80009a6 <_ZN6WS281217WS2812_RGB_to_DMAEhhht+0x12e>
	    }else
	    {
	      BUF_DMA[DELAY_LEN+_posX*24+i+0] = LOW;
 8000982:	2320      	movs	r3, #32
 8000984:	18fb      	adds	r3, r7, r3
 8000986:	881a      	ldrh	r2, [r3, #0]
 8000988:	0013      	movs	r3, r2
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	189b      	adds	r3, r3, r2
 800098e:	00db      	lsls	r3, r3, #3
 8000990:	3330      	adds	r3, #48	; 0x30
 8000992:	220e      	movs	r2, #14
 8000994:	18ba      	adds	r2, r7, r2
 8000996:	8812      	ldrh	r2, [r2, #0]
 8000998:	b292      	uxth	r2, r2
 800099a:	189a      	adds	r2, r3, r2
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	3202      	adds	r2, #2
 80009a0:	0092      	lsls	r2, r2, #2
 80009a2:	2113      	movs	r1, #19
 80009a4:	50d1      	str	r1, [r2, r3]
	    }
	    if (BitIsSet(BlBite,(7-i)) == 1)
 80009a6:	1cfb      	adds	r3, r7, #3
 80009a8:	781a      	ldrb	r2, [r3, #0]
 80009aa:	200e      	movs	r0, #14
 80009ac:	183b      	adds	r3, r7, r0
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	0019      	movs	r1, r3
 80009b4:	2307      	movs	r3, #7
 80009b6:	1a5b      	subs	r3, r3, r1
 80009b8:	411a      	asrs	r2, r3
 80009ba:	0013      	movs	r3, r2
 80009bc:	2201      	movs	r2, #1
 80009be:	4013      	ands	r3, r2
 80009c0:	1e5a      	subs	r2, r3, #1
 80009c2:	4193      	sbcs	r3, r2
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	3b01      	subs	r3, #1
 80009c8:	425a      	negs	r2, r3
 80009ca:	4153      	adcs	r3, r2
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d013      	beq.n	80009fa <_ZN6WS281217WS2812_RGB_to_DMAEhhht+0x182>
	    {
	      BUF_DMA[DELAY_LEN+_posX*24+i+16] = HIGH;
 80009d2:	2320      	movs	r3, #32
 80009d4:	18fb      	adds	r3, r7, r3
 80009d6:	881a      	ldrh	r2, [r3, #0]
 80009d8:	0013      	movs	r3, r2
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	189b      	adds	r3, r3, r2
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	3330      	adds	r3, #48	; 0x30
 80009e2:	183a      	adds	r2, r7, r0
 80009e4:	8812      	ldrh	r2, [r2, #0]
 80009e6:	b292      	uxth	r2, r2
 80009e8:	189b      	adds	r3, r3, r2
 80009ea:	3310      	adds	r3, #16
 80009ec:	001a      	movs	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3202      	adds	r2, #2
 80009f2:	0092      	lsls	r2, r2, #2
 80009f4:	2129      	movs	r1, #41	; 0x29
 80009f6:	50d1      	str	r1, [r2, r3]
 80009f8:	e013      	b.n	8000a22 <_ZN6WS281217WS2812_RGB_to_DMAEhhht+0x1aa>
	    }else
	    {
	      BUF_DMA[DELAY_LEN+_posX*24+i+16] = LOW;
 80009fa:	2320      	movs	r3, #32
 80009fc:	18fb      	adds	r3, r7, r3
 80009fe:	881a      	ldrh	r2, [r3, #0]
 8000a00:	0013      	movs	r3, r2
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	189b      	adds	r3, r3, r2
 8000a06:	00db      	lsls	r3, r3, #3
 8000a08:	3330      	adds	r3, #48	; 0x30
 8000a0a:	220e      	movs	r2, #14
 8000a0c:	18ba      	adds	r2, r7, r2
 8000a0e:	8812      	ldrh	r2, [r2, #0]
 8000a10:	b292      	uxth	r2, r2
 8000a12:	189b      	adds	r3, r3, r2
 8000a14:	3310      	adds	r3, #16
 8000a16:	001a      	movs	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3202      	adds	r2, #2
 8000a1c:	0092      	lsls	r2, r2, #2
 8000a1e:	2113      	movs	r1, #19
 8000a20:	50d1      	str	r1, [r2, r3]
	  for(i=0;i<8;i++)
 8000a22:	210e      	movs	r1, #14
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	881b      	ldrh	r3, [r3, #0]
 8000a28:	b29b      	uxth	r3, r3
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	187b      	adds	r3, r7, r1
 8000a30:	801a      	strh	r2, [r3, #0]
 8000a32:	e735      	b.n	80008a0 <_ZN6WS281217WS2812_RGB_to_DMAEhhht+0x28>
	    }

	  }
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	b005      	add	sp, #20
 8000a3a:	bd90      	pop	{r4, r7, pc}

08000a3c <_ZN6WS281213WS_NUM_TO_LEDEhh>:

uint16_t WS2812::WS_NUM_TO_LED(uint8_t row, uint8_t col){
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	0008      	movs	r0, r1
 8000a46:	0011      	movs	r1, r2
 8000a48:	1cfb      	adds	r3, r7, #3
 8000a4a:	1c02      	adds	r2, r0, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
 8000a4e:	1cbb      	adds	r3, r7, #2
 8000a50:	1c0a      	adds	r2, r1, #0
 8000a52:	701a      	strb	r2, [r3, #0]
	switch (row) {
 8000a54:	1cfb      	adds	r3, r7, #3
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	2b04      	cmp	r3, #4
 8000a5a:	d852      	bhi.n	8000b02 <_ZN6WS281213WS_NUM_TO_LEDEhh+0xc6>
 8000a5c:	009a      	lsls	r2, r3, #2
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <_ZN6WS281213WS_NUM_TO_LEDEhh+0xd8>)
 8000a60:	18d3      	adds	r3, r2, r3
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	469f      	mov	pc, r3
		case 0:
			pos_ws = (5*8)-key[row][col];
 8000a66:	1cfb      	adds	r3, r7, #3
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	1cbb      	adds	r3, r7, #2
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	492a      	ldr	r1, [pc, #168]	; (8000b18 <_ZN6WS281213WS_NUM_TO_LEDEhh+0xdc>)
 8000a70:	00d2      	lsls	r2, r2, #3
 8000a72:	188a      	adds	r2, r1, r2
 8000a74:	5cd3      	ldrb	r3, [r2, r3]
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	2228      	movs	r2, #40	; 0x28
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	b299      	uxth	r1, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a26      	ldr	r2, [pc, #152]	; (8000b1c <_ZN6WS281213WS_NUM_TO_LEDEhh+0xe0>)
 8000a82:	5299      	strh	r1, [r3, r2]
			break;
 8000a84:	e03e      	b.n	8000b04 <_ZN6WS281213WS_NUM_TO_LEDEhh+0xc8>
		case 1:
			pos_ws = (2*8-1)+key[row][col];
 8000a86:	1cfb      	adds	r3, r7, #3
 8000a88:	781a      	ldrb	r2, [r3, #0]
 8000a8a:	1cbb      	adds	r3, r7, #2
 8000a8c:	781b      	ldrb	r3, [r3, #0]
 8000a8e:	4922      	ldr	r1, [pc, #136]	; (8000b18 <_ZN6WS281213WS_NUM_TO_LEDEhh+0xdc>)
 8000a90:	00d2      	lsls	r2, r2, #3
 8000a92:	188a      	adds	r2, r1, r2
 8000a94:	5cd3      	ldrb	r3, [r2, r3]
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	330f      	adds	r3, #15
 8000a9a:	b299      	uxth	r1, r3
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a1f      	ldr	r2, [pc, #124]	; (8000b1c <_ZN6WS281213WS_NUM_TO_LEDEhh+0xe0>)
 8000aa0:	5299      	strh	r1, [r3, r2]
			break;
 8000aa2:	e02f      	b.n	8000b04 <_ZN6WS281213WS_NUM_TO_LEDEhh+0xc8>
		case 2:
			pos_ws = (5*8) - key[row][col];
 8000aa4:	1cfb      	adds	r3, r7, #3
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	1cbb      	adds	r3, r7, #2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	491a      	ldr	r1, [pc, #104]	; (8000b18 <_ZN6WS281213WS_NUM_TO_LEDEhh+0xdc>)
 8000aae:	00d2      	lsls	r2, r2, #3
 8000ab0:	188a      	adds	r2, r1, r2
 8000ab2:	5cd3      	ldrb	r3, [r2, r3]
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	2228      	movs	r2, #40	; 0x28
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	b299      	uxth	r1, r3
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a17      	ldr	r2, [pc, #92]	; (8000b1c <_ZN6WS281213WS_NUM_TO_LEDEhh+0xe0>)
 8000ac0:	5299      	strh	r1, [r3, r2]
			break;
 8000ac2:	e01f      	b.n	8000b04 <_ZN6WS281213WS_NUM_TO_LEDEhh+0xc8>
		case 3:
			pos_ws = key[row][col]-(2*8+1);
 8000ac4:	1cfb      	adds	r3, r7, #3
 8000ac6:	781a      	ldrb	r2, [r3, #0]
 8000ac8:	1cbb      	adds	r3, r7, #2
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	4912      	ldr	r1, [pc, #72]	; (8000b18 <_ZN6WS281213WS_NUM_TO_LEDEhh+0xdc>)
 8000ace:	00d2      	lsls	r2, r2, #3
 8000ad0:	188a      	adds	r2, r1, r2
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	3b11      	subs	r3, #17
 8000ad8:	b299      	uxth	r1, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a0f      	ldr	r2, [pc, #60]	; (8000b1c <_ZN6WS281213WS_NUM_TO_LEDEhh+0xe0>)
 8000ade:	5299      	strh	r1, [r3, r2]
			break;
 8000ae0:	e010      	b.n	8000b04 <_ZN6WS281213WS_NUM_TO_LEDEhh+0xc8>
		case 4:
			pos_ws = (5*8)-key[row][col];
 8000ae2:	1cfb      	adds	r3, r7, #3
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	1cbb      	adds	r3, r7, #2
 8000ae8:	781b      	ldrb	r3, [r3, #0]
 8000aea:	490b      	ldr	r1, [pc, #44]	; (8000b18 <_ZN6WS281213WS_NUM_TO_LEDEhh+0xdc>)
 8000aec:	00d2      	lsls	r2, r2, #3
 8000aee:	188a      	adds	r2, r1, r2
 8000af0:	5cd3      	ldrb	r3, [r2, r3]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	2228      	movs	r2, #40	; 0x28
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	b299      	uxth	r1, r3
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4a07      	ldr	r2, [pc, #28]	; (8000b1c <_ZN6WS281213WS_NUM_TO_LEDEhh+0xe0>)
 8000afe:	5299      	strh	r1, [r3, r2]
			break;
 8000b00:	e000      	b.n	8000b04 <_ZN6WS281213WS_NUM_TO_LEDEhh+0xc8>
		default:
			break;
 8000b02:	46c0      	nop			; (mov r8, r8)
	}
	return pos_ws;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <_ZN6WS281213WS_NUM_TO_LEDEhh+0xe0>)
 8000b08:	5a9b      	ldrh	r3, [r3, r2]
}
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	46c0      	nop			; (mov r8, r8)
 8000b14:	080053d8 	.word	0x080053d8
 8000b18:	20000000 	.word	0x20000000
 8000b1c:	00002288 	.word	0x00002288

08000b20 <_ZN6WS281213WS2812_LED_ONEhh>:

void WS2812::WS2812_LED_ON(uint8_t led_row, uint8_t led_col){
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	0008      	movs	r0, r1
 8000b2a:	0011      	movs	r1, r2
 8000b2c:	1cfb      	adds	r3, r7, #3
 8000b2e:	1c02      	adds	r2, r0, #0
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	1cbb      	adds	r3, r7, #2
 8000b34:	1c0a      	adds	r2, r1, #0
 8000b36:	701a      	strb	r2, [r3, #0]
	posX = WS2812::WS_NUM_TO_LED(led_row, led_col);
 8000b38:	1cbb      	adds	r3, r7, #2
 8000b3a:	781a      	ldrb	r2, [r3, #0]
 8000b3c:	1cfb      	adds	r3, r7, #3
 8000b3e:	7819      	ldrb	r1, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	0018      	movs	r0, r3
 8000b44:	f7ff ff7a 	bl	8000a3c <_ZN6WS281213WS_NUM_TO_LEDEhh>
 8000b48:	0003      	movs	r3, r0
 8000b4a:	001a      	movs	r2, r3
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	801a      	strh	r2, [r3, #0]
	WS2812::WS2812_init();
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	0018      	movs	r0, r3
 8000b54:	f7ff fe77 	bl	8000846 <_ZN6WS281211WS2812_initEv>
	WS2812::WS2812_RGB_to_DMA(0, 128, 128, posX);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2380      	movs	r3, #128	; 0x80
 8000b62:	2280      	movs	r2, #128	; 0x80
 8000b64:	2100      	movs	r1, #0
 8000b66:	f7ff fe87 	bl	8000878 <_ZN6WS281217WS2812_RGB_to_DMAEhhht>
	HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_4,(uint32_t*)&BUF_DMA,ARRAY_LEN);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	3308      	adds	r3, #8
 8000b6e:	001a      	movs	r2, r3
 8000b70:	238a      	movs	r3, #138	; 0x8a
 8000b72:	011b      	lsls	r3, r3, #4
 8000b74:	4803      	ldr	r0, [pc, #12]	; (8000b84 <_ZN6WS281213WS2812_LED_ONEhh+0x64>)
 8000b76:	210c      	movs	r1, #12
 8000b78:	f002 f888 	bl	8002c8c <HAL_TIM_PWM_Start_DMA>
}
 8000b7c:	46c0      	nop			; (mov r8, r8)
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	b002      	add	sp, #8
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20002390 	.word	0x20002390

08000b88 <_ZN6WS281214WS2812_LED_OFFEv>:

void WS2812::WS2812_LED_OFF(){
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	WS2812::WS2812_init();
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	0018      	movs	r0, r3
 8000b94:	f7ff fe57 	bl	8000846 <_ZN6WS281211WS2812_initEv>
	HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_4,(uint32_t*)&BUF_DMA,ARRAY_LEN);
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3308      	adds	r3, #8
 8000b9c:	001a      	movs	r2, r3
 8000b9e:	238a      	movs	r3, #138	; 0x8a
 8000ba0:	011b      	lsls	r3, r3, #4
 8000ba2:	4804      	ldr	r0, [pc, #16]	; (8000bb4 <_ZN6WS281214WS2812_LED_OFFEv+0x2c>)
 8000ba4:	210c      	movs	r1, #12
 8000ba6:	f002 f871 	bl	8002c8c <HAL_TIM_PWM_Start_DMA>
}
 8000baa:	46c0      	nop			; (mov r8, r8)
 8000bac:	46bd      	mov	sp, r7
 8000bae:	b002      	add	sp, #8
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	46c0      	nop			; (mov r8, r8)
 8000bb4:	20002390 	.word	0x20002390

08000bb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bbe:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_DMA_Init+0x38>)
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_DMA_Init+0x38>)
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	615a      	str	r2, [r3, #20]
 8000bca:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_DMA_Init+0x38>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	2201      	movs	r2, #1
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2100      	movs	r1, #0
 8000bda:	200b      	movs	r0, #11
 8000bdc:	f000 fd98 	bl	8001710 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8000be0:	200b      	movs	r0, #11
 8000be2:	f000 fdaa 	bl	800173a <HAL_NVIC_EnableIRQ>

}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	46bd      	mov	sp, r7
 8000bea:	b002      	add	sp, #8
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf4:	b590      	push	{r4, r7, lr}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	240c      	movs	r4, #12
 8000bfc:	193b      	adds	r3, r7, r4
 8000bfe:	0018      	movs	r0, r3
 8000c00:	2314      	movs	r3, #20
 8000c02:	001a      	movs	r2, r3
 8000c04:	2100      	movs	r1, #0
 8000c06:	f003 ff03 	bl	8004a10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0a:	4b5b      	ldr	r3, [pc, #364]	; (8000d78 <MX_GPIO_Init+0x184>)
 8000c0c:	695a      	ldr	r2, [r3, #20]
 8000c0e:	4b5a      	ldr	r3, [pc, #360]	; (8000d78 <MX_GPIO_Init+0x184>)
 8000c10:	2180      	movs	r1, #128	; 0x80
 8000c12:	03c9      	lsls	r1, r1, #15
 8000c14:	430a      	orrs	r2, r1
 8000c16:	615a      	str	r2, [r3, #20]
 8000c18:	4b57      	ldr	r3, [pc, #348]	; (8000d78 <MX_GPIO_Init+0x184>)
 8000c1a:	695a      	ldr	r2, [r3, #20]
 8000c1c:	2380      	movs	r3, #128	; 0x80
 8000c1e:	03db      	lsls	r3, r3, #15
 8000c20:	4013      	ands	r3, r2
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c26:	4b54      	ldr	r3, [pc, #336]	; (8000d78 <MX_GPIO_Init+0x184>)
 8000c28:	695a      	ldr	r2, [r3, #20]
 8000c2a:	4b53      	ldr	r3, [pc, #332]	; (8000d78 <MX_GPIO_Init+0x184>)
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	02c9      	lsls	r1, r1, #11
 8000c30:	430a      	orrs	r2, r1
 8000c32:	615a      	str	r2, [r3, #20]
 8000c34:	4b50      	ldr	r3, [pc, #320]	; (8000d78 <MX_GPIO_Init+0x184>)
 8000c36:	695a      	ldr	r2, [r3, #20]
 8000c38:	2380      	movs	r3, #128	; 0x80
 8000c3a:	02db      	lsls	r3, r3, #11
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	4b4d      	ldr	r3, [pc, #308]	; (8000d78 <MX_GPIO_Init+0x184>)
 8000c44:	695a      	ldr	r2, [r3, #20]
 8000c46:	4b4c      	ldr	r3, [pc, #304]	; (8000d78 <MX_GPIO_Init+0x184>)
 8000c48:	2180      	movs	r1, #128	; 0x80
 8000c4a:	0289      	lsls	r1, r1, #10
 8000c4c:	430a      	orrs	r2, r1
 8000c4e:	615a      	str	r2, [r3, #20]
 8000c50:	4b49      	ldr	r3, [pc, #292]	; (8000d78 <MX_GPIO_Init+0x184>)
 8000c52:	695a      	ldr	r2, [r3, #20]
 8000c54:	2380      	movs	r3, #128	; 0x80
 8000c56:	029b      	lsls	r3, r3, #10
 8000c58:	4013      	ands	r3, r2
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 8000c5e:	2388      	movs	r3, #136	; 0x88
 8000c60:	0219      	lsls	r1, r3, #8
 8000c62:	2390      	movs	r3, #144	; 0x90
 8000c64:	05db      	lsls	r3, r3, #23
 8000c66:	2200      	movs	r2, #0
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f001 f8f7 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000c6e:	4b43      	ldr	r3, [pc, #268]	; (8000d7c <MX_GPIO_Init+0x188>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	21f8      	movs	r1, #248	; 0xf8
 8000c74:	0018      	movs	r0, r3
 8000c76:	f001 f8f1 	bl	8001e5c <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8000c7a:	2380      	movs	r3, #128	; 0x80
 8000c7c:	011b      	lsls	r3, r3, #4
 8000c7e:	4840      	ldr	r0, [pc, #256]	; (8000d80 <MX_GPIO_Init+0x18c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	0019      	movs	r1, r3
 8000c84:	f001 f8ea 	bl	8001e5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c88:	193b      	adds	r3, r7, r4
 8000c8a:	22f0      	movs	r2, #240	; 0xf0
 8000c8c:	0212      	lsls	r2, r2, #8
 8000c8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c90:	193b      	adds	r3, r7, r4
 8000c92:	2200      	movs	r2, #0
 8000c94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	2201      	movs	r2, #1
 8000c9a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c9c:	193b      	adds	r3, r7, r4
 8000c9e:	4a37      	ldr	r2, [pc, #220]	; (8000d7c <MX_GPIO_Init+0x188>)
 8000ca0:	0019      	movs	r1, r3
 8000ca2:	0010      	movs	r0, r2
 8000ca4:	f000 ff62 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ca8:	193b      	adds	r3, r7, r4
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	0052      	lsls	r2, r2, #1
 8000cae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	193b      	adds	r3, r7, r4
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb6:	193b      	adds	r3, r7, r4
 8000cb8:	2201      	movs	r2, #1
 8000cba:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbc:	193a      	adds	r2, r7, r4
 8000cbe:	2390      	movs	r3, #144	; 0x90
 8000cc0:	05db      	lsls	r3, r3, #23
 8000cc2:	0011      	movs	r1, r2
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	f000 ff51 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000cca:	0021      	movs	r1, r4
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2280      	movs	r2, #128	; 0x80
 8000cd0:	0112      	lsls	r2, r2, #4
 8000cd2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	000c      	movs	r4, r1
 8000cd6:	193b      	adds	r3, r7, r4
 8000cd8:	2201      	movs	r2, #1
 8000cda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	2201      	movs	r2, #1
 8000ce0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	193a      	adds	r2, r7, r4
 8000cea:	2390      	movs	r3, #144	; 0x90
 8000cec:	05db      	lsls	r3, r3, #23
 8000cee:	0011      	movs	r1, r2
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 ff3b 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	0212      	lsls	r2, r2, #8
 8000cfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d00:	000c      	movs	r4, r1
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2201      	movs	r2, #1
 8000d06:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2203      	movs	r2, #3
 8000d12:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	193a      	adds	r2, r7, r4
 8000d16:	2390      	movs	r3, #144	; 0x90
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f000 ff25 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	22f8      	movs	r2, #248	; 0xf8
 8000d26:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	2201      	movs	r2, #1
 8000d32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3a:	193b      	adds	r3, r7, r4
 8000d3c:	4a0f      	ldr	r2, [pc, #60]	; (8000d7c <MX_GPIO_Init+0x188>)
 8000d3e:	0019      	movs	r1, r3
 8000d40:	0010      	movs	r0, r2
 8000d42:	f000 ff13 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d46:	0021      	movs	r1, r4
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d50:	187b      	adds	r3, r7, r1
 8000d52:	2201      	movs	r2, #1
 8000d54:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2201      	movs	r2, #1
 8000d5a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	4a06      	ldr	r2, [pc, #24]	; (8000d80 <MX_GPIO_Init+0x18c>)
 8000d66:	0019      	movs	r1, r3
 8000d68:	0010      	movs	r0, r2
 8000d6a:	f000 feff 	bl	8001b6c <HAL_GPIO_Init>

}
 8000d6e:	46c0      	nop			; (mov r8, r8)
 8000d70:	46bd      	mov	sp, r7
 8000d72:	b009      	add	sp, #36	; 0x24
 8000d74:	bd90      	pop	{r4, r7, pc}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	40021000 	.word	0x40021000
 8000d7c:	48000400 	.word	0x48000400
 8000d80:	48001400 	.word	0x48001400

08000d84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d88:	f000 fbb2 	bl	80014f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d8c:	f000 f81c 	bl	8000dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d90:	f7ff ff30 	bl	8000bf4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d94:	f7ff ff10 	bl	8000bb8 <MX_DMA_Init>
  MX_TIM3_Init();
 8000d98:	f000 f99a 	bl	80010d0 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000d9c:	f000 fb00 	bl	80013a0 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000da0:	f000 f918 	bl	8000fd4 <MX_TIM2_Init>
  MX_TIM7_Init();
 8000da4:	f000 f9ea 	bl	800117c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <main+0x3c>)
 8000daa:	0018      	movs	r0, r3
 8000dac:	f001 fec4 	bl	8002b38 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <main+0x40>)
 8000db2:	0018      	movs	r0, r3
 8000db4:	f001 fec0 	bl	8002b38 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  CppMain();
 8000db8:	f7ff fcf2 	bl	80007a0 <CppMain>
 8000dbc:	e7fc      	b.n	8000db8 <main+0x34>
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	200023d8 	.word	0x200023d8
 8000dc4:	20002420 	.word	0x20002420

08000dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b099      	sub	sp, #100	; 0x64
 8000dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dce:	242c      	movs	r4, #44	; 0x2c
 8000dd0:	193b      	adds	r3, r7, r4
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	2334      	movs	r3, #52	; 0x34
 8000dd6:	001a      	movs	r2, r3
 8000dd8:	2100      	movs	r1, #0
 8000dda:	f003 fe19 	bl	8004a10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dde:	231c      	movs	r3, #28
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	0018      	movs	r0, r3
 8000de4:	2310      	movs	r3, #16
 8000de6:	001a      	movs	r2, r3
 8000de8:	2100      	movs	r1, #0
 8000dea:	f003 fe11 	bl	8004a10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dee:	003b      	movs	r3, r7
 8000df0:	0018      	movs	r0, r3
 8000df2:	231c      	movs	r3, #28
 8000df4:	001a      	movs	r2, r3
 8000df6:	2100      	movs	r1, #0
 8000df8:	f003 fe0a 	bl	8004a10 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dfc:	0021      	movs	r1, r4
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2201      	movs	r2, #1
 8000e02:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2201      	movs	r2, #1
 8000e08:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	2202      	movs	r2, #2
 8000e0e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e10:	187b      	adds	r3, r7, r1
 8000e12:	2280      	movs	r2, #128	; 0x80
 8000e14:	0252      	lsls	r2, r2, #9
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000e18:	187b      	adds	r3, r7, r1
 8000e1a:	2280      	movs	r2, #128	; 0x80
 8000e1c:	0352      	lsls	r2, r2, #13
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000e20:	187b      	adds	r3, r7, r1
 8000e22:	2200      	movs	r2, #0
 8000e24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e26:	187b      	adds	r3, r7, r1
 8000e28:	0018      	movs	r0, r3
 8000e2a:	f001 f835 	bl	8001e98 <HAL_RCC_OscConfig>
 8000e2e:	1e03      	subs	r3, r0, #0
 8000e30:	d001      	beq.n	8000e36 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e32:	f000 f828 	bl	8000e86 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e36:	211c      	movs	r1, #28
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2207      	movs	r2, #7
 8000e3c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2202      	movs	r2, #2
 8000e42:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000e50:	187b      	adds	r3, r7, r1
 8000e52:	2101      	movs	r1, #1
 8000e54:	0018      	movs	r0, r3
 8000e56:	f001 fba5 	bl	80025a4 <HAL_RCC_ClockConfig>
 8000e5a:	1e03      	subs	r3, r0, #0
 8000e5c:	d001      	beq.n	8000e62 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e5e:	f000 f812 	bl	8000e86 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e62:	003b      	movs	r3, r7
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000e68:	003b      	movs	r3, r7
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6e:	003b      	movs	r3, r7
 8000e70:	0018      	movs	r0, r3
 8000e72:	f001 fd11 	bl	8002898 <HAL_RCCEx_PeriphCLKConfig>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000e7a:	f000 f804 	bl	8000e86 <Error_Handler>
  }
}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	46bd      	mov	sp, r7
 8000e82:	b019      	add	sp, #100	; 0x64
 8000e84:	bd90      	pop	{r4, r7, pc}

08000e86 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e8a:	b672      	cpsid	i
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e8e:	e7fe      	b.n	8000e8e <Error_Handler+0x8>

08000e90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <HAL_MspInit+0x44>)
 8000e98:	699a      	ldr	r2, [r3, #24]
 8000e9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ed4 <HAL_MspInit+0x44>)
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	430a      	orrs	r2, r1
 8000ea0:	619a      	str	r2, [r3, #24]
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_MspInit+0x44>)
 8000ea4:	699b      	ldr	r3, [r3, #24]
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <HAL_MspInit+0x44>)
 8000eb0:	69da      	ldr	r2, [r3, #28]
 8000eb2:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <HAL_MspInit+0x44>)
 8000eb4:	2180      	movs	r1, #128	; 0x80
 8000eb6:	0549      	lsls	r1, r1, #21
 8000eb8:	430a      	orrs	r2, r1
 8000eba:	61da      	str	r2, [r3, #28]
 8000ebc:	4b05      	ldr	r3, [pc, #20]	; (8000ed4 <HAL_MspInit+0x44>)
 8000ebe:	69da      	ldr	r2, [r3, #28]
 8000ec0:	2380      	movs	r3, #128	; 0x80
 8000ec2:	055b      	lsls	r3, r3, #21
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	603b      	str	r3, [r7, #0]
 8000ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	b002      	add	sp, #8
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	46c0      	nop			; (mov r8, r8)
 8000ed4:	40021000 	.word	0x40021000

08000ed8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <NMI_Handler+0x4>

08000ede <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <HardFault_Handler+0x4>

08000ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}

08000eee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}

08000ef8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000efc:	f000 fb40 	bl	8001580 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f00:	46c0      	nop			; (mov r8, r8)
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

	HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_4);
 8000f0c:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x1c>)
 8000f0e:	210c      	movs	r1, #12
 8000f10:	0018      	movs	r0, r3
 8000f12:	f002 f871 	bl	8002ff8 <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8000f16:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x20>)
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f000 fd1e 	bl	800195a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20002390 	.word	0x20002390
 8000f28:	20002468 	.word	0x20002468

08000f2c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f30:	4b03      	ldr	r3, [pc, #12]	; (8000f40 <TIM3_IRQHandler+0x14>)
 8000f32:	0018      	movs	r0, r3
 8000f34:	f002 f940 	bl	80031b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	200023d8 	.word	0x200023d8

08000f44 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f48:	4b03      	ldr	r3, [pc, #12]	; (8000f58 <TIM7_IRQHandler+0x14>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f002 f934 	bl	80031b8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f50:	46c0      	nop			; (mov r8, r8)
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	20002420 	.word	0x20002420

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	; (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	; (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	18d3      	adds	r3, r2, r3
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f003 fd16 	bl	80049bc <__errno>
 8000f90:	0003      	movs	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	425b      	negs	r3, r3
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	18d2      	adds	r2, r2, r3
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <_sbrk+0x64>)
 8000fac:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	0018      	movs	r0, r3
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	b006      	add	sp, #24
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20008000 	.word	0x20008000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	2000238c 	.word	0x2000238c
 8000fc4:	20002548 	.word	0x20002548

08000fc8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
DMA_HandleTypeDef hdma_tim2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08e      	sub	sp, #56	; 0x38
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fda:	2328      	movs	r3, #40	; 0x28
 8000fdc:	18fb      	adds	r3, r7, r3
 8000fde:	0018      	movs	r0, r3
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	001a      	movs	r2, r3
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	f003 fd13 	bl	8004a10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	2320      	movs	r3, #32
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	0018      	movs	r0, r3
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	f003 fd0b 	bl	8004a10 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	231c      	movs	r3, #28
 8001000:	001a      	movs	r2, r3
 8001002:	2100      	movs	r1, #0
 8001004:	f003 fd04 	bl	8004a10 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001008:	4b30      	ldr	r3, [pc, #192]	; (80010cc <MX_TIM2_Init+0xf8>)
 800100a:	2280      	movs	r2, #128	; 0x80
 800100c:	05d2      	lsls	r2, r2, #23
 800100e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001010:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <MX_TIM2_Init+0xf8>)
 8001012:	2200      	movs	r2, #0
 8001014:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001016:	4b2d      	ldr	r3, [pc, #180]	; (80010cc <MX_TIM2_Init+0xf8>)
 8001018:	2200      	movs	r2, #0
 800101a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59;
 800101c:	4b2b      	ldr	r3, [pc, #172]	; (80010cc <MX_TIM2_Init+0xf8>)
 800101e:	223b      	movs	r2, #59	; 0x3b
 8001020:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001022:	4b2a      	ldr	r3, [pc, #168]	; (80010cc <MX_TIM2_Init+0xf8>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001028:	4b28      	ldr	r3, [pc, #160]	; (80010cc <MX_TIM2_Init+0xf8>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800102e:	4b27      	ldr	r3, [pc, #156]	; (80010cc <MX_TIM2_Init+0xf8>)
 8001030:	0018      	movs	r0, r3
 8001032:	f001 fd31 	bl	8002a98 <HAL_TIM_Base_Init>
 8001036:	1e03      	subs	r3, r0, #0
 8001038:	d001      	beq.n	800103e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800103a:	f7ff ff24 	bl	8000e86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103e:	2128      	movs	r1, #40	; 0x28
 8001040:	187b      	adds	r3, r7, r1
 8001042:	2280      	movs	r2, #128	; 0x80
 8001044:	0152      	lsls	r2, r2, #5
 8001046:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001048:	187a      	adds	r2, r7, r1
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <MX_TIM2_Init+0xf8>)
 800104c:	0011      	movs	r1, r2
 800104e:	0018      	movs	r0, r3
 8001050:	f002 fa8e 	bl	8003570 <HAL_TIM_ConfigClockSource>
 8001054:	1e03      	subs	r3, r0, #0
 8001056:	d001      	beq.n	800105c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8001058:	f7ff ff15 	bl	8000e86 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800105c:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_TIM2_Init+0xf8>)
 800105e:	0018      	movs	r0, r3
 8001060:	f001 fdbc 	bl	8002bdc <HAL_TIM_PWM_Init>
 8001064:	1e03      	subs	r3, r0, #0
 8001066:	d001      	beq.n	800106c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8001068:	f7ff ff0d 	bl	8000e86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106c:	2120      	movs	r1, #32
 800106e:	187b      	adds	r3, r7, r1
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001074:	187b      	adds	r3, r7, r1
 8001076:	2200      	movs	r2, #0
 8001078:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800107a:	187a      	adds	r2, r7, r1
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_TIM2_Init+0xf8>)
 800107e:	0011      	movs	r1, r2
 8001080:	0018      	movs	r0, r3
 8001082:	f002 ff87 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d001      	beq.n	800108e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 800108a:	f7ff fefc 	bl	8000e86 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2260      	movs	r2, #96	; 0x60
 8001092:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	2200      	movs	r2, #0
 80010a4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010a6:	1d39      	adds	r1, r7, #4
 80010a8:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_TIM2_Init+0xf8>)
 80010aa:	220c      	movs	r2, #12
 80010ac:	0018      	movs	r0, r3
 80010ae:	f002 f999 	bl	80033e4 <HAL_TIM_PWM_ConfigChannel>
 80010b2:	1e03      	subs	r3, r0, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80010b6:	f7ff fee6 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80010ba:	4b04      	ldr	r3, [pc, #16]	; (80010cc <MX_TIM2_Init+0xf8>)
 80010bc:	0018      	movs	r0, r3
 80010be:	f000 f92f 	bl	8001320 <HAL_TIM_MspPostInit>

}
 80010c2:	46c0      	nop			; (mov r8, r8)
 80010c4:	46bd      	mov	sp, r7
 80010c6:	b00e      	add	sp, #56	; 0x38
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	46c0      	nop			; (mov r8, r8)
 80010cc:	20002390 	.word	0x20002390

080010d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010d6:	2308      	movs	r3, #8
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	0018      	movs	r0, r3
 80010dc:	2310      	movs	r3, #16
 80010de:	001a      	movs	r2, r3
 80010e0:	2100      	movs	r1, #0
 80010e2:	f003 fc95 	bl	8004a10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010e6:	003b      	movs	r3, r7
 80010e8:	0018      	movs	r0, r3
 80010ea:	2308      	movs	r3, #8
 80010ec:	001a      	movs	r2, r3
 80010ee:	2100      	movs	r1, #0
 80010f0:	f003 fc8e 	bl	8004a10 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <MX_TIM3_Init+0xa4>)
 80010f6:	4a20      	ldr	r2, [pc, #128]	; (8001178 <MX_TIM3_Init+0xa8>)
 80010f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <MX_TIM3_Init+0xa4>)
 80010fc:	22e0      	movs	r2, #224	; 0xe0
 80010fe:	32ff      	adds	r2, #255	; 0xff
 8001100:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001102:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <MX_TIM3_Init+0xa4>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8001108:	4b1a      	ldr	r3, [pc, #104]	; (8001174 <MX_TIM3_Init+0xa4>)
 800110a:	22fa      	movs	r2, #250	; 0xfa
 800110c:	0092      	lsls	r2, r2, #2
 800110e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001110:	4b18      	ldr	r3, [pc, #96]	; (8001174 <MX_TIM3_Init+0xa4>)
 8001112:	2200      	movs	r2, #0
 8001114:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <MX_TIM3_Init+0xa4>)
 8001118:	2200      	movs	r2, #0
 800111a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <MX_TIM3_Init+0xa4>)
 800111e:	0018      	movs	r0, r3
 8001120:	f001 fcba 	bl	8002a98 <HAL_TIM_Base_Init>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8001128:	f7ff fead 	bl	8000e86 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800112c:	2108      	movs	r1, #8
 800112e:	187b      	adds	r3, r7, r1
 8001130:	2280      	movs	r2, #128	; 0x80
 8001132:	0152      	lsls	r2, r2, #5
 8001134:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001136:	187a      	adds	r2, r7, r1
 8001138:	4b0e      	ldr	r3, [pc, #56]	; (8001174 <MX_TIM3_Init+0xa4>)
 800113a:	0011      	movs	r1, r2
 800113c:	0018      	movs	r0, r3
 800113e:	f002 fa17 	bl	8003570 <HAL_TIM_ConfigClockSource>
 8001142:	1e03      	subs	r3, r0, #0
 8001144:	d001      	beq.n	800114a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001146:	f7ff fe9e 	bl	8000e86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114a:	003b      	movs	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001150:	003b      	movs	r3, r7
 8001152:	2200      	movs	r2, #0
 8001154:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001156:	003a      	movs	r2, r7
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <MX_TIM3_Init+0xa4>)
 800115a:	0011      	movs	r1, r2
 800115c:	0018      	movs	r0, r3
 800115e:	f002 ff19 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	1e03      	subs	r3, r0, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001166:	f7ff fe8e 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	46bd      	mov	sp, r7
 800116e:	b006      	add	sp, #24
 8001170:	bd80      	pop	{r7, pc}
 8001172:	46c0      	nop			; (mov r8, r8)
 8001174:	200023d8 	.word	0x200023d8
 8001178:	40000400 	.word	0x40000400

0800117c <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001182:	003b      	movs	r3, r7
 8001184:	0018      	movs	r0, r3
 8001186:	2308      	movs	r3, #8
 8001188:	001a      	movs	r2, r3
 800118a:	2100      	movs	r1, #0
 800118c:	f003 fc40 	bl	8004a10 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001190:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <MX_TIM7_Init+0x6c>)
 8001192:	4a16      	ldr	r2, [pc, #88]	; (80011ec <MX_TIM7_Init+0x70>)
 8001194:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000;
 8001196:	4b14      	ldr	r3, [pc, #80]	; (80011e8 <MX_TIM7_Init+0x6c>)
 8001198:	4a15      	ldr	r2, [pc, #84]	; (80011f0 <MX_TIM7_Init+0x74>)
 800119a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MX_TIM7_Init+0x6c>)
 800119e:	2200      	movs	r2, #0
 80011a0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_TIM7_Init+0x6c>)
 80011a4:	22fa      	movs	r2, #250	; 0xfa
 80011a6:	0052      	lsls	r2, r2, #1
 80011a8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011aa:	4b0f      	ldr	r3, [pc, #60]	; (80011e8 <MX_TIM7_Init+0x6c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011b0:	4b0d      	ldr	r3, [pc, #52]	; (80011e8 <MX_TIM7_Init+0x6c>)
 80011b2:	0018      	movs	r0, r3
 80011b4:	f001 fc70 	bl	8002a98 <HAL_TIM_Base_Init>
 80011b8:	1e03      	subs	r3, r0, #0
 80011ba:	d001      	beq.n	80011c0 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 80011bc:	f7ff fe63 	bl	8000e86 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011c0:	003b      	movs	r3, r7
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c6:	003b      	movs	r3, r7
 80011c8:	2200      	movs	r2, #0
 80011ca:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011cc:	003a      	movs	r2, r7
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_TIM7_Init+0x6c>)
 80011d0:	0011      	movs	r1, r2
 80011d2:	0018      	movs	r0, r3
 80011d4:	f002 fede 	bl	8003f94 <HAL_TIMEx_MasterConfigSynchronization>
 80011d8:	1e03      	subs	r3, r0, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 80011dc:	f7ff fe53 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20002420 	.word	0x20002420
 80011ec:	40001400 	.word	0x40001400
 80011f0:	0000bb80 	.word	0x0000bb80

080011f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b086      	sub	sp, #24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	2380      	movs	r3, #128	; 0x80
 8001202:	05db      	lsls	r3, r3, #23
 8001204:	429a      	cmp	r2, r3
 8001206:	d145      	bne.n	8001294 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001208:	4b3e      	ldr	r3, [pc, #248]	; (8001304 <HAL_TIM_Base_MspInit+0x110>)
 800120a:	69da      	ldr	r2, [r3, #28]
 800120c:	4b3d      	ldr	r3, [pc, #244]	; (8001304 <HAL_TIM_Base_MspInit+0x110>)
 800120e:	2101      	movs	r1, #1
 8001210:	430a      	orrs	r2, r1
 8001212:	61da      	str	r2, [r3, #28]
 8001214:	4b3b      	ldr	r3, [pc, #236]	; (8001304 <HAL_TIM_Base_MspInit+0x110>)
 8001216:	69db      	ldr	r3, [r3, #28]
 8001218:	2201      	movs	r2, #1
 800121a:	4013      	ands	r3, r2
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8001220:	4b39      	ldr	r3, [pc, #228]	; (8001308 <HAL_TIM_Base_MspInit+0x114>)
 8001222:	4a3a      	ldr	r2, [pc, #232]	; (800130c <HAL_TIM_Base_MspInit+0x118>)
 8001224:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001226:	4b38      	ldr	r3, [pc, #224]	; (8001308 <HAL_TIM_Base_MspInit+0x114>)
 8001228:	2210      	movs	r2, #16
 800122a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 800122c:	4b36      	ldr	r3, [pc, #216]	; (8001308 <HAL_TIM_Base_MspInit+0x114>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001232:	4b35      	ldr	r3, [pc, #212]	; (8001308 <HAL_TIM_Base_MspInit+0x114>)
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001238:	4b33      	ldr	r3, [pc, #204]	; (8001308 <HAL_TIM_Base_MspInit+0x114>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	0092      	lsls	r2, r2, #2
 800123e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001240:	4b31      	ldr	r3, [pc, #196]	; (8001308 <HAL_TIM_Base_MspInit+0x114>)
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	0112      	lsls	r2, r2, #4
 8001246:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 8001248:	4b2f      	ldr	r3, [pc, #188]	; (8001308 <HAL_TIM_Base_MspInit+0x114>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 800124e:	4b2e      	ldr	r3, [pc, #184]	; (8001308 <HAL_TIM_Base_MspInit+0x114>)
 8001250:	2200      	movs	r2, #0
 8001252:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8001254:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <HAL_TIM_Base_MspInit+0x114>)
 8001256:	0018      	movs	r0, r3
 8001258:	f000 fa8c 	bl	8001774 <HAL_DMA_Init>
 800125c:	1e03      	subs	r3, r0, #0
 800125e:	d001      	beq.n	8001264 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8001260:	f7ff fe11 	bl	8000e86 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH4_TIM2_CH4);
 8001264:	4a2a      	ldr	r2, [pc, #168]	; (8001310 <HAL_TIM_Base_MspInit+0x11c>)
 8001266:	23a8      	movs	r3, #168	; 0xa8
 8001268:	58d3      	ldr	r3, [r2, r3]
 800126a:	4929      	ldr	r1, [pc, #164]	; (8001310 <HAL_TIM_Base_MspInit+0x11c>)
 800126c:	4a29      	ldr	r2, [pc, #164]	; (8001314 <HAL_TIM_Base_MspInit+0x120>)
 800126e:	4013      	ands	r3, r2
 8001270:	22a8      	movs	r2, #168	; 0xa8
 8001272:	508b      	str	r3, [r1, r2]
 8001274:	4a26      	ldr	r2, [pc, #152]	; (8001310 <HAL_TIM_Base_MspInit+0x11c>)
 8001276:	23a8      	movs	r3, #168	; 0xa8
 8001278:	58d3      	ldr	r3, [r2, r3]
 800127a:	4925      	ldr	r1, [pc, #148]	; (8001310 <HAL_TIM_Base_MspInit+0x11c>)
 800127c:	22a0      	movs	r2, #160	; 0xa0
 800127e:	01d2      	lsls	r2, r2, #7
 8001280:	4313      	orrs	r3, r2
 8001282:	22a8      	movs	r2, #168	; 0xa8
 8001284:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a1f      	ldr	r2, [pc, #124]	; (8001308 <HAL_TIM_Base_MspInit+0x114>)
 800128a:	631a      	str	r2, [r3, #48]	; 0x30
 800128c:	4b1e      	ldr	r3, [pc, #120]	; (8001308 <HAL_TIM_Base_MspInit+0x114>)
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001292:	e032      	b.n	80012fa <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM3)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a1f      	ldr	r2, [pc, #124]	; (8001318 <HAL_TIM_Base_MspInit+0x124>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d114      	bne.n	80012c8 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800129e:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_TIM_Base_MspInit+0x110>)
 80012a0:	69da      	ldr	r2, [r3, #28]
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_TIM_Base_MspInit+0x110>)
 80012a4:	2102      	movs	r1, #2
 80012a6:	430a      	orrs	r2, r1
 80012a8:	61da      	str	r2, [r3, #28]
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_TIM_Base_MspInit+0x110>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	2202      	movs	r2, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
 80012b4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	2010      	movs	r0, #16
 80012bc:	f000 fa28 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80012c0:	2010      	movs	r0, #16
 80012c2:	f000 fa3a 	bl	800173a <HAL_NVIC_EnableIRQ>
}
 80012c6:	e018      	b.n	80012fa <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM7)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a13      	ldr	r2, [pc, #76]	; (800131c <HAL_TIM_Base_MspInit+0x128>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d113      	bne.n	80012fa <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <HAL_TIM_Base_MspInit+0x110>)
 80012d4:	69da      	ldr	r2, [r3, #28]
 80012d6:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_TIM_Base_MspInit+0x110>)
 80012d8:	2120      	movs	r1, #32
 80012da:	430a      	orrs	r2, r1
 80012dc:	61da      	str	r2, [r3, #28]
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <HAL_TIM_Base_MspInit+0x110>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	2220      	movs	r2, #32
 80012e4:	4013      	ands	r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2100      	movs	r1, #0
 80012ee:	2012      	movs	r0, #18
 80012f0:	f000 fa0e 	bl	8001710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80012f4:	2012      	movs	r0, #18
 80012f6:	f000 fa20 	bl	800173a <HAL_NVIC_EnableIRQ>
}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	b006      	add	sp, #24
 8001300:	bd80      	pop	{r7, pc}
 8001302:	46c0      	nop			; (mov r8, r8)
 8001304:	40021000 	.word	0x40021000
 8001308:	20002468 	.word	0x20002468
 800130c:	40020044 	.word	0x40020044
 8001310:	40020000 	.word	0x40020000
 8001314:	ffff0fff 	.word	0xffff0fff
 8001318:	40000400 	.word	0x40000400
 800131c:	40001400 	.word	0x40001400

08001320 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	240c      	movs	r4, #12
 800132a:	193b      	adds	r3, r7, r4
 800132c:	0018      	movs	r0, r3
 800132e:	2314      	movs	r3, #20
 8001330:	001a      	movs	r2, r3
 8001332:	2100      	movs	r1, #0
 8001334:	f003 fb6c 	bl	8004a10 <memset>
  if(timHandle->Instance==TIM2)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	05db      	lsls	r3, r3, #23
 8001340:	429a      	cmp	r2, r3
 8001342:	d124      	bne.n	800138e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_TIM_MspPostInit+0x78>)
 8001346:	695a      	ldr	r2, [r3, #20]
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_TIM_MspPostInit+0x78>)
 800134a:	2180      	movs	r1, #128	; 0x80
 800134c:	02c9      	lsls	r1, r1, #11
 800134e:	430a      	orrs	r2, r1
 8001350:	615a      	str	r2, [r3, #20]
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_TIM_MspPostInit+0x78>)
 8001354:	695a      	ldr	r2, [r3, #20]
 8001356:	2380      	movs	r3, #128	; 0x80
 8001358:	02db      	lsls	r3, r3, #11
 800135a:	4013      	ands	r3, r2
 800135c:	60bb      	str	r3, [r7, #8]
 800135e:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001360:	193b      	adds	r3, r7, r4
 8001362:	2280      	movs	r2, #128	; 0x80
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001368:	0021      	movs	r1, r4
 800136a:	187b      	adds	r3, r7, r1
 800136c:	2202      	movs	r2, #2
 800136e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	187b      	adds	r3, r7, r1
 8001372:	2200      	movs	r2, #0
 8001374:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	187b      	adds	r3, r7, r1
 8001378:	2200      	movs	r2, #0
 800137a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800137c:	187b      	adds	r3, r7, r1
 800137e:	2202      	movs	r2, #2
 8001380:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	187b      	adds	r3, r7, r1
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <HAL_TIM_MspPostInit+0x7c>)
 8001386:	0019      	movs	r1, r3
 8001388:	0010      	movs	r0, r2
 800138a:	f000 fbef 	bl	8001b6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b009      	add	sp, #36	; 0x24
 8001394:	bd90      	pop	{r4, r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	40021000 	.word	0x40021000
 800139c:	48000400 	.word	0x48000400

080013a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013a4:	4b14      	ldr	r3, [pc, #80]	; (80013f8 <MX_USART1_UART_Init+0x58>)
 80013a6:	4a15      	ldr	r2, [pc, #84]	; (80013fc <MX_USART1_UART_Init+0x5c>)
 80013a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013aa:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <MX_USART1_UART_Init+0x58>)
 80013ac:	22e1      	movs	r2, #225	; 0xe1
 80013ae:	0252      	lsls	r2, r2, #9
 80013b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013b2:	4b11      	ldr	r3, [pc, #68]	; (80013f8 <MX_USART1_UART_Init+0x58>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <MX_USART1_UART_Init+0x58>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80013be:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <MX_USART1_UART_Init+0x58>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80013c4:	4b0c      	ldr	r3, [pc, #48]	; (80013f8 <MX_USART1_UART_Init+0x58>)
 80013c6:	220c      	movs	r2, #12
 80013c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <MX_USART1_UART_Init+0x58>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80013d0:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <MX_USART1_UART_Init+0x58>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013d6:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <MX_USART1_UART_Init+0x58>)
 80013d8:	2200      	movs	r2, #0
 80013da:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013dc:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <MX_USART1_UART_Init+0x58>)
 80013de:	2200      	movs	r2, #0
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013e2:	4b05      	ldr	r3, [pc, #20]	; (80013f8 <MX_USART1_UART_Init+0x58>)
 80013e4:	0018      	movs	r0, r3
 80013e6:	f002 fe43 	bl	8004070 <HAL_UART_Init>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d001      	beq.n	80013f2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80013ee:	f7ff fd4a 	bl	8000e86 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	200024ac 	.word	0x200024ac
 80013fc:	40013800 	.word	0x40013800

08001400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001400:	b590      	push	{r4, r7, lr}
 8001402:	b08b      	sub	sp, #44	; 0x2c
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001408:	2414      	movs	r4, #20
 800140a:	193b      	adds	r3, r7, r4
 800140c:	0018      	movs	r0, r3
 800140e:	2314      	movs	r3, #20
 8001410:	001a      	movs	r2, r3
 8001412:	2100      	movs	r1, #0
 8001414:	f003 fafc 	bl	8004a10 <memset>
  if(uartHandle->Instance==USART1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a1d      	ldr	r2, [pc, #116]	; (8001494 <HAL_UART_MspInit+0x94>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d133      	bne.n	800148a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001422:	4b1d      	ldr	r3, [pc, #116]	; (8001498 <HAL_UART_MspInit+0x98>)
 8001424:	699a      	ldr	r2, [r3, #24]
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <HAL_UART_MspInit+0x98>)
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	01c9      	lsls	r1, r1, #7
 800142c:	430a      	orrs	r2, r1
 800142e:	619a      	str	r2, [r3, #24]
 8001430:	4b19      	ldr	r3, [pc, #100]	; (8001498 <HAL_UART_MspInit+0x98>)
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	01db      	lsls	r3, r3, #7
 8001438:	4013      	ands	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
 800143c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <HAL_UART_MspInit+0x98>)
 8001440:	695a      	ldr	r2, [r3, #20]
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_UART_MspInit+0x98>)
 8001444:	2180      	movs	r1, #128	; 0x80
 8001446:	0289      	lsls	r1, r1, #10
 8001448:	430a      	orrs	r2, r1
 800144a:	615a      	str	r2, [r3, #20]
 800144c:	4b12      	ldr	r3, [pc, #72]	; (8001498 <HAL_UART_MspInit+0x98>)
 800144e:	695a      	ldr	r2, [r3, #20]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	029b      	lsls	r3, r3, #10
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800145a:	193b      	adds	r3, r7, r4
 800145c:	22c0      	movs	r2, #192	; 0xc0
 800145e:	00d2      	lsls	r2, r2, #3
 8001460:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	0021      	movs	r1, r4
 8001464:	187b      	adds	r3, r7, r1
 8001466:	2202      	movs	r2, #2
 8001468:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146a:	187b      	adds	r3, r7, r1
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001470:	187b      	adds	r3, r7, r1
 8001472:	2203      	movs	r2, #3
 8001474:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001476:	187b      	adds	r3, r7, r1
 8001478:	2201      	movs	r2, #1
 800147a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147c:	187a      	adds	r2, r7, r1
 800147e:	2390      	movs	r3, #144	; 0x90
 8001480:	05db      	lsls	r3, r3, #23
 8001482:	0011      	movs	r1, r2
 8001484:	0018      	movs	r0, r3
 8001486:	f000 fb71 	bl	8001b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800148a:	46c0      	nop			; (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b00b      	add	sp, #44	; 0x2c
 8001490:	bd90      	pop	{r4, r7, pc}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	40013800 	.word	0x40013800
 8001498:	40021000 	.word	0x40021000

0800149c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800149c:	480d      	ldr	r0, [pc, #52]	; (80014d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800149e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014a0:	480d      	ldr	r0, [pc, #52]	; (80014d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014a2:	490e      	ldr	r1, [pc, #56]	; (80014dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <LoopForever+0xe>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014a8:	e002      	b.n	80014b0 <LoopCopyDataInit>

080014aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ae:	3304      	adds	r3, #4

080014b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014b4:	d3f9      	bcc.n	80014aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014b8:	4c0b      	ldr	r4, [pc, #44]	; (80014e8 <LoopForever+0x16>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014bc:	e001      	b.n	80014c2 <LoopFillZerobss>

080014be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014c0:	3204      	adds	r2, #4

080014c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014c4:	d3fb      	bcc.n	80014be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80014c6:	f7ff fd7f 	bl	8000fc8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80014ca:	f003 fa7d 	bl	80049c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ce:	f7ff fc59 	bl	8000d84 <main>

080014d2 <LoopForever>:

LoopForever:
    b LoopForever
 80014d2:	e7fe      	b.n	80014d2 <LoopForever>
  ldr   r0, =_estack
 80014d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014dc:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 80014e0:	08005448 	.word	0x08005448
  ldr r2, =_sbss
 80014e4:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80014e8:	20002544 	.word	0x20002544

080014ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014ec:	e7fe      	b.n	80014ec <ADC1_COMP_IRQHandler>
	...

080014f0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014f4:	4b07      	ldr	r3, [pc, #28]	; (8001514 <HAL_Init+0x24>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_Init+0x24>)
 80014fa:	2110      	movs	r1, #16
 80014fc:	430a      	orrs	r2, r1
 80014fe:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001500:	2003      	movs	r0, #3
 8001502:	f000 f809 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001506:	f7ff fcc3 	bl	8000e90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	0018      	movs	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	46c0      	nop			; (mov r8, r8)
 8001514:	40022000 	.word	0x40022000

08001518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001520:	4b14      	ldr	r3, [pc, #80]	; (8001574 <HAL_InitTick+0x5c>)
 8001522:	681c      	ldr	r4, [r3, #0]
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_InitTick+0x60>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	0019      	movs	r1, r3
 800152a:	23fa      	movs	r3, #250	; 0xfa
 800152c:	0098      	lsls	r0, r3, #2
 800152e:	f7fe fdfb 	bl	8000128 <__udivsi3>
 8001532:	0003      	movs	r3, r0
 8001534:	0019      	movs	r1, r3
 8001536:	0020      	movs	r0, r4
 8001538:	f7fe fdf6 	bl	8000128 <__udivsi3>
 800153c:	0003      	movs	r3, r0
 800153e:	0018      	movs	r0, r3
 8001540:	f000 f90b 	bl	800175a <HAL_SYSTICK_Config>
 8001544:	1e03      	subs	r3, r0, #0
 8001546:	d001      	beq.n	800154c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e00f      	b.n	800156c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b03      	cmp	r3, #3
 8001550:	d80b      	bhi.n	800156a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001552:	6879      	ldr	r1, [r7, #4]
 8001554:	2301      	movs	r3, #1
 8001556:	425b      	negs	r3, r3
 8001558:	2200      	movs	r2, #0
 800155a:	0018      	movs	r0, r3
 800155c:	f000 f8d8 	bl	8001710 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <HAL_InitTick+0x64>)
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e000      	b.n	800156c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
}
 800156c:	0018      	movs	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	b003      	add	sp, #12
 8001572:	bd90      	pop	{r4, r7, pc}
 8001574:	20000028 	.word	0x20000028
 8001578:	20000030 	.word	0x20000030
 800157c:	2000002c 	.word	0x2000002c

08001580 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001584:	4b05      	ldr	r3, [pc, #20]	; (800159c <HAL_IncTick+0x1c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	001a      	movs	r2, r3
 800158a:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <HAL_IncTick+0x20>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	18d2      	adds	r2, r2, r3
 8001590:	4b03      	ldr	r3, [pc, #12]	; (80015a0 <HAL_IncTick+0x20>)
 8001592:	601a      	str	r2, [r3, #0]
}
 8001594:	46c0      	nop			; (mov r8, r8)
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	46c0      	nop			; (mov r8, r8)
 800159c:	20000030 	.word	0x20000030
 80015a0:	20002530 	.word	0x20002530

080015a4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <HAL_GetTick+0x10>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	20002530 	.word	0x20002530

080015b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	0002      	movs	r2, r0
 80015c0:	1dfb      	adds	r3, r7, #7
 80015c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	1dfb      	adds	r3, r7, #7
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b7f      	cmp	r3, #127	; 0x7f
 80015ca:	d809      	bhi.n	80015e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	001a      	movs	r2, r3
 80015d2:	231f      	movs	r3, #31
 80015d4:	401a      	ands	r2, r3
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_EnableIRQ+0x30>)
 80015d8:	2101      	movs	r1, #1
 80015da:	4091      	lsls	r1, r2
 80015dc:	000a      	movs	r2, r1
 80015de:	601a      	str	r2, [r3, #0]
  }
}
 80015e0:	46c0      	nop			; (mov r8, r8)
 80015e2:	46bd      	mov	sp, r7
 80015e4:	b002      	add	sp, #8
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	0002      	movs	r2, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	1dfb      	adds	r3, r7, #7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b7f      	cmp	r3, #127	; 0x7f
 8001600:	d828      	bhi.n	8001654 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001602:	4a2f      	ldr	r2, [pc, #188]	; (80016c0 <__NVIC_SetPriority+0xd4>)
 8001604:	1dfb      	adds	r3, r7, #7
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	b25b      	sxtb	r3, r3
 800160a:	089b      	lsrs	r3, r3, #2
 800160c:	33c0      	adds	r3, #192	; 0xc0
 800160e:	009b      	lsls	r3, r3, #2
 8001610:	589b      	ldr	r3, [r3, r2]
 8001612:	1dfa      	adds	r2, r7, #7
 8001614:	7812      	ldrb	r2, [r2, #0]
 8001616:	0011      	movs	r1, r2
 8001618:	2203      	movs	r2, #3
 800161a:	400a      	ands	r2, r1
 800161c:	00d2      	lsls	r2, r2, #3
 800161e:	21ff      	movs	r1, #255	; 0xff
 8001620:	4091      	lsls	r1, r2
 8001622:	000a      	movs	r2, r1
 8001624:	43d2      	mvns	r2, r2
 8001626:	401a      	ands	r2, r3
 8001628:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	019b      	lsls	r3, r3, #6
 800162e:	22ff      	movs	r2, #255	; 0xff
 8001630:	401a      	ands	r2, r3
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	0018      	movs	r0, r3
 8001638:	2303      	movs	r3, #3
 800163a:	4003      	ands	r3, r0
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001640:	481f      	ldr	r0, [pc, #124]	; (80016c0 <__NVIC_SetPriority+0xd4>)
 8001642:	1dfb      	adds	r3, r7, #7
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b25b      	sxtb	r3, r3
 8001648:	089b      	lsrs	r3, r3, #2
 800164a:	430a      	orrs	r2, r1
 800164c:	33c0      	adds	r3, #192	; 0xc0
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001652:	e031      	b.n	80016b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001654:	4a1b      	ldr	r2, [pc, #108]	; (80016c4 <__NVIC_SetPriority+0xd8>)
 8001656:	1dfb      	adds	r3, r7, #7
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	0019      	movs	r1, r3
 800165c:	230f      	movs	r3, #15
 800165e:	400b      	ands	r3, r1
 8001660:	3b08      	subs	r3, #8
 8001662:	089b      	lsrs	r3, r3, #2
 8001664:	3306      	adds	r3, #6
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	18d3      	adds	r3, r2, r3
 800166a:	3304      	adds	r3, #4
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	1dfa      	adds	r2, r7, #7
 8001670:	7812      	ldrb	r2, [r2, #0]
 8001672:	0011      	movs	r1, r2
 8001674:	2203      	movs	r2, #3
 8001676:	400a      	ands	r2, r1
 8001678:	00d2      	lsls	r2, r2, #3
 800167a:	21ff      	movs	r1, #255	; 0xff
 800167c:	4091      	lsls	r1, r2
 800167e:	000a      	movs	r2, r1
 8001680:	43d2      	mvns	r2, r2
 8001682:	401a      	ands	r2, r3
 8001684:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	019b      	lsls	r3, r3, #6
 800168a:	22ff      	movs	r2, #255	; 0xff
 800168c:	401a      	ands	r2, r3
 800168e:	1dfb      	adds	r3, r7, #7
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	0018      	movs	r0, r3
 8001694:	2303      	movs	r3, #3
 8001696:	4003      	ands	r3, r0
 8001698:	00db      	lsls	r3, r3, #3
 800169a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800169c:	4809      	ldr	r0, [pc, #36]	; (80016c4 <__NVIC_SetPriority+0xd8>)
 800169e:	1dfb      	adds	r3, r7, #7
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	001c      	movs	r4, r3
 80016a4:	230f      	movs	r3, #15
 80016a6:	4023      	ands	r3, r4
 80016a8:	3b08      	subs	r3, #8
 80016aa:	089b      	lsrs	r3, r3, #2
 80016ac:	430a      	orrs	r2, r1
 80016ae:	3306      	adds	r3, #6
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	18c3      	adds	r3, r0, r3
 80016b4:	3304      	adds	r3, #4
 80016b6:	601a      	str	r2, [r3, #0]
}
 80016b8:	46c0      	nop			; (mov r8, r8)
 80016ba:	46bd      	mov	sp, r7
 80016bc:	b003      	add	sp, #12
 80016be:	bd90      	pop	{r4, r7, pc}
 80016c0:	e000e100 	.word	0xe000e100
 80016c4:	e000ed00 	.word	0xe000ed00

080016c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	1e5a      	subs	r2, r3, #1
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	045b      	lsls	r3, r3, #17
 80016d8:	429a      	cmp	r2, r3
 80016da:	d301      	bcc.n	80016e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016dc:	2301      	movs	r3, #1
 80016de:	e010      	b.n	8001702 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016e0:	4b0a      	ldr	r3, [pc, #40]	; (800170c <SysTick_Config+0x44>)
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	3a01      	subs	r2, #1
 80016e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016e8:	2301      	movs	r3, #1
 80016ea:	425b      	negs	r3, r3
 80016ec:	2103      	movs	r1, #3
 80016ee:	0018      	movs	r0, r3
 80016f0:	f7ff ff7c 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016f4:	4b05      	ldr	r3, [pc, #20]	; (800170c <SysTick_Config+0x44>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <SysTick_Config+0x44>)
 80016fc:	2207      	movs	r2, #7
 80016fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001700:	2300      	movs	r3, #0
}
 8001702:	0018      	movs	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	b002      	add	sp, #8
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	e000e010 	.word	0xe000e010

08001710 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
 800171a:	210f      	movs	r1, #15
 800171c:	187b      	adds	r3, r7, r1
 800171e:	1c02      	adds	r2, r0, #0
 8001720:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001722:	68ba      	ldr	r2, [r7, #8]
 8001724:	187b      	adds	r3, r7, r1
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b25b      	sxtb	r3, r3
 800172a:	0011      	movs	r1, r2
 800172c:	0018      	movs	r0, r3
 800172e:	f7ff ff5d 	bl	80015ec <__NVIC_SetPriority>
}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	46bd      	mov	sp, r7
 8001736:	b004      	add	sp, #16
 8001738:	bd80      	pop	{r7, pc}

0800173a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	b082      	sub	sp, #8
 800173e:	af00      	add	r7, sp, #0
 8001740:	0002      	movs	r2, r0
 8001742:	1dfb      	adds	r3, r7, #7
 8001744:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001746:	1dfb      	adds	r3, r7, #7
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	b25b      	sxtb	r3, r3
 800174c:	0018      	movs	r0, r3
 800174e:	f7ff ff33 	bl	80015b8 <__NVIC_EnableIRQ>
}
 8001752:	46c0      	nop			; (mov r8, r8)
 8001754:	46bd      	mov	sp, r7
 8001756:	b002      	add	sp, #8
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff ffaf 	bl	80016c8 <SysTick_Config>
 800176a:	0003      	movs	r3, r0
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b002      	add	sp, #8
 8001772:	bd80      	pop	{r7, pc}

08001774 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001774:	b580      	push	{r7, lr}
 8001776:	b084      	sub	sp, #16
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e036      	b.n	80017f8 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2221      	movs	r2, #33	; 0x21
 800178e:	2102      	movs	r1, #2
 8001790:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	4a18      	ldr	r2, [pc, #96]	; (8001800 <HAL_DMA_Init+0x8c>)
 800179e:	4013      	ands	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80017aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	695b      	ldr	r3, [r3, #20]
 80017bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69db      	ldr	r3, [r3, #28]
 80017c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	0018      	movs	r0, r3
 80017dc:	f000 f98c 	bl	8001af8 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2221      	movs	r2, #33	; 0x21
 80017ea:	2101      	movs	r1, #1
 80017ec:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2220      	movs	r2, #32
 80017f2:	2100      	movs	r1, #0
 80017f4:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}  
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b004      	add	sp, #16
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	ffffc00f 	.word	0xffffc00f

08001804 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
 8001810:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001812:	2317      	movs	r3, #23
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	2200      	movs	r2, #0
 8001818:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2220      	movs	r2, #32
 800181e:	5c9b      	ldrb	r3, [r3, r2]
 8001820:	2b01      	cmp	r3, #1
 8001822:	d101      	bne.n	8001828 <HAL_DMA_Start_IT+0x24>
 8001824:	2302      	movs	r3, #2
 8001826:	e04f      	b.n	80018c8 <HAL_DMA_Start_IT+0xc4>
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2220      	movs	r2, #32
 800182c:	2101      	movs	r1, #1
 800182e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2221      	movs	r2, #33	; 0x21
 8001834:	5c9b      	ldrb	r3, [r3, r2]
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d13a      	bne.n	80018b2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	2221      	movs	r2, #33	; 0x21
 8001840:	2102      	movs	r1, #2
 8001842:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	2200      	movs	r2, #0
 8001848:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2101      	movs	r1, #1
 8001856:	438a      	bics	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	68b9      	ldr	r1, [r7, #8]
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f000 f91c 	bl	8001a9e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186a:	2b00      	cmp	r3, #0
 800186c:	d008      	beq.n	8001880 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	210e      	movs	r1, #14
 800187a:	430a      	orrs	r2, r1
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	e00f      	b.n	80018a0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	210a      	movs	r1, #10
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2104      	movs	r1, #4
 800189c:	438a      	bics	r2, r1
 800189e:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2101      	movs	r1, #1
 80018ac:	430a      	orrs	r2, r1
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	e007      	b.n	80018c2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	2220      	movs	r2, #32
 80018b6:	2100      	movs	r1, #0
 80018b8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80018ba:	2317      	movs	r3, #23
 80018bc:	18fb      	adds	r3, r7, r3
 80018be:	2202      	movs	r2, #2
 80018c0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80018c2:	2317      	movs	r3, #23
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	781b      	ldrb	r3, [r3, #0]
} 
 80018c8:	0018      	movs	r0, r3
 80018ca:	46bd      	mov	sp, r7
 80018cc:	b006      	add	sp, #24
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018d8:	210f      	movs	r1, #15
 80018da:	187b      	adds	r3, r7, r1
 80018dc:	2200      	movs	r2, #0
 80018de:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2221      	movs	r2, #33	; 0x21
 80018e4:	5c9b      	ldrb	r3, [r3, r2]
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d006      	beq.n	80018fa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2204      	movs	r2, #4
 80018f0:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2201      	movs	r2, #1
 80018f6:	701a      	strb	r2, [r3, #0]
 80018f8:	e028      	b.n	800194c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	210e      	movs	r1, #14
 8001906:	438a      	bics	r2, r1
 8001908:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	438a      	bics	r2, r1
 8001918:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001922:	2101      	movs	r1, #1
 8001924:	4091      	lsls	r1, r2
 8001926:	000a      	movs	r2, r1
 8001928:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2221      	movs	r2, #33	; 0x21
 800192e:	2101      	movs	r1, #1
 8001930:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	2100      	movs	r1, #0
 8001938:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193e:	2b00      	cmp	r3, #0
 8001940:	d004      	beq.n	800194c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	0010      	movs	r0, r2
 800194a:	4798      	blx	r3
    } 
  }
  return status;
 800194c:	230f      	movs	r3, #15
 800194e:	18fb      	adds	r3, r7, r3
 8001950:	781b      	ldrb	r3, [r3, #0]
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b004      	add	sp, #16
 8001958:	bd80      	pop	{r7, pc}

0800195a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800195a:	b580      	push	{r7, lr}
 800195c:	b084      	sub	sp, #16
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	2204      	movs	r2, #4
 8001978:	409a      	lsls	r2, r3
 800197a:	0013      	movs	r3, r2
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4013      	ands	r3, r2
 8001980:	d024      	beq.n	80019cc <HAL_DMA_IRQHandler+0x72>
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	2204      	movs	r2, #4
 8001986:	4013      	ands	r3, r2
 8001988:	d020      	beq.n	80019cc <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2220      	movs	r2, #32
 8001992:	4013      	ands	r3, r2
 8001994:	d107      	bne.n	80019a6 <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2104      	movs	r1, #4
 80019a2:	438a      	bics	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ae:	2104      	movs	r1, #4
 80019b0:	4091      	lsls	r1, r2
 80019b2:	000a      	movs	r2, r1
 80019b4:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d100      	bne.n	80019c0 <HAL_DMA_IRQHandler+0x66>
 80019be:	e06a      	b.n	8001a96 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	0010      	movs	r0, r2
 80019c8:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80019ca:	e064      	b.n	8001a96 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	2202      	movs	r2, #2
 80019d2:	409a      	lsls	r2, r3
 80019d4:	0013      	movs	r3, r2
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	4013      	ands	r3, r2
 80019da:	d02b      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xda>
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2202      	movs	r2, #2
 80019e0:	4013      	ands	r3, r2
 80019e2:	d027      	beq.n	8001a34 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2220      	movs	r2, #32
 80019ec:	4013      	ands	r3, r2
 80019ee:	d10b      	bne.n	8001a08 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	210a      	movs	r1, #10
 80019fc:	438a      	bics	r2, r1
 80019fe:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2221      	movs	r2, #33	; 0x21
 8001a04:	2101      	movs	r1, #1
 8001a06:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a10:	2102      	movs	r1, #2
 8001a12:	4091      	lsls	r1, r2
 8001a14:	000a      	movs	r2, r1
 8001a16:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2220      	movs	r2, #32
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d036      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	0010      	movs	r0, r2
 8001a30:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001a32:	e030      	b.n	8001a96 <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	2208      	movs	r2, #8
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4013      	ands	r3, r2
 8001a42:	d028      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x13c>
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2208      	movs	r2, #8
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d024      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	210e      	movs	r1, #14
 8001a58:	438a      	bics	r2, r1
 8001a5a:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a64:	2101      	movs	r1, #1
 8001a66:	4091      	lsls	r1, r2
 8001a68:	000a      	movs	r2, r1
 8001a6a:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2221      	movs	r2, #33	; 0x21
 8001a76:	2101      	movs	r1, #1
 8001a78:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	2100      	movs	r1, #0
 8001a80:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d005      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	0010      	movs	r0, r2
 8001a92:	4798      	blx	r3
    }
   }
}  
 8001a94:	e7ff      	b.n	8001a96 <HAL_DMA_IRQHandler+0x13c>
 8001a96:	46c0      	nop			; (mov r8, r8)
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	b004      	add	sp, #16
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	60f8      	str	r0, [r7, #12]
 8001aa6:	60b9      	str	r1, [r7, #8]
 8001aa8:	607a      	str	r2, [r7, #4]
 8001aaa:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ab4:	2101      	movs	r1, #1
 8001ab6:	4091      	lsls	r1, r2
 8001ab8:	000a      	movs	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b10      	cmp	r3, #16
 8001aca:	d108      	bne.n	8001ade <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68ba      	ldr	r2, [r7, #8]
 8001ada:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001adc:	e007      	b.n	8001aee <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68ba      	ldr	r2, [r7, #8]
 8001ae4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	60da      	str	r2, [r3, #12]
}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	46bd      	mov	sp, r7
 8001af2:	b004      	add	sp, #16
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	001a      	movs	r2, r3
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <DMA_CalcBaseAndBitshift+0x60>)
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d810      	bhi.n	8001b2e <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a12      	ldr	r2, [pc, #72]	; (8001b5c <DMA_CalcBaseAndBitshift+0x64>)
 8001b12:	4694      	mov	ip, r2
 8001b14:	4463      	add	r3, ip
 8001b16:	2114      	movs	r1, #20
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7fe fb05 	bl	8000128 <__udivsi3>
 8001b1e:	0003      	movs	r3, r0
 8001b20:	009a      	lsls	r2, r3, #2
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4a0d      	ldr	r2, [pc, #52]	; (8001b60 <DMA_CalcBaseAndBitshift+0x68>)
 8001b2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001b2c:	e00f      	b.n	8001b4e <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a0c      	ldr	r2, [pc, #48]	; (8001b64 <DMA_CalcBaseAndBitshift+0x6c>)
 8001b34:	4694      	mov	ip, r2
 8001b36:	4463      	add	r3, ip
 8001b38:	2114      	movs	r1, #20
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	f7fe faf4 	bl	8000128 <__udivsi3>
 8001b40:	0003      	movs	r3, r0
 8001b42:	009a      	lsls	r2, r3, #2
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <DMA_CalcBaseAndBitshift+0x70>)
 8001b4c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b002      	add	sp, #8
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	46c0      	nop			; (mov r8, r8)
 8001b58:	40020407 	.word	0x40020407
 8001b5c:	bffdfff8 	.word	0xbffdfff8
 8001b60:	40020000 	.word	0x40020000
 8001b64:	bffdfbf8 	.word	0xbffdfbf8
 8001b68:	40020400 	.word	0x40020400

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7a:	e155      	b.n	8001e28 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2101      	movs	r1, #1
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4091      	lsls	r1, r2
 8001b86:	000a      	movs	r2, r1
 8001b88:	4013      	ands	r3, r2
 8001b8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d100      	bne.n	8001b94 <HAL_GPIO_Init+0x28>
 8001b92:	e146      	b.n	8001e22 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2203      	movs	r2, #3
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d005      	beq.n	8001bac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2203      	movs	r2, #3
 8001ba6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d130      	bne.n	8001c0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	0013      	movs	r3, r2
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	68da      	ldr	r2, [r3, #12]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	409a      	lsls	r2, r3
 8001bce:	0013      	movs	r3, r2
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be2:	2201      	movs	r2, #1
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
 8001be8:	0013      	movs	r3, r2
 8001bea:	43da      	mvns	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	091b      	lsrs	r3, r3, #4
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	0013      	movs	r3, r2
 8001c02:	693a      	ldr	r2, [r7, #16]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2203      	movs	r2, #3
 8001c14:	4013      	ands	r3, r2
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d017      	beq.n	8001c4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	68db      	ldr	r3, [r3, #12]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	409a      	lsls	r2, r3
 8001c28:	0013      	movs	r3, r2
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	0013      	movs	r3, r2
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2203      	movs	r2, #3
 8001c50:	4013      	ands	r3, r2
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d123      	bne.n	8001c9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	08da      	lsrs	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	3208      	adds	r2, #8
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	58d3      	ldr	r3, [r2, r3]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2207      	movs	r2, #7
 8001c68:	4013      	ands	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	0013      	movs	r3, r2
 8001c72:	43da      	mvns	r2, r3
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	2107      	movs	r1, #7
 8001c82:	400b      	ands	r3, r1
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	409a      	lsls	r2, r3
 8001c88:	0013      	movs	r3, r2
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	08da      	lsrs	r2, r3, #3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3208      	adds	r2, #8
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	6939      	ldr	r1, [r7, #16]
 8001c9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	2203      	movs	r2, #3
 8001caa:	409a      	lsls	r2, r3
 8001cac:	0013      	movs	r3, r2
 8001cae:	43da      	mvns	r2, r3
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	2203      	movs	r2, #3
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	409a      	lsls	r2, r3
 8001cc4:	0013      	movs	r3, r2
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	23c0      	movs	r3, #192	; 0xc0
 8001cd8:	029b      	lsls	r3, r3, #10
 8001cda:	4013      	ands	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <HAL_GPIO_Init+0x174>
 8001cde:	e0a0      	b.n	8001e22 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce0:	4b57      	ldr	r3, [pc, #348]	; (8001e40 <HAL_GPIO_Init+0x2d4>)
 8001ce2:	699a      	ldr	r2, [r3, #24]
 8001ce4:	4b56      	ldr	r3, [pc, #344]	; (8001e40 <HAL_GPIO_Init+0x2d4>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	619a      	str	r2, [r3, #24]
 8001cec:	4b54      	ldr	r3, [pc, #336]	; (8001e40 <HAL_GPIO_Init+0x2d4>)
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cf8:	4a52      	ldr	r2, [pc, #328]	; (8001e44 <HAL_GPIO_Init+0x2d8>)
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	089b      	lsrs	r3, r3, #2
 8001cfe:	3302      	adds	r3, #2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	589b      	ldr	r3, [r3, r2]
 8001d04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	409a      	lsls	r2, r3
 8001d12:	0013      	movs	r3, r2
 8001d14:	43da      	mvns	r2, r3
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	2390      	movs	r3, #144	; 0x90
 8001d20:	05db      	lsls	r3, r3, #23
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d019      	beq.n	8001d5a <HAL_GPIO_Init+0x1ee>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a47      	ldr	r2, [pc, #284]	; (8001e48 <HAL_GPIO_Init+0x2dc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d013      	beq.n	8001d56 <HAL_GPIO_Init+0x1ea>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a46      	ldr	r2, [pc, #280]	; (8001e4c <HAL_GPIO_Init+0x2e0>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d00d      	beq.n	8001d52 <HAL_GPIO_Init+0x1e6>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a45      	ldr	r2, [pc, #276]	; (8001e50 <HAL_GPIO_Init+0x2e4>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d007      	beq.n	8001d4e <HAL_GPIO_Init+0x1e2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a44      	ldr	r2, [pc, #272]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d101      	bne.n	8001d4a <HAL_GPIO_Init+0x1de>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e008      	b.n	8001d5c <HAL_GPIO_Init+0x1f0>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x1f0>
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e004      	b.n	8001d5c <HAL_GPIO_Init+0x1f0>
 8001d52:	2302      	movs	r3, #2
 8001d54:	e002      	b.n	8001d5c <HAL_GPIO_Init+0x1f0>
 8001d56:	2301      	movs	r3, #1
 8001d58:	e000      	b.n	8001d5c <HAL_GPIO_Init+0x1f0>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	2103      	movs	r1, #3
 8001d60:	400a      	ands	r2, r1
 8001d62:	0092      	lsls	r2, r2, #2
 8001d64:	4093      	lsls	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d6c:	4935      	ldr	r1, [pc, #212]	; (8001e44 <HAL_GPIO_Init+0x2d8>)
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	089b      	lsrs	r3, r3, #2
 8001d72:	3302      	adds	r3, #2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d7a:	4b37      	ldr	r3, [pc, #220]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	43da      	mvns	r2, r3
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	025b      	lsls	r3, r3, #9
 8001d92:	4013      	ands	r3, r2
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001da4:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	43da      	mvns	r2, r3
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	4013      	ands	r3, r2
 8001db2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	029b      	lsls	r3, r3, #10
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dc8:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	43da      	mvns	r2, r3
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	035b      	lsls	r3, r3, #13
 8001de6:	4013      	ands	r3, r2
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001df2:	4b19      	ldr	r3, [pc, #100]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001df8:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43da      	mvns	r2, r3
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4013      	ands	r3, r2
 8001e06:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	039b      	lsls	r3, r3, #14
 8001e10:	4013      	ands	r3, r2
 8001e12:	d003      	beq.n	8001e1c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e1c:	4b0e      	ldr	r3, [pc, #56]	; (8001e58 <HAL_GPIO_Init+0x2ec>)
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	3301      	adds	r3, #1
 8001e26:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	40da      	lsrs	r2, r3
 8001e30:	1e13      	subs	r3, r2, #0
 8001e32:	d000      	beq.n	8001e36 <HAL_GPIO_Init+0x2ca>
 8001e34:	e6a2      	b.n	8001b7c <HAL_GPIO_Init+0x10>
  } 
}
 8001e36:	46c0      	nop			; (mov r8, r8)
 8001e38:	46c0      	nop			; (mov r8, r8)
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b006      	add	sp, #24
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	40010000 	.word	0x40010000
 8001e48:	48000400 	.word	0x48000400
 8001e4c:	48000800 	.word	0x48000800
 8001e50:	48000c00 	.word	0x48000c00
 8001e54:	48001000 	.word	0x48001000
 8001e58:	40010400 	.word	0x40010400

08001e5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	0008      	movs	r0, r1
 8001e66:	0011      	movs	r1, r2
 8001e68:	1cbb      	adds	r3, r7, #2
 8001e6a:	1c02      	adds	r2, r0, #0
 8001e6c:	801a      	strh	r2, [r3, #0]
 8001e6e:	1c7b      	adds	r3, r7, #1
 8001e70:	1c0a      	adds	r2, r1, #0
 8001e72:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e74:	1c7b      	adds	r3, r7, #1
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e7c:	1cbb      	adds	r3, r7, #2
 8001e7e:	881a      	ldrh	r2, [r3, #0]
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e84:	e003      	b.n	8001e8e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e86:	1cbb      	adds	r3, r7, #2
 8001e88:	881a      	ldrh	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	46bd      	mov	sp, r7
 8001e92:	b002      	add	sp, #8
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d102      	bne.n	8001eac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	f000 fb76 	bl	8002598 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d100      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x20>
 8001eb6:	e08e      	b.n	8001fd6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eb8:	4bc5      	ldr	r3, [pc, #788]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	220c      	movs	r2, #12
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b04      	cmp	r3, #4
 8001ec2:	d00e      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ec4:	4bc2      	ldr	r3, [pc, #776]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	220c      	movs	r2, #12
 8001eca:	4013      	ands	r3, r2
 8001ecc:	2b08      	cmp	r3, #8
 8001ece:	d117      	bne.n	8001f00 <HAL_RCC_OscConfig+0x68>
 8001ed0:	4bbf      	ldr	r3, [pc, #764]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	23c0      	movs	r3, #192	; 0xc0
 8001ed6:	025b      	lsls	r3, r3, #9
 8001ed8:	401a      	ands	r2, r3
 8001eda:	2380      	movs	r3, #128	; 0x80
 8001edc:	025b      	lsls	r3, r3, #9
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d10e      	bne.n	8001f00 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee2:	4bbb      	ldr	r3, [pc, #748]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	2380      	movs	r3, #128	; 0x80
 8001ee8:	029b      	lsls	r3, r3, #10
 8001eea:	4013      	ands	r3, r2
 8001eec:	d100      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x58>
 8001eee:	e071      	b.n	8001fd4 <HAL_RCC_OscConfig+0x13c>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d000      	beq.n	8001efa <HAL_RCC_OscConfig+0x62>
 8001ef8:	e06c      	b.n	8001fd4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	f000 fb4c 	bl	8002598 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d107      	bne.n	8001f18 <HAL_RCC_OscConfig+0x80>
 8001f08:	4bb1      	ldr	r3, [pc, #708]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4bb0      	ldr	r3, [pc, #704]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f0e:	2180      	movs	r1, #128	; 0x80
 8001f10:	0249      	lsls	r1, r1, #9
 8001f12:	430a      	orrs	r2, r1
 8001f14:	601a      	str	r2, [r3, #0]
 8001f16:	e02f      	b.n	8001f78 <HAL_RCC_OscConfig+0xe0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10c      	bne.n	8001f3a <HAL_RCC_OscConfig+0xa2>
 8001f20:	4bab      	ldr	r3, [pc, #684]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	4baa      	ldr	r3, [pc, #680]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f26:	49ab      	ldr	r1, [pc, #684]	; (80021d4 <HAL_RCC_OscConfig+0x33c>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	4ba8      	ldr	r3, [pc, #672]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4ba7      	ldr	r3, [pc, #668]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f32:	49a9      	ldr	r1, [pc, #676]	; (80021d8 <HAL_RCC_OscConfig+0x340>)
 8001f34:	400a      	ands	r2, r1
 8001f36:	601a      	str	r2, [r3, #0]
 8001f38:	e01e      	b.n	8001f78 <HAL_RCC_OscConfig+0xe0>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b05      	cmp	r3, #5
 8001f40:	d10e      	bne.n	8001f60 <HAL_RCC_OscConfig+0xc8>
 8001f42:	4ba3      	ldr	r3, [pc, #652]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	4ba2      	ldr	r3, [pc, #648]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f48:	2180      	movs	r1, #128	; 0x80
 8001f4a:	02c9      	lsls	r1, r1, #11
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	4b9f      	ldr	r3, [pc, #636]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b9e      	ldr	r3, [pc, #632]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f56:	2180      	movs	r1, #128	; 0x80
 8001f58:	0249      	lsls	r1, r1, #9
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	e00b      	b.n	8001f78 <HAL_RCC_OscConfig+0xe0>
 8001f60:	4b9b      	ldr	r3, [pc, #620]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b9a      	ldr	r3, [pc, #616]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f66:	499b      	ldr	r1, [pc, #620]	; (80021d4 <HAL_RCC_OscConfig+0x33c>)
 8001f68:	400a      	ands	r2, r1
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	4b98      	ldr	r3, [pc, #608]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	4b97      	ldr	r3, [pc, #604]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f72:	4999      	ldr	r1, [pc, #612]	; (80021d8 <HAL_RCC_OscConfig+0x340>)
 8001f74:	400a      	ands	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d014      	beq.n	8001faa <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7ff fb10 	bl	80015a4 <HAL_GetTick>
 8001f84:	0003      	movs	r3, r0
 8001f86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8a:	f7ff fb0b 	bl	80015a4 <HAL_GetTick>
 8001f8e:	0002      	movs	r2, r0
 8001f90:	69bb      	ldr	r3, [r7, #24]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b64      	cmp	r3, #100	; 0x64
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e2fd      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f9c:	4b8c      	ldr	r3, [pc, #560]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	029b      	lsls	r3, r3, #10
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0xf2>
 8001fa8:	e015      	b.n	8001fd6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff fafb 	bl	80015a4 <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fb4:	f7ff faf6 	bl	80015a4 <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b64      	cmp	r3, #100	; 0x64
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e2e8      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fc6:	4b82      	ldr	r3, [pc, #520]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	2380      	movs	r3, #128	; 0x80
 8001fcc:	029b      	lsls	r3, r3, #10
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x11c>
 8001fd2:	e000      	b.n	8001fd6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fd4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	d100      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x14a>
 8001fe0:	e06c      	b.n	80020bc <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fe2:	4b7b      	ldr	r3, [pc, #492]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	220c      	movs	r2, #12
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d00e      	beq.n	800200a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fec:	4b78      	ldr	r3, [pc, #480]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	220c      	movs	r2, #12
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	2b08      	cmp	r3, #8
 8001ff6:	d11f      	bne.n	8002038 <HAL_RCC_OscConfig+0x1a0>
 8001ff8:	4b75      	ldr	r3, [pc, #468]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	23c0      	movs	r3, #192	; 0xc0
 8001ffe:	025b      	lsls	r3, r3, #9
 8002000:	401a      	ands	r2, r3
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	021b      	lsls	r3, r3, #8
 8002006:	429a      	cmp	r2, r3
 8002008:	d116      	bne.n	8002038 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200a:	4b71      	ldr	r3, [pc, #452]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2202      	movs	r2, #2
 8002010:	4013      	ands	r3, r2
 8002012:	d005      	beq.n	8002020 <HAL_RCC_OscConfig+0x188>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d001      	beq.n	8002020 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e2bb      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002020:	4b6b      	ldr	r3, [pc, #428]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	22f8      	movs	r2, #248	; 0xf8
 8002026:	4393      	bics	r3, r2
 8002028:	0019      	movs	r1, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	00da      	lsls	r2, r3, #3
 8002030:	4b67      	ldr	r3, [pc, #412]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002036:	e041      	b.n	80020bc <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d024      	beq.n	800208a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002040:	4b63      	ldr	r3, [pc, #396]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b62      	ldr	r3, [pc, #392]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002046:	2101      	movs	r1, #1
 8002048:	430a      	orrs	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff faaa 	bl	80015a4 <HAL_GetTick>
 8002050:	0003      	movs	r3, r0
 8002052:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002056:	f7ff faa5 	bl	80015a4 <HAL_GetTick>
 800205a:	0002      	movs	r2, r0
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e297      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002068:	4b59      	ldr	r3, [pc, #356]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2202      	movs	r2, #2
 800206e:	4013      	ands	r3, r2
 8002070:	d0f1      	beq.n	8002056 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002072:	4b57      	ldr	r3, [pc, #348]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	22f8      	movs	r2, #248	; 0xf8
 8002078:	4393      	bics	r3, r2
 800207a:	0019      	movs	r1, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	00da      	lsls	r2, r3, #3
 8002082:	4b53      	ldr	r3, [pc, #332]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002084:	430a      	orrs	r2, r1
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	e018      	b.n	80020bc <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800208a:	4b51      	ldr	r3, [pc, #324]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	4b50      	ldr	r3, [pc, #320]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002090:	2101      	movs	r1, #1
 8002092:	438a      	bics	r2, r1
 8002094:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002096:	f7ff fa85 	bl	80015a4 <HAL_GetTick>
 800209a:	0003      	movs	r3, r0
 800209c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	e008      	b.n	80020b2 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a0:	f7ff fa80 	bl	80015a4 <HAL_GetTick>
 80020a4:	0002      	movs	r2, r0
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e272      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020b2:	4b47      	ldr	r3, [pc, #284]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2202      	movs	r2, #2
 80020b8:	4013      	ands	r3, r2
 80020ba:	d1f1      	bne.n	80020a0 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2208      	movs	r2, #8
 80020c2:	4013      	ands	r3, r2
 80020c4:	d036      	beq.n	8002134 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69db      	ldr	r3, [r3, #28]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d019      	beq.n	8002102 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ce:	4b40      	ldr	r3, [pc, #256]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 80020d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020d2:	4b3f      	ldr	r3, [pc, #252]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7ff fa63 	bl	80015a4 <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020e4:	f7ff fa5e 	bl	80015a4 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e250      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020f6:	4b36      	ldr	r3, [pc, #216]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fa:	2202      	movs	r2, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	d0f1      	beq.n	80020e4 <HAL_RCC_OscConfig+0x24c>
 8002100:	e018      	b.n	8002134 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002102:	4b33      	ldr	r3, [pc, #204]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002108:	2101      	movs	r1, #1
 800210a:	438a      	bics	r2, r1
 800210c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800210e:	f7ff fa49 	bl	80015a4 <HAL_GetTick>
 8002112:	0003      	movs	r3, r0
 8002114:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002116:	e008      	b.n	800212a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002118:	f7ff fa44 	bl	80015a4 <HAL_GetTick>
 800211c:	0002      	movs	r2, r0
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	2b02      	cmp	r3, #2
 8002124:	d901      	bls.n	800212a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8002126:	2303      	movs	r3, #3
 8002128:	e236      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800212a:	4b29      	ldr	r3, [pc, #164]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	2202      	movs	r2, #2
 8002130:	4013      	ands	r3, r2
 8002132:	d1f1      	bne.n	8002118 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2204      	movs	r2, #4
 800213a:	4013      	ands	r3, r2
 800213c:	d100      	bne.n	8002140 <HAL_RCC_OscConfig+0x2a8>
 800213e:	e0b5      	b.n	80022ac <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002140:	201f      	movs	r0, #31
 8002142:	183b      	adds	r3, r7, r0
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002148:	4b21      	ldr	r3, [pc, #132]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 800214a:	69da      	ldr	r2, [r3, #28]
 800214c:	2380      	movs	r3, #128	; 0x80
 800214e:	055b      	lsls	r3, r3, #21
 8002150:	4013      	ands	r3, r2
 8002152:	d110      	bne.n	8002176 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002154:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 800215a:	2180      	movs	r1, #128	; 0x80
 800215c:	0549      	lsls	r1, r1, #21
 800215e:	430a      	orrs	r2, r1
 8002160:	61da      	str	r2, [r3, #28]
 8002162:	4b1b      	ldr	r3, [pc, #108]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 8002164:	69da      	ldr	r2, [r3, #28]
 8002166:	2380      	movs	r3, #128	; 0x80
 8002168:	055b      	lsls	r3, r3, #21
 800216a:	4013      	ands	r3, r2
 800216c:	60fb      	str	r3, [r7, #12]
 800216e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002170:	183b      	adds	r3, r7, r0
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002176:	4b19      	ldr	r3, [pc, #100]	; (80021dc <HAL_RCC_OscConfig+0x344>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	2380      	movs	r3, #128	; 0x80
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4013      	ands	r3, r2
 8002180:	d11a      	bne.n	80021b8 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_RCC_OscConfig+0x344>)
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	4b15      	ldr	r3, [pc, #84]	; (80021dc <HAL_RCC_OscConfig+0x344>)
 8002188:	2180      	movs	r1, #128	; 0x80
 800218a:	0049      	lsls	r1, r1, #1
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002190:	f7ff fa08 	bl	80015a4 <HAL_GetTick>
 8002194:	0003      	movs	r3, r0
 8002196:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7ff fa03 	bl	80015a4 <HAL_GetTick>
 800219e:	0002      	movs	r2, r0
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b64      	cmp	r3, #100	; 0x64
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e1f5      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <HAL_RCC_OscConfig+0x344>)
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	2380      	movs	r3, #128	; 0x80
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	4013      	ands	r3, r2
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d10f      	bne.n	80021e0 <HAL_RCC_OscConfig+0x348>
 80021c0:	4b03      	ldr	r3, [pc, #12]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 80021c2:	6a1a      	ldr	r2, [r3, #32]
 80021c4:	4b02      	ldr	r3, [pc, #8]	; (80021d0 <HAL_RCC_OscConfig+0x338>)
 80021c6:	2101      	movs	r1, #1
 80021c8:	430a      	orrs	r2, r1
 80021ca:	621a      	str	r2, [r3, #32]
 80021cc:	e036      	b.n	800223c <HAL_RCC_OscConfig+0x3a4>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	40021000 	.word	0x40021000
 80021d4:	fffeffff 	.word	0xfffeffff
 80021d8:	fffbffff 	.word	0xfffbffff
 80021dc:	40007000 	.word	0x40007000
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d10c      	bne.n	8002202 <HAL_RCC_OscConfig+0x36a>
 80021e8:	4bca      	ldr	r3, [pc, #808]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80021ea:	6a1a      	ldr	r2, [r3, #32]
 80021ec:	4bc9      	ldr	r3, [pc, #804]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80021ee:	2101      	movs	r1, #1
 80021f0:	438a      	bics	r2, r1
 80021f2:	621a      	str	r2, [r3, #32]
 80021f4:	4bc7      	ldr	r3, [pc, #796]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80021f6:	6a1a      	ldr	r2, [r3, #32]
 80021f8:	4bc6      	ldr	r3, [pc, #792]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80021fa:	2104      	movs	r1, #4
 80021fc:	438a      	bics	r2, r1
 80021fe:	621a      	str	r2, [r3, #32]
 8002200:	e01c      	b.n	800223c <HAL_RCC_OscConfig+0x3a4>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2b05      	cmp	r3, #5
 8002208:	d10c      	bne.n	8002224 <HAL_RCC_OscConfig+0x38c>
 800220a:	4bc2      	ldr	r3, [pc, #776]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800220c:	6a1a      	ldr	r2, [r3, #32]
 800220e:	4bc1      	ldr	r3, [pc, #772]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002210:	2104      	movs	r1, #4
 8002212:	430a      	orrs	r2, r1
 8002214:	621a      	str	r2, [r3, #32]
 8002216:	4bbf      	ldr	r3, [pc, #764]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002218:	6a1a      	ldr	r2, [r3, #32]
 800221a:	4bbe      	ldr	r3, [pc, #760]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800221c:	2101      	movs	r1, #1
 800221e:	430a      	orrs	r2, r1
 8002220:	621a      	str	r2, [r3, #32]
 8002222:	e00b      	b.n	800223c <HAL_RCC_OscConfig+0x3a4>
 8002224:	4bbb      	ldr	r3, [pc, #748]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002226:	6a1a      	ldr	r2, [r3, #32]
 8002228:	4bba      	ldr	r3, [pc, #744]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800222a:	2101      	movs	r1, #1
 800222c:	438a      	bics	r2, r1
 800222e:	621a      	str	r2, [r3, #32]
 8002230:	4bb8      	ldr	r3, [pc, #736]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002232:	6a1a      	ldr	r2, [r3, #32]
 8002234:	4bb7      	ldr	r3, [pc, #732]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002236:	2104      	movs	r1, #4
 8002238:	438a      	bics	r2, r1
 800223a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d014      	beq.n	800226e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002244:	f7ff f9ae 	bl	80015a4 <HAL_GetTick>
 8002248:	0003      	movs	r3, r0
 800224a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224c:	e009      	b.n	8002262 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800224e:	f7ff f9a9 	bl	80015a4 <HAL_GetTick>
 8002252:	0002      	movs	r2, r0
 8002254:	69bb      	ldr	r3, [r7, #24]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	4aaf      	ldr	r2, [pc, #700]	; (8002518 <HAL_RCC_OscConfig+0x680>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e19a      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002262:	4bac      	ldr	r3, [pc, #688]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	2202      	movs	r2, #2
 8002268:	4013      	ands	r3, r2
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x3b6>
 800226c:	e013      	b.n	8002296 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226e:	f7ff f999 	bl	80015a4 <HAL_GetTick>
 8002272:	0003      	movs	r3, r0
 8002274:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002276:	e009      	b.n	800228c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002278:	f7ff f994 	bl	80015a4 <HAL_GetTick>
 800227c:	0002      	movs	r2, r0
 800227e:	69bb      	ldr	r3, [r7, #24]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	4aa5      	ldr	r2, [pc, #660]	; (8002518 <HAL_RCC_OscConfig+0x680>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e185      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800228c:	4ba1      	ldr	r3, [pc, #644]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800228e:	6a1b      	ldr	r3, [r3, #32]
 8002290:	2202      	movs	r2, #2
 8002292:	4013      	ands	r3, r2
 8002294:	d1f0      	bne.n	8002278 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002296:	231f      	movs	r3, #31
 8002298:	18fb      	adds	r3, r7, r3
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d105      	bne.n	80022ac <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022a0:	4b9c      	ldr	r3, [pc, #624]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022a2:	69da      	ldr	r2, [r3, #28]
 80022a4:	4b9b      	ldr	r3, [pc, #620]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022a6:	499d      	ldr	r1, [pc, #628]	; (800251c <HAL_RCC_OscConfig+0x684>)
 80022a8:	400a      	ands	r2, r1
 80022aa:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2210      	movs	r2, #16
 80022b2:	4013      	ands	r3, r2
 80022b4:	d063      	beq.n	800237e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	695b      	ldr	r3, [r3, #20]
 80022ba:	2b01      	cmp	r3, #1
 80022bc:	d12a      	bne.n	8002314 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022be:	4b95      	ldr	r3, [pc, #596]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022c2:	4b94      	ldr	r3, [pc, #592]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022c4:	2104      	movs	r1, #4
 80022c6:	430a      	orrs	r2, r1
 80022c8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80022ca:	4b92      	ldr	r3, [pc, #584]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022ce:	4b91      	ldr	r3, [pc, #580]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022d0:	2101      	movs	r1, #1
 80022d2:	430a      	orrs	r2, r1
 80022d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022d6:	f7ff f965 	bl	80015a4 <HAL_GetTick>
 80022da:	0003      	movs	r3, r0
 80022dc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022e0:	f7ff f960 	bl	80015a4 <HAL_GetTick>
 80022e4:	0002      	movs	r2, r0
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e152      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022f2:	4b88      	ldr	r3, [pc, #544]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f6:	2202      	movs	r2, #2
 80022f8:	4013      	ands	r3, r2
 80022fa:	d0f1      	beq.n	80022e0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022fc:	4b85      	ldr	r3, [pc, #532]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80022fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002300:	22f8      	movs	r2, #248	; 0xf8
 8002302:	4393      	bics	r3, r2
 8002304:	0019      	movs	r1, r3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	699b      	ldr	r3, [r3, #24]
 800230a:	00da      	lsls	r2, r3, #3
 800230c:	4b81      	ldr	r3, [pc, #516]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800230e:	430a      	orrs	r2, r1
 8002310:	635a      	str	r2, [r3, #52]	; 0x34
 8002312:	e034      	b.n	800237e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	695b      	ldr	r3, [r3, #20]
 8002318:	3305      	adds	r3, #5
 800231a:	d111      	bne.n	8002340 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800231c:	4b7d      	ldr	r3, [pc, #500]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800231e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002320:	4b7c      	ldr	r3, [pc, #496]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002322:	2104      	movs	r1, #4
 8002324:	438a      	bics	r2, r1
 8002326:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002328:	4b7a      	ldr	r3, [pc, #488]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800232a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800232c:	22f8      	movs	r2, #248	; 0xf8
 800232e:	4393      	bics	r3, r2
 8002330:	0019      	movs	r1, r3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	00da      	lsls	r2, r3, #3
 8002338:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800233a:	430a      	orrs	r2, r1
 800233c:	635a      	str	r2, [r3, #52]	; 0x34
 800233e:	e01e      	b.n	800237e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002340:	4b74      	ldr	r3, [pc, #464]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002344:	4b73      	ldr	r3, [pc, #460]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002346:	2104      	movs	r1, #4
 8002348:	430a      	orrs	r2, r1
 800234a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800234c:	4b71      	ldr	r3, [pc, #452]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800234e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002350:	4b70      	ldr	r3, [pc, #448]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002352:	2101      	movs	r1, #1
 8002354:	438a      	bics	r2, r1
 8002356:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002358:	f7ff f924 	bl	80015a4 <HAL_GetTick>
 800235c:	0003      	movs	r3, r0
 800235e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002360:	e008      	b.n	8002374 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002362:	f7ff f91f 	bl	80015a4 <HAL_GetTick>
 8002366:	0002      	movs	r2, r0
 8002368:	69bb      	ldr	r3, [r7, #24]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d901      	bls.n	8002374 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e111      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002374:	4b67      	ldr	r3, [pc, #412]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002376:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002378:	2202      	movs	r2, #2
 800237a:	4013      	ands	r3, r2
 800237c:	d1f1      	bne.n	8002362 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2220      	movs	r2, #32
 8002384:	4013      	ands	r3, r2
 8002386:	d05c      	beq.n	8002442 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002388:	4b62      	ldr	r3, [pc, #392]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	220c      	movs	r2, #12
 800238e:	4013      	ands	r3, r2
 8002390:	2b0c      	cmp	r3, #12
 8002392:	d00e      	beq.n	80023b2 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002394:	4b5f      	ldr	r3, [pc, #380]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	220c      	movs	r2, #12
 800239a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800239c:	2b08      	cmp	r3, #8
 800239e:	d114      	bne.n	80023ca <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80023a0:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80023a2:	685a      	ldr	r2, [r3, #4]
 80023a4:	23c0      	movs	r3, #192	; 0xc0
 80023a6:	025b      	lsls	r3, r3, #9
 80023a8:	401a      	ands	r2, r3
 80023aa:	23c0      	movs	r3, #192	; 0xc0
 80023ac:	025b      	lsls	r3, r3, #9
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d10b      	bne.n	80023ca <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80023b2:	4b58      	ldr	r3, [pc, #352]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80023b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023b6:	2380      	movs	r3, #128	; 0x80
 80023b8:	025b      	lsls	r3, r3, #9
 80023ba:	4013      	ands	r3, r2
 80023bc:	d040      	beq.n	8002440 <HAL_RCC_OscConfig+0x5a8>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d03c      	beq.n	8002440 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e0e6      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6a1b      	ldr	r3, [r3, #32]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d01b      	beq.n	800240a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80023d2:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80023d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023d6:	4b4f      	ldr	r3, [pc, #316]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80023d8:	2180      	movs	r1, #128	; 0x80
 80023da:	0249      	lsls	r1, r1, #9
 80023dc:	430a      	orrs	r2, r1
 80023de:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e0:	f7ff f8e0 	bl	80015a4 <HAL_GetTick>
 80023e4:	0003      	movs	r3, r0
 80023e6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023e8:	e008      	b.n	80023fc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80023ea:	f7ff f8db 	bl	80015a4 <HAL_GetTick>
 80023ee:	0002      	movs	r2, r0
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d901      	bls.n	80023fc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e0cd      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80023fc:	4b45      	ldr	r3, [pc, #276]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80023fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002400:	2380      	movs	r3, #128	; 0x80
 8002402:	025b      	lsls	r3, r3, #9
 8002404:	4013      	ands	r3, r2
 8002406:	d0f0      	beq.n	80023ea <HAL_RCC_OscConfig+0x552>
 8002408:	e01b      	b.n	8002442 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800240a:	4b42      	ldr	r3, [pc, #264]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800240c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800240e:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002410:	4943      	ldr	r1, [pc, #268]	; (8002520 <HAL_RCC_OscConfig+0x688>)
 8002412:	400a      	ands	r2, r1
 8002414:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002416:	f7ff f8c5 	bl	80015a4 <HAL_GetTick>
 800241a:	0003      	movs	r3, r0
 800241c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002420:	f7ff f8c0 	bl	80015a4 <HAL_GetTick>
 8002424:	0002      	movs	r2, r0
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e0b2      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002432:	4b38      	ldr	r3, [pc, #224]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002434:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002436:	2380      	movs	r3, #128	; 0x80
 8002438:	025b      	lsls	r3, r3, #9
 800243a:	4013      	ands	r3, r2
 800243c:	d1f0      	bne.n	8002420 <HAL_RCC_OscConfig+0x588>
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002440:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	2b00      	cmp	r3, #0
 8002448:	d100      	bne.n	800244c <HAL_RCC_OscConfig+0x5b4>
 800244a:	e0a4      	b.n	8002596 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800244c:	4b31      	ldr	r3, [pc, #196]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	220c      	movs	r2, #12
 8002452:	4013      	ands	r3, r2
 8002454:	2b08      	cmp	r3, #8
 8002456:	d100      	bne.n	800245a <HAL_RCC_OscConfig+0x5c2>
 8002458:	e078      	b.n	800254c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	2b02      	cmp	r3, #2
 8002460:	d14c      	bne.n	80024fc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002462:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	4b2b      	ldr	r3, [pc, #172]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002468:	492e      	ldr	r1, [pc, #184]	; (8002524 <HAL_RCC_OscConfig+0x68c>)
 800246a:	400a      	ands	r2, r1
 800246c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7ff f899 	bl	80015a4 <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002478:	f7ff f894 	bl	80015a4 <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e086      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248a:	4b22      	ldr	r3, [pc, #136]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	049b      	lsls	r3, r3, #18
 8002492:	4013      	ands	r3, r2
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002496:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800249a:	220f      	movs	r2, #15
 800249c:	4393      	bics	r3, r2
 800249e:	0019      	movs	r1, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	4a1e      	ldr	r2, [pc, #120]	; (8002528 <HAL_RCC_OscConfig+0x690>)
 80024b0:	4013      	ands	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024bc:	431a      	orrs	r2, r3
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024c0:	430a      	orrs	r2, r1
 80024c2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4b12      	ldr	r3, [pc, #72]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024ca:	2180      	movs	r1, #128	; 0x80
 80024cc:	0449      	lsls	r1, r1, #17
 80024ce:	430a      	orrs	r2, r1
 80024d0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d2:	f7ff f867 	bl	80015a4 <HAL_GetTick>
 80024d6:	0003      	movs	r3, r0
 80024d8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024dc:	f7ff f862 	bl	80015a4 <HAL_GetTick>
 80024e0:	0002      	movs	r2, r0
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e054      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	2380      	movs	r3, #128	; 0x80
 80024f4:	049b      	lsls	r3, r3, #18
 80024f6:	4013      	ands	r3, r2
 80024f8:	d0f0      	beq.n	80024dc <HAL_RCC_OscConfig+0x644>
 80024fa:	e04c      	b.n	8002596 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	4b04      	ldr	r3, [pc, #16]	; (8002514 <HAL_RCC_OscConfig+0x67c>)
 8002502:	4908      	ldr	r1, [pc, #32]	; (8002524 <HAL_RCC_OscConfig+0x68c>)
 8002504:	400a      	ands	r2, r1
 8002506:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff f84c 	bl	80015a4 <HAL_GetTick>
 800250c:	0003      	movs	r3, r0
 800250e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002510:	e015      	b.n	800253e <HAL_RCC_OscConfig+0x6a6>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	40021000 	.word	0x40021000
 8002518:	00001388 	.word	0x00001388
 800251c:	efffffff 	.word	0xefffffff
 8002520:	fffeffff 	.word	0xfffeffff
 8002524:	feffffff 	.word	0xfeffffff
 8002528:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800252c:	f7ff f83a 	bl	80015a4 <HAL_GetTick>
 8002530:	0002      	movs	r2, r0
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e02c      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253e:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_RCC_OscConfig+0x708>)
 8002540:	681a      	ldr	r2, [r3, #0]
 8002542:	2380      	movs	r3, #128	; 0x80
 8002544:	049b      	lsls	r3, r3, #18
 8002546:	4013      	ands	r3, r2
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x694>
 800254a:	e024      	b.n	8002596 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e01f      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002558:	4b11      	ldr	r3, [pc, #68]	; (80025a0 <HAL_RCC_OscConfig+0x708>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800255e:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <HAL_RCC_OscConfig+0x708>)
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002564:	697a      	ldr	r2, [r7, #20]
 8002566:	23c0      	movs	r3, #192	; 0xc0
 8002568:	025b      	lsls	r3, r3, #9
 800256a:	401a      	ands	r2, r3
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	429a      	cmp	r2, r3
 8002572:	d10e      	bne.n	8002592 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	220f      	movs	r2, #15
 8002578:	401a      	ands	r2, r3
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	429a      	cmp	r2, r3
 8002580:	d107      	bne.n	8002592 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	23f0      	movs	r3, #240	; 0xf0
 8002586:	039b      	lsls	r3, r3, #14
 8002588:	401a      	ands	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800258e:	429a      	cmp	r2, r3
 8002590:	d001      	beq.n	8002596 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8002596:	2300      	movs	r3, #0
}
 8002598:	0018      	movs	r0, r3
 800259a:	46bd      	mov	sp, r7
 800259c:	b008      	add	sp, #32
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40021000 	.word	0x40021000

080025a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0bf      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b61      	ldr	r3, [pc, #388]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	2201      	movs	r2, #1
 80025be:	4013      	ands	r3, r2
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d911      	bls.n	80025ea <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b5e      	ldr	r3, [pc, #376]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2201      	movs	r2, #1
 80025cc:	4393      	bics	r3, r2
 80025ce:	0019      	movs	r1, r3
 80025d0:	4b5b      	ldr	r3, [pc, #364]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d8:	4b59      	ldr	r3, [pc, #356]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2201      	movs	r2, #1
 80025de:	4013      	ands	r3, r2
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d001      	beq.n	80025ea <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e0a6      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d015      	beq.n	8002620 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2204      	movs	r2, #4
 80025fa:	4013      	ands	r3, r2
 80025fc:	d006      	beq.n	800260c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025fe:	4b51      	ldr	r3, [pc, #324]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002600:	685a      	ldr	r2, [r3, #4]
 8002602:	4b50      	ldr	r3, [pc, #320]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002604:	21e0      	movs	r1, #224	; 0xe0
 8002606:	00c9      	lsls	r1, r1, #3
 8002608:	430a      	orrs	r2, r1
 800260a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800260c:	4b4d      	ldr	r3, [pc, #308]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	22f0      	movs	r2, #240	; 0xf0
 8002612:	4393      	bics	r3, r2
 8002614:	0019      	movs	r1, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689a      	ldr	r2, [r3, #8]
 800261a:	4b4a      	ldr	r3, [pc, #296]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 800261c:	430a      	orrs	r2, r1
 800261e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2201      	movs	r2, #1
 8002626:	4013      	ands	r3, r2
 8002628:	d04c      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d107      	bne.n	8002642 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002632:	4b44      	ldr	r3, [pc, #272]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	029b      	lsls	r3, r3, #10
 800263a:	4013      	ands	r3, r2
 800263c:	d120      	bne.n	8002680 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e07a      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264a:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	049b      	lsls	r3, r3, #18
 8002652:	4013      	ands	r3, r2
 8002654:	d114      	bne.n	8002680 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e06e      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002662:	4b38      	ldr	r3, [pc, #224]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002664:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002666:	2380      	movs	r3, #128	; 0x80
 8002668:	025b      	lsls	r3, r3, #9
 800266a:	4013      	ands	r3, r2
 800266c:	d108      	bne.n	8002680 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e062      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b34      	ldr	r3, [pc, #208]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2202      	movs	r2, #2
 8002678:	4013      	ands	r3, r2
 800267a:	d101      	bne.n	8002680 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e05b      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002680:	4b30      	ldr	r3, [pc, #192]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	2203      	movs	r2, #3
 8002686:	4393      	bics	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002690:	430a      	orrs	r2, r1
 8002692:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002694:	f7fe ff86 	bl	80015a4 <HAL_GetTick>
 8002698:	0003      	movs	r3, r0
 800269a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269c:	e009      	b.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269e:	f7fe ff81 	bl	80015a4 <HAL_GetTick>
 80026a2:	0002      	movs	r2, r0
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <HAL_RCC_ClockConfig+0x1a4>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e042      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b24      	ldr	r3, [pc, #144]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	220c      	movs	r2, #12
 80026b8:	401a      	ands	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1ec      	bne.n	800269e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b1e      	ldr	r3, [pc, #120]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2201      	movs	r2, #1
 80026ca:	4013      	ands	r3, r2
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d211      	bcs.n	80026f6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b1b      	ldr	r3, [pc, #108]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2201      	movs	r2, #1
 80026d8:	4393      	bics	r3, r2
 80026da:	0019      	movs	r1, r3
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	430a      	orrs	r2, r1
 80026e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e4:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_RCC_ClockConfig+0x19c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2201      	movs	r2, #1
 80026ea:	4013      	ands	r3, r2
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d001      	beq.n	80026f6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e020      	b.n	8002738 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2204      	movs	r2, #4
 80026fc:	4013      	ands	r3, r2
 80026fe:	d009      	beq.n	8002714 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	4a11      	ldr	r2, [pc, #68]	; (800274c <HAL_RCC_ClockConfig+0x1a8>)
 8002706:	4013      	ands	r3, r2
 8002708:	0019      	movs	r1, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	4b0d      	ldr	r3, [pc, #52]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 8002710:	430a      	orrs	r2, r1
 8002712:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002714:	f000 f820 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 8002718:	0001      	movs	r1, r0
 800271a:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <HAL_RCC_ClockConfig+0x1a0>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	091b      	lsrs	r3, r3, #4
 8002720:	220f      	movs	r2, #15
 8002722:	4013      	ands	r3, r2
 8002724:	4a0a      	ldr	r2, [pc, #40]	; (8002750 <HAL_RCC_ClockConfig+0x1ac>)
 8002726:	5cd3      	ldrb	r3, [r2, r3]
 8002728:	000a      	movs	r2, r1
 800272a:	40da      	lsrs	r2, r3
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_ClockConfig+0x1b0>)
 800272e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002730:	2003      	movs	r0, #3
 8002732:	f7fe fef1 	bl	8001518 <HAL_InitTick>
  
  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	0018      	movs	r0, r3
 800273a:	46bd      	mov	sp, r7
 800273c:	b004      	add	sp, #16
 800273e:	bd80      	pop	{r7, pc}
 8002740:	40022000 	.word	0x40022000
 8002744:	40021000 	.word	0x40021000
 8002748:	00001388 	.word	0x00001388
 800274c:	fffff8ff 	.word	0xfffff8ff
 8002750:	080053ec 	.word	0x080053ec
 8002754:	20000028 	.word	0x20000028

08002758 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002758:	b590      	push	{r4, r7, lr}
 800275a:	b08f      	sub	sp, #60	; 0x3c
 800275c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800275e:	2314      	movs	r3, #20
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	4a38      	ldr	r2, [pc, #224]	; (8002844 <HAL_RCC_GetSysClockFreq+0xec>)
 8002764:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002766:	c313      	stmia	r3!, {r0, r1, r4}
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800276c:	1d3b      	adds	r3, r7, #4
 800276e:	4a36      	ldr	r2, [pc, #216]	; (8002848 <HAL_RCC_GetSysClockFreq+0xf0>)
 8002770:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002772:	c313      	stmia	r3!, {r0, r1, r4}
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002778:	2300      	movs	r3, #0
 800277a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800277c:	2300      	movs	r3, #0
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002780:	2300      	movs	r3, #0
 8002782:	637b      	str	r3, [r7, #52]	; 0x34
 8002784:	2300      	movs	r3, #0
 8002786:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002788:	2300      	movs	r3, #0
 800278a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 800278c:	4b2f      	ldr	r3, [pc, #188]	; (800284c <HAL_RCC_GetSysClockFreq+0xf4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	220c      	movs	r2, #12
 8002796:	4013      	ands	r3, r2
 8002798:	2b0c      	cmp	r3, #12
 800279a:	d047      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0xd4>
 800279c:	d849      	bhi.n	8002832 <HAL_RCC_GetSysClockFreq+0xda>
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d002      	beq.n	80027a8 <HAL_RCC_GetSysClockFreq+0x50>
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d003      	beq.n	80027ae <HAL_RCC_GetSysClockFreq+0x56>
 80027a6:	e044      	b.n	8002832 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027a8:	4b29      	ldr	r3, [pc, #164]	; (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80027ac:	e044      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	0c9b      	lsrs	r3, r3, #18
 80027b2:	220f      	movs	r2, #15
 80027b4:	4013      	ands	r3, r2
 80027b6:	2214      	movs	r2, #20
 80027b8:	18ba      	adds	r2, r7, r2
 80027ba:	5cd3      	ldrb	r3, [r2, r3]
 80027bc:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80027be:	4b23      	ldr	r3, [pc, #140]	; (800284c <HAL_RCC_GetSysClockFreq+0xf4>)
 80027c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c2:	220f      	movs	r2, #15
 80027c4:	4013      	ands	r3, r2
 80027c6:	1d3a      	adds	r2, r7, #4
 80027c8:	5cd3      	ldrb	r3, [r2, r3]
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80027cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027ce:	23c0      	movs	r3, #192	; 0xc0
 80027d0:	025b      	lsls	r3, r3, #9
 80027d2:	401a      	ands	r2, r3
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	025b      	lsls	r3, r3, #9
 80027d8:	429a      	cmp	r2, r3
 80027da:	d109      	bne.n	80027f0 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80027de:	481c      	ldr	r0, [pc, #112]	; (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027e0:	f7fd fca2 	bl	8000128 <__udivsi3>
 80027e4:	0003      	movs	r3, r0
 80027e6:	001a      	movs	r2, r3
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	4353      	muls	r3, r2
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
 80027ee:	e01a      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80027f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027f2:	23c0      	movs	r3, #192	; 0xc0
 80027f4:	025b      	lsls	r3, r3, #9
 80027f6:	401a      	ands	r2, r3
 80027f8:	23c0      	movs	r3, #192	; 0xc0
 80027fa:	025b      	lsls	r3, r3, #9
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d109      	bne.n	8002814 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002802:	4814      	ldr	r0, [pc, #80]	; (8002854 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002804:	f7fd fc90 	bl	8000128 <__udivsi3>
 8002808:	0003      	movs	r3, r0
 800280a:	001a      	movs	r2, r3
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	4353      	muls	r3, r2
 8002810:	637b      	str	r3, [r7, #52]	; 0x34
 8002812:	e008      	b.n	8002826 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002814:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002816:	480e      	ldr	r0, [pc, #56]	; (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002818:	f7fd fc86 	bl	8000128 <__udivsi3>
 800281c:	0003      	movs	r3, r0
 800281e:	001a      	movs	r2, r3
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	4353      	muls	r3, r2
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8002826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002828:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800282a:	e005      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <HAL_RCC_GetSysClockFreq+0xfc>)
 800282e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002830:	e002      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002834:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002836:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800283a:	0018      	movs	r0, r3
 800283c:	46bd      	mov	sp, r7
 800283e:	b00f      	add	sp, #60	; 0x3c
 8002840:	bd90      	pop	{r4, r7, pc}
 8002842:	46c0      	nop			; (mov r8, r8)
 8002844:	08005314 	.word	0x08005314
 8002848:	08005324 	.word	0x08005324
 800284c:	40021000 	.word	0x40021000
 8002850:	007a1200 	.word	0x007a1200
 8002854:	02dc6c00 	.word	0x02dc6c00

08002858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800285c:	4b02      	ldr	r3, [pc, #8]	; (8002868 <HAL_RCC_GetHCLKFreq+0x10>)
 800285e:	681b      	ldr	r3, [r3, #0]
}
 8002860:	0018      	movs	r0, r3
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	20000028 	.word	0x20000028

0800286c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002870:	f7ff fff2 	bl	8002858 <HAL_RCC_GetHCLKFreq>
 8002874:	0001      	movs	r1, r0
 8002876:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	0a1b      	lsrs	r3, r3, #8
 800287c:	2207      	movs	r2, #7
 800287e:	4013      	ands	r3, r2
 8002880:	4a04      	ldr	r2, [pc, #16]	; (8002894 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002882:	5cd3      	ldrb	r3, [r2, r3]
 8002884:	40d9      	lsrs	r1, r3
 8002886:	000b      	movs	r3, r1
}    
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	46c0      	nop			; (mov r8, r8)
 8002890:	40021000 	.word	0x40021000
 8002894:	080053fc 	.word	0x080053fc

08002898 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	025b      	lsls	r3, r3, #9
 80028b0:	4013      	ands	r3, r2
 80028b2:	d100      	bne.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80028b4:	e08e      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80028b6:	2017      	movs	r0, #23
 80028b8:	183b      	adds	r3, r7, r0
 80028ba:	2200      	movs	r2, #0
 80028bc:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028be:	4b6e      	ldr	r3, [pc, #440]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028c0:	69da      	ldr	r2, [r3, #28]
 80028c2:	2380      	movs	r3, #128	; 0x80
 80028c4:	055b      	lsls	r3, r3, #21
 80028c6:	4013      	ands	r3, r2
 80028c8:	d110      	bne.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80028ca:	4b6b      	ldr	r3, [pc, #428]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028cc:	69da      	ldr	r2, [r3, #28]
 80028ce:	4b6a      	ldr	r3, [pc, #424]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028d0:	2180      	movs	r1, #128	; 0x80
 80028d2:	0549      	lsls	r1, r1, #21
 80028d4:	430a      	orrs	r2, r1
 80028d6:	61da      	str	r2, [r3, #28]
 80028d8:	4b67      	ldr	r3, [pc, #412]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80028da:	69da      	ldr	r2, [r3, #28]
 80028dc:	2380      	movs	r3, #128	; 0x80
 80028de:	055b      	lsls	r3, r3, #21
 80028e0:	4013      	ands	r3, r2
 80028e2:	60bb      	str	r3, [r7, #8]
 80028e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e6:	183b      	adds	r3, r7, r0
 80028e8:	2201      	movs	r2, #1
 80028ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ec:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	2380      	movs	r3, #128	; 0x80
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	4013      	ands	r3, r2
 80028f6:	d11a      	bne.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028f8:	4b60      	ldr	r3, [pc, #384]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80028fe:	2180      	movs	r1, #128	; 0x80
 8002900:	0049      	lsls	r1, r1, #1
 8002902:	430a      	orrs	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002906:	f7fe fe4d 	bl	80015a4 <HAL_GetTick>
 800290a:	0003      	movs	r3, r0
 800290c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290e:	e008      	b.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002910:	f7fe fe48 	bl	80015a4 <HAL_GetTick>
 8002914:	0002      	movs	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b64      	cmp	r3, #100	; 0x64
 800291c:	d901      	bls.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e0a6      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b56      	ldr	r3, [pc, #344]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	2380      	movs	r3, #128	; 0x80
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	4013      	ands	r3, r2
 800292c:	d0f0      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800292e:	4b52      	ldr	r3, [pc, #328]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002930:	6a1a      	ldr	r2, [r3, #32]
 8002932:	23c0      	movs	r3, #192	; 0xc0
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	4013      	ands	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d034      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	23c0      	movs	r3, #192	; 0xc0
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4013      	ands	r3, r2
 800294a:	68fa      	ldr	r2, [r7, #12]
 800294c:	429a      	cmp	r2, r3
 800294e:	d02c      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002950:	4b49      	ldr	r3, [pc, #292]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002952:	6a1b      	ldr	r3, [r3, #32]
 8002954:	4a4a      	ldr	r2, [pc, #296]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002956:	4013      	ands	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800295a:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800295c:	6a1a      	ldr	r2, [r3, #32]
 800295e:	4b46      	ldr	r3, [pc, #280]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	0249      	lsls	r1, r1, #9
 8002964:	430a      	orrs	r2, r1
 8002966:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002968:	4b43      	ldr	r3, [pc, #268]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800296a:	6a1a      	ldr	r2, [r3, #32]
 800296c:	4b42      	ldr	r3, [pc, #264]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800296e:	4945      	ldr	r1, [pc, #276]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002970:	400a      	ands	r2, r1
 8002972:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002974:	4b40      	ldr	r3, [pc, #256]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	4013      	ands	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002982:	f7fe fe0f 	bl	80015a4 <HAL_GetTick>
 8002986:	0003      	movs	r3, r0
 8002988:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298a:	e009      	b.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7fe fe0a 	bl	80015a4 <HAL_GetTick>
 8002990:	0002      	movs	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	4a3c      	ldr	r2, [pc, #240]	; (8002a88 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d901      	bls.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800299c:	2303      	movs	r3, #3
 800299e:	e067      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029a0:	4b35      	ldr	r3, [pc, #212]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	2202      	movs	r2, #2
 80029a6:	4013      	ands	r3, r2
 80029a8:	d0f0      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029aa:	4b33      	ldr	r3, [pc, #204]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	4a34      	ldr	r2, [pc, #208]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	0019      	movs	r1, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ba:	430a      	orrs	r2, r1
 80029bc:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029be:	2317      	movs	r3, #23
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4b2b      	ldr	r3, [pc, #172]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ca:	69da      	ldr	r2, [r3, #28]
 80029cc:	4b2a      	ldr	r3, [pc, #168]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ce:	492f      	ldr	r1, [pc, #188]	; (8002a8c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80029d0:	400a      	ands	r2, r1
 80029d2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2201      	movs	r2, #1
 80029da:	4013      	ands	r3, r2
 80029dc:	d009      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029de:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	2203      	movs	r2, #3
 80029e4:	4393      	bics	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	4b22      	ldr	r3, [pc, #136]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029ee:	430a      	orrs	r2, r1
 80029f0:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2202      	movs	r2, #2
 80029f8:	4013      	ands	r3, r2
 80029fa:	d009      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80029fc:	4b1e      	ldr	r3, [pc, #120]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a23      	ldr	r2, [pc, #140]	; (8002a90 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a02:	4013      	ands	r3, r2
 8002a04:	0019      	movs	r1, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	02db      	lsls	r3, r3, #11
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d009      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a20:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	0019      	movs	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691a      	ldr	r2, [r3, #16]
 8002a2a:	4b13      	ldr	r3, [pc, #76]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2220      	movs	r2, #32
 8002a36:	4013      	ands	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a3a:	4b0f      	ldr	r3, [pc, #60]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	2210      	movs	r2, #16
 8002a40:	4393      	bics	r3, r2
 8002a42:	0019      	movs	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	4013      	ands	r3, r2
 8002a58:	d009      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	2240      	movs	r2, #64	; 0x40
 8002a60:	4393      	bics	r3, r2
 8002a62:	0019      	movs	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	699a      	ldr	r2, [r3, #24]
 8002a68:	4b03      	ldr	r3, [pc, #12]	; (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002a6a:	430a      	orrs	r2, r1
 8002a6c:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	0018      	movs	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b006      	add	sp, #24
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	40007000 	.word	0x40007000
 8002a80:	fffffcff 	.word	0xfffffcff
 8002a84:	fffeffff 	.word	0xfffeffff
 8002a88:	00001388 	.word	0x00001388
 8002a8c:	efffffff 	.word	0xefffffff
 8002a90:	fffcffff 	.word	0xfffcffff
 8002a94:	fff3ffff 	.word	0xfff3ffff

08002a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e042      	b.n	8002b30 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	223d      	movs	r2, #61	; 0x3d
 8002aae:	5c9b      	ldrb	r3, [r3, r2]
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d107      	bne.n	8002ac6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	223c      	movs	r2, #60	; 0x3c
 8002aba:	2100      	movs	r1, #0
 8002abc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0018      	movs	r0, r3
 8002ac2:	f7fe fb97 	bl	80011f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	223d      	movs	r2, #61	; 0x3d
 8002aca:	2102      	movs	r1, #2
 8002acc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	0010      	movs	r0, r2
 8002ada:	f000 ff21 	bl	8003920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2246      	movs	r2, #70	; 0x46
 8002ae2:	2101      	movs	r1, #1
 8002ae4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	223e      	movs	r2, #62	; 0x3e
 8002aea:	2101      	movs	r1, #1
 8002aec:	5499      	strb	r1, [r3, r2]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	223f      	movs	r2, #63	; 0x3f
 8002af2:	2101      	movs	r1, #1
 8002af4:	5499      	strb	r1, [r3, r2]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2240      	movs	r2, #64	; 0x40
 8002afa:	2101      	movs	r1, #1
 8002afc:	5499      	strb	r1, [r3, r2]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2241      	movs	r2, #65	; 0x41
 8002b02:	2101      	movs	r1, #1
 8002b04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2242      	movs	r2, #66	; 0x42
 8002b0a:	2101      	movs	r1, #1
 8002b0c:	5499      	strb	r1, [r3, r2]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2243      	movs	r2, #67	; 0x43
 8002b12:	2101      	movs	r1, #1
 8002b14:	5499      	strb	r1, [r3, r2]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2244      	movs	r2, #68	; 0x44
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	5499      	strb	r1, [r3, r2]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2245      	movs	r2, #69	; 0x45
 8002b22:	2101      	movs	r1, #1
 8002b24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	223d      	movs	r2, #61	; 0x3d
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b2e:	2300      	movs	r3, #0
}
 8002b30:	0018      	movs	r0, r3
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}

08002b38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	223d      	movs	r2, #61	; 0x3d
 8002b44:	5c9b      	ldrb	r3, [r3, r2]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d001      	beq.n	8002b50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e03b      	b.n	8002bc8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	223d      	movs	r2, #61	; 0x3d
 8002b54:	2102      	movs	r1, #2
 8002b56:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68da      	ldr	r2, [r3, #12]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2101      	movs	r1, #1
 8002b64:	430a      	orrs	r2, r1
 8002b66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a18      	ldr	r2, [pc, #96]	; (8002bd0 <HAL_TIM_Base_Start_IT+0x98>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d00f      	beq.n	8002b92 <HAL_TIM_Base_Start_IT+0x5a>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	05db      	lsls	r3, r3, #23
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d009      	beq.n	8002b92 <HAL_TIM_Base_Start_IT+0x5a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a14      	ldr	r2, [pc, #80]	; (8002bd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d004      	beq.n	8002b92 <HAL_TIM_Base_Start_IT+0x5a>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a12      	ldr	r2, [pc, #72]	; (8002bd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d111      	bne.n	8002bb6 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2207      	movs	r2, #7
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2b06      	cmp	r3, #6
 8002ba2:	d010      	beq.n	8002bc6 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2101      	movs	r1, #1
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bb4:	e007      	b.n	8002bc6 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	0018      	movs	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b004      	add	sp, #16
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40012c00 	.word	0x40012c00
 8002bd4:	40000400 	.word	0x40000400
 8002bd8:	40014000 	.word	0x40014000

08002bdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e042      	b.n	8002c74 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	223d      	movs	r2, #61	; 0x3d
 8002bf2:	5c9b      	ldrb	r3, [r3, r2]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d107      	bne.n	8002c0a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	223c      	movs	r2, #60	; 0x3c
 8002bfe:	2100      	movs	r1, #0
 8002c00:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	f000 f839 	bl	8002c7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	223d      	movs	r2, #61	; 0x3d
 8002c0e:	2102      	movs	r1, #2
 8002c10:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3304      	adds	r3, #4
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	0010      	movs	r0, r2
 8002c1e:	f000 fe7f 	bl	8003920 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2246      	movs	r2, #70	; 0x46
 8002c26:	2101      	movs	r1, #1
 8002c28:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	223e      	movs	r2, #62	; 0x3e
 8002c2e:	2101      	movs	r1, #1
 8002c30:	5499      	strb	r1, [r3, r2]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	223f      	movs	r2, #63	; 0x3f
 8002c36:	2101      	movs	r1, #1
 8002c38:	5499      	strb	r1, [r3, r2]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2240      	movs	r2, #64	; 0x40
 8002c3e:	2101      	movs	r1, #1
 8002c40:	5499      	strb	r1, [r3, r2]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2241      	movs	r2, #65	; 0x41
 8002c46:	2101      	movs	r1, #1
 8002c48:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2242      	movs	r2, #66	; 0x42
 8002c4e:	2101      	movs	r1, #1
 8002c50:	5499      	strb	r1, [r3, r2]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2243      	movs	r2, #67	; 0x43
 8002c56:	2101      	movs	r1, #1
 8002c58:	5499      	strb	r1, [r3, r2]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2244      	movs	r2, #68	; 0x44
 8002c5e:	2101      	movs	r1, #1
 8002c60:	5499      	strb	r1, [r3, r2]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2245      	movs	r2, #69	; 0x45
 8002c66:	2101      	movs	r1, #1
 8002c68:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	223d      	movs	r2, #61	; 0x3d
 8002c6e:	2101      	movs	r1, #1
 8002c70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	0018      	movs	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b002      	add	sp, #8
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c84:	46c0      	nop			; (mov r8, r8)
 8002c86:	46bd      	mov	sp, r7
 8002c88:	b002      	add	sp, #8
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	607a      	str	r2, [r7, #4]
 8002c98:	001a      	movs	r2, r3
 8002c9a:	1cbb      	adds	r3, r7, #2
 8002c9c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c9e:	2317      	movs	r3, #23
 8002ca0:	18fb      	adds	r3, r7, r3
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d108      	bne.n	8002cbe <HAL_TIM_PWM_Start_DMA+0x32>
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	223e      	movs	r2, #62	; 0x3e
 8002cb0:	5c9b      	ldrb	r3, [r3, r2]
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	3b02      	subs	r3, #2
 8002cb6:	425a      	negs	r2, r3
 8002cb8:	4153      	adcs	r3, r2
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	e01f      	b.n	8002cfe <HAL_TIM_PWM_Start_DMA+0x72>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d108      	bne.n	8002cd6 <HAL_TIM_PWM_Start_DMA+0x4a>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	223f      	movs	r2, #63	; 0x3f
 8002cc8:	5c9b      	ldrb	r3, [r3, r2]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	3b02      	subs	r3, #2
 8002cce:	425a      	negs	r2, r3
 8002cd0:	4153      	adcs	r3, r2
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	e013      	b.n	8002cfe <HAL_TIM_PWM_Start_DMA+0x72>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d108      	bne.n	8002cee <HAL_TIM_PWM_Start_DMA+0x62>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2240      	movs	r2, #64	; 0x40
 8002ce0:	5c9b      	ldrb	r3, [r3, r2]
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	3b02      	subs	r3, #2
 8002ce6:	425a      	negs	r2, r3
 8002ce8:	4153      	adcs	r3, r2
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	e007      	b.n	8002cfe <HAL_TIM_PWM_Start_DMA+0x72>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2241      	movs	r2, #65	; 0x41
 8002cf2:	5c9b      	ldrb	r3, [r3, r2]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	3b02      	subs	r3, #2
 8002cf8:	425a      	negs	r2, r3
 8002cfa:	4153      	adcs	r3, r2
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002d02:	2302      	movs	r3, #2
 8002d04:	e164      	b.n	8002fd0 <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d108      	bne.n	8002d1e <HAL_TIM_PWM_Start_DMA+0x92>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	223e      	movs	r2, #62	; 0x3e
 8002d10:	5c9b      	ldrb	r3, [r3, r2]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	3b01      	subs	r3, #1
 8002d16:	425a      	negs	r2, r3
 8002d18:	4153      	adcs	r3, r2
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	e01f      	b.n	8002d5e <HAL_TIM_PWM_Start_DMA+0xd2>
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2b04      	cmp	r3, #4
 8002d22:	d108      	bne.n	8002d36 <HAL_TIM_PWM_Start_DMA+0xaa>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	223f      	movs	r2, #63	; 0x3f
 8002d28:	5c9b      	ldrb	r3, [r3, r2]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	425a      	negs	r2, r3
 8002d30:	4153      	adcs	r3, r2
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	e013      	b.n	8002d5e <HAL_TIM_PWM_Start_DMA+0xd2>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d108      	bne.n	8002d4e <HAL_TIM_PWM_Start_DMA+0xc2>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2240      	movs	r2, #64	; 0x40
 8002d40:	5c9b      	ldrb	r3, [r3, r2]
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	3b01      	subs	r3, #1
 8002d46:	425a      	negs	r2, r3
 8002d48:	4153      	adcs	r3, r2
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	e007      	b.n	8002d5e <HAL_TIM_PWM_Start_DMA+0xd2>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2241      	movs	r2, #65	; 0x41
 8002d52:	5c9b      	ldrb	r3, [r3, r2]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	3b01      	subs	r3, #1
 8002d58:	425a      	negs	r2, r3
 8002d5a:	4153      	adcs	r3, r2
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d025      	beq.n	8002dae <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) && (Length > 0U))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d105      	bne.n	8002d74 <HAL_TIM_PWM_Start_DMA+0xe8>
 8002d68:	1cbb      	adds	r3, r7, #2
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	e12d      	b.n	8002fd0 <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d104      	bne.n	8002d84 <HAL_TIM_PWM_Start_DMA+0xf8>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	223e      	movs	r2, #62	; 0x3e
 8002d7e:	2102      	movs	r1, #2
 8002d80:	5499      	strb	r1, [r3, r2]
 8002d82:	e016      	b.n	8002db2 <HAL_TIM_PWM_Start_DMA+0x126>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d104      	bne.n	8002d94 <HAL_TIM_PWM_Start_DMA+0x108>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	223f      	movs	r2, #63	; 0x3f
 8002d8e:	2102      	movs	r1, #2
 8002d90:	5499      	strb	r1, [r3, r2]
 8002d92:	e00e      	b.n	8002db2 <HAL_TIM_PWM_Start_DMA+0x126>
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d104      	bne.n	8002da4 <HAL_TIM_PWM_Start_DMA+0x118>
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2240      	movs	r2, #64	; 0x40
 8002d9e:	2102      	movs	r1, #2
 8002da0:	5499      	strb	r1, [r3, r2]
 8002da2:	e006      	b.n	8002db2 <HAL_TIM_PWM_Start_DMA+0x126>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2241      	movs	r2, #65	; 0x41
 8002da8:	2102      	movs	r1, #2
 8002daa:	5499      	strb	r1, [r3, r2]
 8002dac:	e001      	b.n	8002db2 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e10e      	b.n	8002fd0 <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b0c      	cmp	r3, #12
 8002db6:	d100      	bne.n	8002dba <HAL_TIM_PWM_Start_DMA+0x12e>
 8002db8:	e080      	b.n	8002ebc <HAL_TIM_PWM_Start_DMA+0x230>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b0c      	cmp	r3, #12
 8002dbe:	d900      	bls.n	8002dc2 <HAL_TIM_PWM_Start_DMA+0x136>
 8002dc0:	e0a1      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x27a>
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	2b08      	cmp	r3, #8
 8002dc6:	d054      	beq.n	8002e72 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	2b08      	cmp	r3, #8
 8002dcc:	d900      	bls.n	8002dd0 <HAL_TIM_PWM_Start_DMA+0x144>
 8002dce:	e09a      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x27a>
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_TIM_PWM_Start_DMA+0x152>
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	2b04      	cmp	r3, #4
 8002dda:	d025      	beq.n	8002e28 <HAL_TIM_PWM_Start_DMA+0x19c>
 8002ddc:	e093      	b.n	8002f06 <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	4a7d      	ldr	r2, [pc, #500]	; (8002fd8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002de4:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	4a7c      	ldr	r2, [pc, #496]	; (8002fdc <HAL_TIM_PWM_Start_DMA+0x350>)
 8002dec:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	4a7b      	ldr	r2, [pc, #492]	; (8002fe0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3334      	adds	r3, #52	; 0x34
 8002e02:	001a      	movs	r2, r3
 8002e04:	1cbb      	adds	r3, r7, #2
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	f7fe fcfc 	bl	8001804 <HAL_DMA_Start_IT>
 8002e0c:	1e03      	subs	r3, r0, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0dd      	b.n	8002fd0 <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68da      	ldr	r2, [r3, #12]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2180      	movs	r1, #128	; 0x80
 8002e20:	0089      	lsls	r1, r1, #2
 8002e22:	430a      	orrs	r2, r1
 8002e24:	60da      	str	r2, [r3, #12]
      break;
 8002e26:	e073      	b.n	8002f10 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	4a6a      	ldr	r2, [pc, #424]	; (8002fd8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002e2e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	4a69      	ldr	r2, [pc, #420]	; (8002fdc <HAL_TIM_PWM_Start_DMA+0x350>)
 8002e36:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	4a68      	ldr	r2, [pc, #416]	; (8002fe0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002e3e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	3338      	adds	r3, #56	; 0x38
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	1cbb      	adds	r3, r7, #2
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	f7fe fcd7 	bl	8001804 <HAL_DMA_Start_IT>
 8002e56:	1e03      	subs	r3, r0, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e0b8      	b.n	8002fd0 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2180      	movs	r1, #128	; 0x80
 8002e6a:	00c9      	lsls	r1, r1, #3
 8002e6c:	430a      	orrs	r2, r1
 8002e6e:	60da      	str	r2, [r3, #12]
      break;
 8002e70:	e04e      	b.n	8002f10 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e76:	4a58      	ldr	r2, [pc, #352]	; (8002fd8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002e78:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e7e:	4a57      	ldr	r2, [pc, #348]	; (8002fdc <HAL_TIM_PWM_Start_DMA+0x350>)
 8002e80:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e86:	4a56      	ldr	r2, [pc, #344]	; (8002fe0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	333c      	adds	r3, #60	; 0x3c
 8002e96:	001a      	movs	r2, r3
 8002e98:	1cbb      	adds	r3, r7, #2
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	f7fe fcb2 	bl	8001804 <HAL_DMA_Start_IT>
 8002ea0:	1e03      	subs	r3, r0, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	e093      	b.n	8002fd0 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2180      	movs	r1, #128	; 0x80
 8002eb4:	0109      	lsls	r1, r1, #4
 8002eb6:	430a      	orrs	r2, r1
 8002eb8:	60da      	str	r2, [r3, #12]
      break;
 8002eba:	e029      	b.n	8002f10 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec0:	4a45      	ldr	r2, [pc, #276]	; (8002fd8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002ec2:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec8:	4a44      	ldr	r2, [pc, #272]	; (8002fdc <HAL_TIM_PWM_Start_DMA+0x350>)
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed0:	4a43      	ldr	r2, [pc, #268]	; (8002fe0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3340      	adds	r3, #64	; 0x40
 8002ee0:	001a      	movs	r2, r3
 8002ee2:	1cbb      	adds	r3, r7, #2
 8002ee4:	881b      	ldrh	r3, [r3, #0]
 8002ee6:	f7fe fc8d 	bl	8001804 <HAL_DMA_Start_IT>
 8002eea:	1e03      	subs	r3, r0, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e06e      	b.n	8002fd0 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2180      	movs	r1, #128	; 0x80
 8002efe:	0149      	lsls	r1, r1, #5
 8002f00:	430a      	orrs	r2, r1
 8002f02:	60da      	str	r2, [r3, #12]
      break;
 8002f04:	e004      	b.n	8002f10 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8002f06:	2317      	movs	r3, #23
 8002f08:	18fb      	adds	r3, r7, r3
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	701a      	strb	r2, [r3, #0]
      break;
 8002f0e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002f10:	2317      	movs	r3, #23
 8002f12:	18fb      	adds	r3, r7, r3
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d157      	bne.n	8002fca <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68b9      	ldr	r1, [r7, #8]
 8002f20:	2201      	movs	r2, #1
 8002f22:	0018      	movs	r0, r3
 8002f24:	f001 f812 	bl	8003f4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a2d      	ldr	r2, [pc, #180]	; (8002fe4 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00e      	beq.n	8002f50 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2c      	ldr	r2, [pc, #176]	; (8002fe8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d009      	beq.n	8002f50 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2a      	ldr	r2, [pc, #168]	; (8002fec <HAL_TIM_PWM_Start_DMA+0x360>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a29      	ldr	r2, [pc, #164]	; (8002ff0 <HAL_TIM_PWM_Start_DMA+0x364>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d101      	bne.n	8002f54 <HAL_TIM_PWM_Start_DMA+0x2c8>
 8002f50:	2301      	movs	r3, #1
 8002f52:	e000      	b.n	8002f56 <HAL_TIM_PWM_Start_DMA+0x2ca>
 8002f54:	2300      	movs	r3, #0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d008      	beq.n	8002f6c <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	2180      	movs	r1, #128	; 0x80
 8002f66:	0209      	lsls	r1, r1, #8
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a1c      	ldr	r2, [pc, #112]	; (8002fe4 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00f      	beq.n	8002f96 <HAL_TIM_PWM_Start_DMA+0x30a>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	2380      	movs	r3, #128	; 0x80
 8002f7c:	05db      	lsls	r3, r3, #23
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d009      	beq.n	8002f96 <HAL_TIM_PWM_Start_DMA+0x30a>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1b      	ldr	r2, [pc, #108]	; (8002ff4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d004      	beq.n	8002f96 <HAL_TIM_PWM_Start_DMA+0x30a>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a15      	ldr	r2, [pc, #84]	; (8002fe8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d111      	bne.n	8002fba <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	2207      	movs	r2, #7
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	2b06      	cmp	r3, #6
 8002fa6:	d010      	beq.n	8002fca <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb8:	e007      	b.n	8002fca <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002fca:	2317      	movs	r3, #23
 8002fcc:	18fb      	adds	r3, r7, r3
 8002fce:	781b      	ldrb	r3, [r3, #0]
}
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	b006      	add	sp, #24
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	0800380d 	.word	0x0800380d
 8002fdc:	080038b7 	.word	0x080038b7
 8002fe0:	08003779 	.word	0x08003779
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	40014400 	.word	0x40014400
 8002ff0:	40014800 	.word	0x40014800
 8002ff4:	40000400 	.word	0x40000400

08002ff8 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003002:	230f      	movs	r3, #15
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	2200      	movs	r2, #0
 8003008:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d039      	beq.n	8003084 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b0c      	cmp	r3, #12
 8003014:	d844      	bhi.n	80030a0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	2b08      	cmp	r3, #8
 800301a:	d025      	beq.n	8003068 <HAL_TIM_PWM_Stop_DMA+0x70>
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	2b08      	cmp	r3, #8
 8003020:	d83e      	bhi.n	80030a0 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_TIM_PWM_Stop_DMA+0x38>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	2b04      	cmp	r3, #4
 800302c:	d00e      	beq.n	800304c <HAL_TIM_PWM_Stop_DMA+0x54>
 800302e:	e037      	b.n	80030a0 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4954      	ldr	r1, [pc, #336]	; (800318c <HAL_TIM_PWM_Stop_DMA+0x194>)
 800303c:	400a      	ands	r2, r1
 800303e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003044:	0018      	movs	r0, r3
 8003046:	f7fe fc43 	bl	80018d0 <HAL_DMA_Abort_IT>
      break;
 800304a:	e02e      	b.n	80030aa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	494e      	ldr	r1, [pc, #312]	; (8003190 <HAL_TIM_PWM_Stop_DMA+0x198>)
 8003058:	400a      	ands	r2, r1
 800305a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003060:	0018      	movs	r0, r3
 8003062:	f7fe fc35 	bl	80018d0 <HAL_DMA_Abort_IT>
      break;
 8003066:	e020      	b.n	80030aa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4948      	ldr	r1, [pc, #288]	; (8003194 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8003074:	400a      	ands	r2, r1
 8003076:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800307c:	0018      	movs	r0, r3
 800307e:	f7fe fc27 	bl	80018d0 <HAL_DMA_Abort_IT>
      break;
 8003082:	e012      	b.n	80030aa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4942      	ldr	r1, [pc, #264]	; (8003198 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8003090:	400a      	ands	r2, r1
 8003092:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	0018      	movs	r0, r3
 800309a:	f7fe fc19 	bl	80018d0 <HAL_DMA_Abort_IT>
      break;
 800309e:	e004      	b.n	80030aa <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 80030a0:	230f      	movs	r3, #15
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]
      break;
 80030a8:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80030aa:	230f      	movs	r3, #15
 80030ac:	18fb      	adds	r3, r7, r3
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d000      	beq.n	80030b6 <HAL_TIM_PWM_Stop_DMA+0xbe>
 80030b4:	e063      	b.n	800317e <HAL_TIM_PWM_Stop_DMA+0x186>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6839      	ldr	r1, [r7, #0]
 80030bc:	2200      	movs	r2, #0
 80030be:	0018      	movs	r0, r3
 80030c0:	f000 ff44 	bl	8003f4c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a34      	ldr	r2, [pc, #208]	; (800319c <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00e      	beq.n	80030ec <HAL_TIM_PWM_Stop_DMA+0xf4>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a33      	ldr	r2, [pc, #204]	; (80031a0 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d009      	beq.n	80030ec <HAL_TIM_PWM_Stop_DMA+0xf4>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a31      	ldr	r2, [pc, #196]	; (80031a4 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d004      	beq.n	80030ec <HAL_TIM_PWM_Stop_DMA+0xf4>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a30      	ldr	r2, [pc, #192]	; (80031a8 <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d101      	bne.n	80030f0 <HAL_TIM_PWM_Stop_DMA+0xf8>
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <HAL_TIM_PWM_Stop_DMA+0xfa>
 80030f0:	2300      	movs	r3, #0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d013      	beq.n	800311e <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
 80030fc:	4a2b      	ldr	r2, [pc, #172]	; (80031ac <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 80030fe:	4013      	ands	r3, r2
 8003100:	d10d      	bne.n	800311e <HAL_TIM_PWM_Stop_DMA+0x126>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4a29      	ldr	r2, [pc, #164]	; (80031b0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 800310a:	4013      	ands	r3, r2
 800310c:	d107      	bne.n	800311e <HAL_TIM_PWM_Stop_DMA+0x126>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4926      	ldr	r1, [pc, #152]	; (80031b4 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 800311a:	400a      	ands	r2, r1
 800311c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	4a21      	ldr	r2, [pc, #132]	; (80031ac <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8003126:	4013      	ands	r3, r2
 8003128:	d10d      	bne.n	8003146 <HAL_TIM_PWM_Stop_DMA+0x14e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	4a1f      	ldr	r2, [pc, #124]	; (80031b0 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8003132:	4013      	ands	r3, r2
 8003134:	d107      	bne.n	8003146 <HAL_TIM_PWM_Stop_DMA+0x14e>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2101      	movs	r1, #1
 8003142:	438a      	bics	r2, r1
 8003144:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d104      	bne.n	8003156 <HAL_TIM_PWM_Stop_DMA+0x15e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	223e      	movs	r2, #62	; 0x3e
 8003150:	2101      	movs	r1, #1
 8003152:	5499      	strb	r1, [r3, r2]
 8003154:	e013      	b.n	800317e <HAL_TIM_PWM_Stop_DMA+0x186>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d104      	bne.n	8003166 <HAL_TIM_PWM_Stop_DMA+0x16e>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	223f      	movs	r2, #63	; 0x3f
 8003160:	2101      	movs	r1, #1
 8003162:	5499      	strb	r1, [r3, r2]
 8003164:	e00b      	b.n	800317e <HAL_TIM_PWM_Stop_DMA+0x186>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b08      	cmp	r3, #8
 800316a:	d104      	bne.n	8003176 <HAL_TIM_PWM_Stop_DMA+0x17e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2240      	movs	r2, #64	; 0x40
 8003170:	2101      	movs	r1, #1
 8003172:	5499      	strb	r1, [r3, r2]
 8003174:	e003      	b.n	800317e <HAL_TIM_PWM_Stop_DMA+0x186>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2241      	movs	r2, #65	; 0x41
 800317a:	2101      	movs	r1, #1
 800317c:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800317e:	230f      	movs	r3, #15
 8003180:	18fb      	adds	r3, r7, r3
 8003182:	781b      	ldrb	r3, [r3, #0]
}
 8003184:	0018      	movs	r0, r3
 8003186:	46bd      	mov	sp, r7
 8003188:	b004      	add	sp, #16
 800318a:	bd80      	pop	{r7, pc}
 800318c:	fffffdff 	.word	0xfffffdff
 8003190:	fffffbff 	.word	0xfffffbff
 8003194:	fffff7ff 	.word	0xfffff7ff
 8003198:	ffffefff 	.word	0xffffefff
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40014400 	.word	0x40014400
 80031a8:	40014800 	.word	0x40014800
 80031ac:	00001111 	.word	0x00001111
 80031b0:	00000444 	.word	0x00000444
 80031b4:	ffff7fff 	.word	0xffff7fff

080031b8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2202      	movs	r2, #2
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d124      	bne.n	8003218 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	2202      	movs	r2, #2
 80031d6:	4013      	ands	r3, r2
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d11d      	bne.n	8003218 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2203      	movs	r2, #3
 80031e2:	4252      	negs	r2, r2
 80031e4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	2203      	movs	r2, #3
 80031f4:	4013      	ands	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	0018      	movs	r0, r3
 80031fc:	f000 fa94 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 8003200:	e007      	b.n	8003212 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	0018      	movs	r0, r3
 8003206:	f000 fa87 	bl	8003718 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	0018      	movs	r0, r3
 800320e:	f000 fa93 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2204      	movs	r2, #4
 8003220:	4013      	ands	r3, r2
 8003222:	2b04      	cmp	r3, #4
 8003224:	d125      	bne.n	8003272 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2204      	movs	r2, #4
 800322e:	4013      	ands	r3, r2
 8003230:	2b04      	cmp	r3, #4
 8003232:	d11e      	bne.n	8003272 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2205      	movs	r2, #5
 800323a:	4252      	negs	r2, r2
 800323c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2202      	movs	r2, #2
 8003242:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699a      	ldr	r2, [r3, #24]
 800324a:	23c0      	movs	r3, #192	; 0xc0
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4013      	ands	r3, r2
 8003250:	d004      	beq.n	800325c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	0018      	movs	r0, r3
 8003256:	f000 fa67 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 800325a:	e007      	b.n	800326c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	0018      	movs	r0, r3
 8003260:	f000 fa5a 	bl	8003718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	0018      	movs	r0, r3
 8003268:	f000 fa66 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	691b      	ldr	r3, [r3, #16]
 8003278:	2208      	movs	r2, #8
 800327a:	4013      	ands	r3, r2
 800327c:	2b08      	cmp	r3, #8
 800327e:	d124      	bne.n	80032ca <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2208      	movs	r2, #8
 8003288:	4013      	ands	r3, r2
 800328a:	2b08      	cmp	r3, #8
 800328c:	d11d      	bne.n	80032ca <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2209      	movs	r2, #9
 8003294:	4252      	negs	r2, r2
 8003296:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2204      	movs	r2, #4
 800329c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69db      	ldr	r3, [r3, #28]
 80032a4:	2203      	movs	r2, #3
 80032a6:	4013      	ands	r3, r2
 80032a8:	d004      	beq.n	80032b4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	0018      	movs	r0, r3
 80032ae:	f000 fa3b 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 80032b2:	e007      	b.n	80032c4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	0018      	movs	r0, r3
 80032b8:	f000 fa2e 	bl	8003718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	0018      	movs	r0, r3
 80032c0:	f000 fa3a 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	691b      	ldr	r3, [r3, #16]
 80032d0:	2210      	movs	r2, #16
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d125      	bne.n	8003324 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	2210      	movs	r2, #16
 80032e0:	4013      	ands	r3, r2
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d11e      	bne.n	8003324 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2211      	movs	r2, #17
 80032ec:	4252      	negs	r2, r2
 80032ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2208      	movs	r2, #8
 80032f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	69da      	ldr	r2, [r3, #28]
 80032fc:	23c0      	movs	r3, #192	; 0xc0
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4013      	ands	r3, r2
 8003302:	d004      	beq.n	800330e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	0018      	movs	r0, r3
 8003308:	f000 fa0e 	bl	8003728 <HAL_TIM_IC_CaptureCallback>
 800330c:	e007      	b.n	800331e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	0018      	movs	r0, r3
 8003312:	f000 fa01 	bl	8003718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f000 fa0d 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	2201      	movs	r2, #1
 800332c:	4013      	ands	r3, r2
 800332e:	2b01      	cmp	r3, #1
 8003330:	d10f      	bne.n	8003352 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2201      	movs	r2, #1
 800333a:	4013      	ands	r3, r2
 800333c:	2b01      	cmp	r3, #1
 800333e:	d108      	bne.n	8003352 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2202      	movs	r2, #2
 8003346:	4252      	negs	r2, r2
 8003348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	0018      	movs	r0, r3
 800334e:	f7fd fa0d 	bl	800076c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	2280      	movs	r2, #128	; 0x80
 800335a:	4013      	ands	r3, r2
 800335c:	2b80      	cmp	r3, #128	; 0x80
 800335e:	d10f      	bne.n	8003380 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	2280      	movs	r2, #128	; 0x80
 8003368:	4013      	ands	r3, r2
 800336a:	2b80      	cmp	r3, #128	; 0x80
 800336c:	d108      	bne.n	8003380 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2281      	movs	r2, #129	; 0x81
 8003374:	4252      	negs	r2, r2
 8003376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	0018      	movs	r0, r3
 800337c:	f000 fe70 	bl	8004060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2240      	movs	r2, #64	; 0x40
 8003388:	4013      	ands	r3, r2
 800338a:	2b40      	cmp	r3, #64	; 0x40
 800338c:	d10f      	bne.n	80033ae <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	2240      	movs	r2, #64	; 0x40
 8003396:	4013      	ands	r3, r2
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d108      	bne.n	80033ae <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2241      	movs	r2, #65	; 0x41
 80033a2:	4252      	negs	r2, r2
 80033a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f000 f9d5 	bl	8003758 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	2220      	movs	r2, #32
 80033b6:	4013      	ands	r3, r2
 80033b8:	2b20      	cmp	r3, #32
 80033ba:	d10f      	bne.n	80033dc <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	2220      	movs	r2, #32
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d108      	bne.n	80033dc <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2221      	movs	r2, #33	; 0x21
 80033d0:	4252      	negs	r2, r2
 80033d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 fe3a 	bl	8004050 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033dc:	46c0      	nop			; (mov r8, r8)
 80033de:	46bd      	mov	sp, r7
 80033e0:	b002      	add	sp, #8
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f0:	2317      	movs	r3, #23
 80033f2:	18fb      	adds	r3, r7, r3
 80033f4:	2200      	movs	r2, #0
 80033f6:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	223c      	movs	r2, #60	; 0x3c
 80033fc:	5c9b      	ldrb	r3, [r3, r2]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d101      	bne.n	8003406 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003402:	2302      	movs	r3, #2
 8003404:	e0ad      	b.n	8003562 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	223c      	movs	r2, #60	; 0x3c
 800340a:	2101      	movs	r1, #1
 800340c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2b0c      	cmp	r3, #12
 8003412:	d100      	bne.n	8003416 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003414:	e076      	b.n	8003504 <HAL_TIM_PWM_ConfigChannel+0x120>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b0c      	cmp	r3, #12
 800341a:	d900      	bls.n	800341e <HAL_TIM_PWM_ConfigChannel+0x3a>
 800341c:	e095      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x166>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b08      	cmp	r3, #8
 8003422:	d04e      	beq.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b08      	cmp	r3, #8
 8003428:	d900      	bls.n	800342c <HAL_TIM_PWM_ConfigChannel+0x48>
 800342a:	e08e      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x166>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_PWM_ConfigChannel+0x56>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b04      	cmp	r3, #4
 8003436:	d021      	beq.n	800347c <HAL_TIM_PWM_ConfigChannel+0x98>
 8003438:	e087      	b.n	800354a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68ba      	ldr	r2, [r7, #8]
 8003440:	0011      	movs	r1, r2
 8003442:	0018      	movs	r0, r3
 8003444:	f000 faec 	bl	8003a20 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2108      	movs	r1, #8
 8003454:	430a      	orrs	r2, r1
 8003456:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699a      	ldr	r2, [r3, #24]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	2104      	movs	r1, #4
 8003464:	438a      	bics	r2, r1
 8003466:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6999      	ldr	r1, [r3, #24]
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	619a      	str	r2, [r3, #24]
      break;
 800347a:	e06b      	b.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	68ba      	ldr	r2, [r7, #8]
 8003482:	0011      	movs	r1, r2
 8003484:	0018      	movs	r0, r3
 8003486:	f000 fb53 	bl	8003b30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699a      	ldr	r2, [r3, #24]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2180      	movs	r1, #128	; 0x80
 8003496:	0109      	lsls	r1, r1, #4
 8003498:	430a      	orrs	r2, r1
 800349a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	699a      	ldr	r2, [r3, #24]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4931      	ldr	r1, [pc, #196]	; (800356c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80034a8:	400a      	ands	r2, r1
 80034aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6999      	ldr	r1, [r3, #24]
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	021a      	lsls	r2, r3, #8
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	619a      	str	r2, [r3, #24]
      break;
 80034c0:	e048      	b.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	0011      	movs	r1, r2
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 fbb4 	bl	8003c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69da      	ldr	r2, [r3, #28]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2108      	movs	r1, #8
 80034dc:	430a      	orrs	r2, r1
 80034de:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	69da      	ldr	r2, [r3, #28]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2104      	movs	r1, #4
 80034ec:	438a      	bics	r2, r1
 80034ee:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69d9      	ldr	r1, [r3, #28]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	691a      	ldr	r2, [r3, #16]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	61da      	str	r2, [r3, #28]
      break;
 8003502:	e027      	b.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	0011      	movs	r1, r2
 800350c:	0018      	movs	r0, r3
 800350e:	f000 fc19 	bl	8003d44 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	69da      	ldr	r2, [r3, #28]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2180      	movs	r1, #128	; 0x80
 800351e:	0109      	lsls	r1, r1, #4
 8003520:	430a      	orrs	r2, r1
 8003522:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	69da      	ldr	r2, [r3, #28]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	490f      	ldr	r1, [pc, #60]	; (800356c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003530:	400a      	ands	r2, r1
 8003532:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	69d9      	ldr	r1, [r3, #28]
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	021a      	lsls	r2, r3, #8
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	61da      	str	r2, [r3, #28]
      break;
 8003548:	e004      	b.n	8003554 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800354a:	2317      	movs	r3, #23
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	2201      	movs	r2, #1
 8003550:	701a      	strb	r2, [r3, #0]
      break;
 8003552:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	223c      	movs	r2, #60	; 0x3c
 8003558:	2100      	movs	r1, #0
 800355a:	5499      	strb	r1, [r3, r2]

  return status;
 800355c:	2317      	movs	r3, #23
 800355e:	18fb      	adds	r3, r7, r3
 8003560:	781b      	ldrb	r3, [r3, #0]
}
 8003562:	0018      	movs	r0, r3
 8003564:	46bd      	mov	sp, r7
 8003566:	b006      	add	sp, #24
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			; (mov r8, r8)
 800356c:	fffffbff 	.word	0xfffffbff

08003570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	230f      	movs	r3, #15
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	2200      	movs	r2, #0
 8003580:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	223c      	movs	r2, #60	; 0x3c
 8003586:	5c9b      	ldrb	r3, [r3, r2]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_TIM_ConfigClockSource+0x20>
 800358c:	2302      	movs	r3, #2
 800358e:	e0bc      	b.n	800370a <HAL_TIM_ConfigClockSource+0x19a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	223c      	movs	r2, #60	; 0x3c
 8003594:	2101      	movs	r1, #1
 8003596:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	223d      	movs	r2, #61	; 0x3d
 800359c:	2102      	movs	r1, #2
 800359e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2277      	movs	r2, #119	; 0x77
 80035ac:	4393      	bics	r3, r2
 80035ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4a58      	ldr	r2, [pc, #352]	; (8003714 <HAL_TIM_ConfigClockSource+0x1a4>)
 80035b4:	4013      	ands	r3, r2
 80035b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2280      	movs	r2, #128	; 0x80
 80035c6:	0192      	lsls	r2, r2, #6
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d040      	beq.n	800364e <HAL_TIM_ConfigClockSource+0xde>
 80035cc:	2280      	movs	r2, #128	; 0x80
 80035ce:	0192      	lsls	r2, r2, #6
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d900      	bls.n	80035d6 <HAL_TIM_ConfigClockSource+0x66>
 80035d4:	e088      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 80035d6:	2280      	movs	r2, #128	; 0x80
 80035d8:	0152      	lsls	r2, r2, #5
 80035da:	4293      	cmp	r3, r2
 80035dc:	d100      	bne.n	80035e0 <HAL_TIM_ConfigClockSource+0x70>
 80035de:	e088      	b.n	80036f2 <HAL_TIM_ConfigClockSource+0x182>
 80035e0:	2280      	movs	r2, #128	; 0x80
 80035e2:	0152      	lsls	r2, r2, #5
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d900      	bls.n	80035ea <HAL_TIM_ConfigClockSource+0x7a>
 80035e8:	e07e      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 80035ea:	2b70      	cmp	r3, #112	; 0x70
 80035ec:	d018      	beq.n	8003620 <HAL_TIM_ConfigClockSource+0xb0>
 80035ee:	d900      	bls.n	80035f2 <HAL_TIM_ConfigClockSource+0x82>
 80035f0:	e07a      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 80035f2:	2b60      	cmp	r3, #96	; 0x60
 80035f4:	d04f      	beq.n	8003696 <HAL_TIM_ConfigClockSource+0x126>
 80035f6:	d900      	bls.n	80035fa <HAL_TIM_ConfigClockSource+0x8a>
 80035f8:	e076      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 80035fa:	2b50      	cmp	r3, #80	; 0x50
 80035fc:	d03b      	beq.n	8003676 <HAL_TIM_ConfigClockSource+0x106>
 80035fe:	d900      	bls.n	8003602 <HAL_TIM_ConfigClockSource+0x92>
 8003600:	e072      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 8003602:	2b40      	cmp	r3, #64	; 0x40
 8003604:	d057      	beq.n	80036b6 <HAL_TIM_ConfigClockSource+0x146>
 8003606:	d900      	bls.n	800360a <HAL_TIM_ConfigClockSource+0x9a>
 8003608:	e06e      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 800360a:	2b30      	cmp	r3, #48	; 0x30
 800360c:	d063      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x166>
 800360e:	d86b      	bhi.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 8003610:	2b20      	cmp	r3, #32
 8003612:	d060      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x166>
 8003614:	d868      	bhi.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
 8003616:	2b00      	cmp	r3, #0
 8003618:	d05d      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x166>
 800361a:	2b10      	cmp	r3, #16
 800361c:	d05b      	beq.n	80036d6 <HAL_TIM_ConfigClockSource+0x166>
 800361e:	e063      	b.n	80036e8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6818      	ldr	r0, [r3, #0]
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6899      	ldr	r1, [r3, #8]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f000 fc6c 	bl	8003f0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	2277      	movs	r2, #119	; 0x77
 8003640:	4313      	orrs	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]
      break;
 800364c:	e052      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6818      	ldr	r0, [r3, #0]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	6899      	ldr	r1, [r3, #8]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f000 fc55 	bl	8003f0c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2180      	movs	r1, #128	; 0x80
 800366e:	01c9      	lsls	r1, r1, #7
 8003670:	430a      	orrs	r2, r1
 8003672:	609a      	str	r2, [r3, #8]
      break;
 8003674:	e03e      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6818      	ldr	r0, [r3, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	6859      	ldr	r1, [r3, #4]
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	001a      	movs	r2, r3
 8003684:	f000 fbc8 	bl	8003e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2150      	movs	r1, #80	; 0x50
 800368e:	0018      	movs	r0, r3
 8003690:	f000 fc22 	bl	8003ed8 <TIM_ITRx_SetConfig>
      break;
 8003694:	e02e      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6818      	ldr	r0, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	6859      	ldr	r1, [r3, #4]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	001a      	movs	r2, r3
 80036a4:	f000 fbe6 	bl	8003e74 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2160      	movs	r1, #96	; 0x60
 80036ae:	0018      	movs	r0, r3
 80036b0:	f000 fc12 	bl	8003ed8 <TIM_ITRx_SetConfig>
      break;
 80036b4:	e01e      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6818      	ldr	r0, [r3, #0]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	68db      	ldr	r3, [r3, #12]
 80036c2:	001a      	movs	r2, r3
 80036c4:	f000 fba8 	bl	8003e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2140      	movs	r1, #64	; 0x40
 80036ce:	0018      	movs	r0, r3
 80036d0:	f000 fc02 	bl	8003ed8 <TIM_ITRx_SetConfig>
      break;
 80036d4:	e00e      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	0019      	movs	r1, r3
 80036e0:	0010      	movs	r0, r2
 80036e2:	f000 fbf9 	bl	8003ed8 <TIM_ITRx_SetConfig>
      break;
 80036e6:	e005      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80036e8:	230f      	movs	r3, #15
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
      break;
 80036f0:	e000      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80036f2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	223d      	movs	r2, #61	; 0x3d
 80036f8:	2101      	movs	r1, #1
 80036fa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	223c      	movs	r2, #60	; 0x3c
 8003700:	2100      	movs	r1, #0
 8003702:	5499      	strb	r1, [r3, r2]

  return status;
 8003704:	230f      	movs	r3, #15
 8003706:	18fb      	adds	r3, r7, r3
 8003708:	781b      	ldrb	r3, [r3, #0]
}
 800370a:	0018      	movs	r0, r3
 800370c:	46bd      	mov	sp, r7
 800370e:	b004      	add	sp, #16
 8003710:	bd80      	pop	{r7, pc}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	ffff00ff 	.word	0xffff00ff

08003718 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003720:	46c0      	nop			; (mov r8, r8)
 8003722:	46bd      	mov	sp, r7
 8003724:	b002      	add	sp, #8
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	46bd      	mov	sp, r7
 8003734:	b002      	add	sp, #8
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003740:	46c0      	nop			; (mov r8, r8)
 8003742:	46bd      	mov	sp, r7
 8003744:	b002      	add	sp, #8
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}

08003778 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003784:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	d107      	bne.n	80037a0 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	223e      	movs	r2, #62	; 0x3e
 800379a:	2101      	movs	r1, #1
 800379c:	5499      	strb	r1, [r3, r2]
 800379e:	e02a      	b.n	80037f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d107      	bne.n	80037ba <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2202      	movs	r2, #2
 80037ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	223f      	movs	r2, #63	; 0x3f
 80037b4:	2101      	movs	r1, #1
 80037b6:	5499      	strb	r1, [r3, r2]
 80037b8:	e01d      	b.n	80037f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d107      	bne.n	80037d4 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2204      	movs	r2, #4
 80037c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2240      	movs	r2, #64	; 0x40
 80037ce:	2101      	movs	r1, #1
 80037d0:	5499      	strb	r1, [r3, r2]
 80037d2:	e010      	b.n	80037f6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d107      	bne.n	80037ee <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2208      	movs	r2, #8
 80037e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2241      	movs	r2, #65	; 0x41
 80037e8:	2101      	movs	r1, #1
 80037ea:	5499      	strb	r1, [r3, r2]
 80037ec:	e003      	b.n	80037f6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	223d      	movs	r2, #61	; 0x3d
 80037f2:	2101      	movs	r1, #1
 80037f4:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	0018      	movs	r0, r3
 80037fa:	f7ff ffb5 	bl	8003768 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2200      	movs	r2, #0
 8003802:	771a      	strb	r2, [r3, #28]
}
 8003804:	46c0      	nop			; (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b004      	add	sp, #16
 800380a:	bd80      	pop	{r7, pc}

0800380c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003818:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	429a      	cmp	r2, r3
 8003822:	d10b      	bne.n	800383c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2201      	movs	r2, #1
 8003828:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	699b      	ldr	r3, [r3, #24]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d136      	bne.n	80038a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	223e      	movs	r2, #62	; 0x3e
 8003836:	2101      	movs	r1, #1
 8003838:	5499      	strb	r1, [r3, r2]
 800383a:	e031      	b.n	80038a0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	429a      	cmp	r2, r3
 8003844:	d10b      	bne.n	800385e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2202      	movs	r2, #2
 800384a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	699b      	ldr	r3, [r3, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d125      	bne.n	80038a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	223f      	movs	r2, #63	; 0x3f
 8003858:	2101      	movs	r1, #1
 800385a:	5499      	strb	r1, [r3, r2]
 800385c:	e020      	b.n	80038a0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	429a      	cmp	r2, r3
 8003866:	d10b      	bne.n	8003880 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2204      	movs	r2, #4
 800386c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d114      	bne.n	80038a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2240      	movs	r2, #64	; 0x40
 800387a:	2101      	movs	r1, #1
 800387c:	5499      	strb	r1, [r3, r2]
 800387e:	e00f      	b.n	80038a0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	429a      	cmp	r2, r3
 8003888:	d10a      	bne.n	80038a0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2208      	movs	r2, #8
 800388e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d103      	bne.n	80038a0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	2241      	movs	r2, #65	; 0x41
 800389c:	2101      	movs	r1, #1
 800389e:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7ff ff48 	bl	8003738 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	771a      	strb	r2, [r3, #28]
}
 80038ae:	46c0      	nop			; (mov r8, r8)
 80038b0:	46bd      	mov	sp, r7
 80038b2:	b004      	add	sp, #16
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b084      	sub	sp, #16
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d103      	bne.n	80038d6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	771a      	strb	r2, [r3, #28]
 80038d4:	e019      	b.n	800390a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	429a      	cmp	r2, r3
 80038de:	d103      	bne.n	80038e8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2202      	movs	r2, #2
 80038e4:	771a      	strb	r2, [r3, #28]
 80038e6:	e010      	b.n	800390a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d103      	bne.n	80038fa <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2204      	movs	r2, #4
 80038f6:	771a      	strb	r2, [r3, #28]
 80038f8:	e007      	b.n	800390a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	429a      	cmp	r2, r3
 8003902:	d102      	bne.n	800390a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2208      	movs	r2, #8
 8003908:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	0018      	movs	r0, r3
 800390e:	f7ff ff1b 	bl	8003748 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2200      	movs	r2, #0
 8003916:	771a      	strb	r2, [r3, #28]
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b004      	add	sp, #16
 800391e:	bd80      	pop	{r7, pc}

08003920 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a34      	ldr	r2, [pc, #208]	; (8003a04 <TIM_Base_SetConfig+0xe4>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d008      	beq.n	800394a <TIM_Base_SetConfig+0x2a>
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	05db      	lsls	r3, r3, #23
 800393e:	429a      	cmp	r2, r3
 8003940:	d003      	beq.n	800394a <TIM_Base_SetConfig+0x2a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a30      	ldr	r2, [pc, #192]	; (8003a08 <TIM_Base_SetConfig+0xe8>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d108      	bne.n	800395c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2270      	movs	r2, #112	; 0x70
 800394e:	4393      	bics	r3, r2
 8003950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	68fa      	ldr	r2, [r7, #12]
 8003958:	4313      	orrs	r3, r2
 800395a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a29      	ldr	r2, [pc, #164]	; (8003a04 <TIM_Base_SetConfig+0xe4>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d018      	beq.n	8003996 <TIM_Base_SetConfig+0x76>
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	2380      	movs	r3, #128	; 0x80
 8003968:	05db      	lsls	r3, r3, #23
 800396a:	429a      	cmp	r2, r3
 800396c:	d013      	beq.n	8003996 <TIM_Base_SetConfig+0x76>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	4a25      	ldr	r2, [pc, #148]	; (8003a08 <TIM_Base_SetConfig+0xe8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00f      	beq.n	8003996 <TIM_Base_SetConfig+0x76>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a24      	ldr	r2, [pc, #144]	; (8003a0c <TIM_Base_SetConfig+0xec>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d00b      	beq.n	8003996 <TIM_Base_SetConfig+0x76>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a23      	ldr	r2, [pc, #140]	; (8003a10 <TIM_Base_SetConfig+0xf0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d007      	beq.n	8003996 <TIM_Base_SetConfig+0x76>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a22      	ldr	r2, [pc, #136]	; (8003a14 <TIM_Base_SetConfig+0xf4>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d003      	beq.n	8003996 <TIM_Base_SetConfig+0x76>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a21      	ldr	r2, [pc, #132]	; (8003a18 <TIM_Base_SetConfig+0xf8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d108      	bne.n	80039a8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4a20      	ldr	r2, [pc, #128]	; (8003a1c <TIM_Base_SetConfig+0xfc>)
 800399a:	4013      	ands	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2280      	movs	r2, #128	; 0x80
 80039ac:	4393      	bics	r3, r2
 80039ae:	001a      	movs	r2, r3
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a0c      	ldr	r2, [pc, #48]	; (8003a04 <TIM_Base_SetConfig+0xe4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00b      	beq.n	80039ee <TIM_Base_SetConfig+0xce>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <TIM_Base_SetConfig+0xf0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d007      	beq.n	80039ee <TIM_Base_SetConfig+0xce>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a0c      	ldr	r2, [pc, #48]	; (8003a14 <TIM_Base_SetConfig+0xf4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d003      	beq.n	80039ee <TIM_Base_SetConfig+0xce>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a0b      	ldr	r2, [pc, #44]	; (8003a18 <TIM_Base_SetConfig+0xf8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d103      	bne.n	80039f6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	615a      	str	r2, [r3, #20]
}
 80039fc:	46c0      	nop			; (mov r8, r8)
 80039fe:	46bd      	mov	sp, r7
 8003a00:	b004      	add	sp, #16
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	40012c00 	.word	0x40012c00
 8003a08:	40000400 	.word	0x40000400
 8003a0c:	40002000 	.word	0x40002000
 8003a10:	40014000 	.word	0x40014000
 8003a14:	40014400 	.word	0x40014400
 8003a18:	40014800 	.word	0x40014800
 8003a1c:	fffffcff 	.word	0xfffffcff

08003a20 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6a1b      	ldr	r3, [r3, #32]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	4393      	bics	r3, r2
 8003a32:	001a      	movs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2270      	movs	r2, #112	; 0x70
 8003a4e:	4393      	bics	r3, r2
 8003a50:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2203      	movs	r2, #3
 8003a56:	4393      	bics	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	2202      	movs	r2, #2
 8003a68:	4393      	bics	r3, r2
 8003a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a27      	ldr	r2, [pc, #156]	; (8003b18 <TIM_OC1_SetConfig+0xf8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <TIM_OC1_SetConfig+0x76>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a26      	ldr	r2, [pc, #152]	; (8003b1c <TIM_OC1_SetConfig+0xfc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_OC1_SetConfig+0x76>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a25      	ldr	r2, [pc, #148]	; (8003b20 <TIM_OC1_SetConfig+0x100>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_OC1_SetConfig+0x76>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a24      	ldr	r2, [pc, #144]	; (8003b24 <TIM_OC1_SetConfig+0x104>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d10c      	bne.n	8003ab0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	2208      	movs	r2, #8
 8003a9a:	4393      	bics	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2204      	movs	r2, #4
 8003aac:	4393      	bics	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <TIM_OC1_SetConfig+0xf8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d00b      	beq.n	8003ad0 <TIM_OC1_SetConfig+0xb0>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a18      	ldr	r2, [pc, #96]	; (8003b1c <TIM_OC1_SetConfig+0xfc>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d007      	beq.n	8003ad0 <TIM_OC1_SetConfig+0xb0>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a17      	ldr	r2, [pc, #92]	; (8003b20 <TIM_OC1_SetConfig+0x100>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d003      	beq.n	8003ad0 <TIM_OC1_SetConfig+0xb0>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a16      	ldr	r2, [pc, #88]	; (8003b24 <TIM_OC1_SetConfig+0x104>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d111      	bne.n	8003af4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <TIM_OC1_SetConfig+0x108>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	4a14      	ldr	r2, [pc, #80]	; (8003b2c <TIM_OC1_SetConfig+0x10c>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	695b      	ldr	r3, [r3, #20]
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	4313      	orrs	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	46c0      	nop			; (mov r8, r8)
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b006      	add	sp, #24
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40014000 	.word	0x40014000
 8003b20:	40014400 	.word	0x40014400
 8003b24:	40014800 	.word	0x40014800
 8003b28:	fffffeff 	.word	0xfffffeff
 8003b2c:	fffffdff 	.word	0xfffffdff

08003b30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a1b      	ldr	r3, [r3, #32]
 8003b3e:	2210      	movs	r2, #16
 8003b40:	4393      	bics	r3, r2
 8003b42:	001a      	movs	r2, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	4a2e      	ldr	r2, [pc, #184]	; (8003c18 <TIM_OC2_SetConfig+0xe8>)
 8003b5e:	4013      	ands	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4a2d      	ldr	r2, [pc, #180]	; (8003c1c <TIM_OC2_SetConfig+0xec>)
 8003b66:	4013      	ands	r3, r2
 8003b68:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	021b      	lsls	r3, r3, #8
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	4393      	bics	r3, r2
 8003b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a24      	ldr	r2, [pc, #144]	; (8003c20 <TIM_OC2_SetConfig+0xf0>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d10d      	bne.n	8003bae <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2280      	movs	r2, #128	; 0x80
 8003b96:	4393      	bics	r3, r2
 8003b98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2240      	movs	r2, #64	; 0x40
 8003baa:	4393      	bics	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <TIM_OC2_SetConfig+0xf0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00b      	beq.n	8003bce <TIM_OC2_SetConfig+0x9e>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <TIM_OC2_SetConfig+0xf4>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <TIM_OC2_SetConfig+0x9e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a19      	ldr	r2, [pc, #100]	; (8003c28 <TIM_OC2_SetConfig+0xf8>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_OC2_SetConfig+0x9e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <TIM_OC2_SetConfig+0xfc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d113      	bne.n	8003bf6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4a17      	ldr	r2, [pc, #92]	; (8003c30 <TIM_OC2_SetConfig+0x100>)
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <TIM_OC2_SetConfig+0x104>)
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	699b      	ldr	r3, [r3, #24]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	621a      	str	r2, [r3, #32]
}
 8003c10:	46c0      	nop			; (mov r8, r8)
 8003c12:	46bd      	mov	sp, r7
 8003c14:	b006      	add	sp, #24
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	ffff8fff 	.word	0xffff8fff
 8003c1c:	fffffcff 	.word	0xfffffcff
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40014000 	.word	0x40014000
 8003c28:	40014400 	.word	0x40014400
 8003c2c:	40014800 	.word	0x40014800
 8003c30:	fffffbff 	.word	0xfffffbff
 8003c34:	fffff7ff 	.word	0xfffff7ff

08003c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b086      	sub	sp, #24
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a1b      	ldr	r3, [r3, #32]
 8003c46:	4a35      	ldr	r2, [pc, #212]	; (8003d1c <TIM_OC3_SetConfig+0xe4>)
 8003c48:	401a      	ands	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a1b      	ldr	r3, [r3, #32]
 8003c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2270      	movs	r2, #112	; 0x70
 8003c64:	4393      	bics	r3, r2
 8003c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2203      	movs	r2, #3
 8003c6c:	4393      	bics	r3, r2
 8003c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68fa      	ldr	r2, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	4a28      	ldr	r2, [pc, #160]	; (8003d20 <TIM_OC3_SetConfig+0xe8>)
 8003c7e:	4013      	ands	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	021b      	lsls	r3, r3, #8
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a24      	ldr	r2, [pc, #144]	; (8003d24 <TIM_OC3_SetConfig+0xec>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10d      	bne.n	8003cb2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <TIM_OC3_SetConfig+0xf0>)
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	021b      	lsls	r3, r3, #8
 8003ca4:	697a      	ldr	r2, [r7, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4a1f      	ldr	r2, [pc, #124]	; (8003d2c <TIM_OC3_SetConfig+0xf4>)
 8003cae:	4013      	ands	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <TIM_OC3_SetConfig+0xec>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00b      	beq.n	8003cd2 <TIM_OC3_SetConfig+0x9a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a1c      	ldr	r2, [pc, #112]	; (8003d30 <TIM_OC3_SetConfig+0xf8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <TIM_OC3_SetConfig+0x9a>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1b      	ldr	r2, [pc, #108]	; (8003d34 <TIM_OC3_SetConfig+0xfc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d003      	beq.n	8003cd2 <TIM_OC3_SetConfig+0x9a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1a      	ldr	r2, [pc, #104]	; (8003d38 <TIM_OC3_SetConfig+0x100>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d113      	bne.n	8003cfa <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4a19      	ldr	r2, [pc, #100]	; (8003d3c <TIM_OC3_SetConfig+0x104>)
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4a18      	ldr	r2, [pc, #96]	; (8003d40 <TIM_OC3_SetConfig+0x108>)
 8003cde:	4013      	ands	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	693a      	ldr	r2, [r7, #16]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	685a      	ldr	r2, [r3, #4]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	621a      	str	r2, [r3, #32]
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b006      	add	sp, #24
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	fffffeff 	.word	0xfffffeff
 8003d20:	fffffdff 	.word	0xfffffdff
 8003d24:	40012c00 	.word	0x40012c00
 8003d28:	fffff7ff 	.word	0xfffff7ff
 8003d2c:	fffffbff 	.word	0xfffffbff
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800
 8003d3c:	ffffefff 	.word	0xffffefff
 8003d40:	ffffdfff 	.word	0xffffdfff

08003d44 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	4a28      	ldr	r2, [pc, #160]	; (8003df4 <TIM_OC4_SetConfig+0xb0>)
 8003d54:	401a      	ands	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a1b      	ldr	r3, [r3, #32]
 8003d5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4a22      	ldr	r2, [pc, #136]	; (8003df8 <TIM_OC4_SetConfig+0xb4>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4a21      	ldr	r2, [pc, #132]	; (8003dfc <TIM_OC4_SetConfig+0xb8>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	68fa      	ldr	r2, [r7, #12]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <TIM_OC4_SetConfig+0xbc>)
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	031b      	lsls	r3, r3, #12
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4a19      	ldr	r2, [pc, #100]	; (8003e04 <TIM_OC4_SetConfig+0xc0>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d00b      	beq.n	8003dbc <TIM_OC4_SetConfig+0x78>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a18      	ldr	r2, [pc, #96]	; (8003e08 <TIM_OC4_SetConfig+0xc4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d007      	beq.n	8003dbc <TIM_OC4_SetConfig+0x78>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a17      	ldr	r2, [pc, #92]	; (8003e0c <TIM_OC4_SetConfig+0xc8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d003      	beq.n	8003dbc <TIM_OC4_SetConfig+0x78>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a16      	ldr	r2, [pc, #88]	; (8003e10 <TIM_OC4_SetConfig+0xcc>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d109      	bne.n	8003dd0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4a15      	ldr	r2, [pc, #84]	; (8003e14 <TIM_OC4_SetConfig+0xd0>)
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	019b      	lsls	r3, r3, #6
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685a      	ldr	r2, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	621a      	str	r2, [r3, #32]
}
 8003dea:	46c0      	nop			; (mov r8, r8)
 8003dec:	46bd      	mov	sp, r7
 8003dee:	b006      	add	sp, #24
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	46c0      	nop			; (mov r8, r8)
 8003df4:	ffffefff 	.word	0xffffefff
 8003df8:	ffff8fff 	.word	0xffff8fff
 8003dfc:	fffffcff 	.word	0xfffffcff
 8003e00:	ffffdfff 	.word	0xffffdfff
 8003e04:	40012c00 	.word	0x40012c00
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40014400 	.word	0x40014400
 8003e10:	40014800 	.word	0x40014800
 8003e14:	ffffbfff 	.word	0xffffbfff

08003e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b086      	sub	sp, #24
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	60f8      	str	r0, [r7, #12]
 8003e20:	60b9      	str	r1, [r7, #8]
 8003e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6a1b      	ldr	r3, [r3, #32]
 8003e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	4393      	bics	r3, r2
 8003e32:	001a      	movs	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	22f0      	movs	r2, #240	; 0xf0
 8003e42:	4393      	bics	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	220a      	movs	r2, #10
 8003e54:	4393      	bics	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	621a      	str	r2, [r3, #32]
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b006      	add	sp, #24
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	60f8      	str	r0, [r7, #12]
 8003e7c:	60b9      	str	r1, [r7, #8]
 8003e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	2210      	movs	r2, #16
 8003e86:	4393      	bics	r3, r2
 8003e88:	001a      	movs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	4a0d      	ldr	r2, [pc, #52]	; (8003ed4 <TIM_TI2_ConfigInputStage+0x60>)
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	031b      	lsls	r3, r3, #12
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	22a0      	movs	r2, #160	; 0xa0
 8003eb0:	4393      	bics	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	011b      	lsls	r3, r3, #4
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	621a      	str	r2, [r3, #32]
}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	b006      	add	sp, #24
 8003ed0:	bd80      	pop	{r7, pc}
 8003ed2:	46c0      	nop			; (mov r8, r8)
 8003ed4:	ffff0fff 	.word	0xffff0fff

08003ed8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2270      	movs	r2, #112	; 0x70
 8003eec:	4393      	bics	r3, r2
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	2207      	movs	r2, #7
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	609a      	str	r2, [r3, #8]
}
 8003f02:	46c0      	nop			; (mov r8, r8)
 8003f04:	46bd      	mov	sp, r7
 8003f06:	b004      	add	sp, #16
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	689b      	ldr	r3, [r3, #8]
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	4a09      	ldr	r2, [pc, #36]	; (8003f48 <TIM_ETR_SetConfig+0x3c>)
 8003f24:	4013      	ands	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	021a      	lsls	r2, r3, #8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	431a      	orrs	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4313      	orrs	r3, r2
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	609a      	str	r2, [r3, #8]
}
 8003f40:	46c0      	nop			; (mov r8, r8)
 8003f42:	46bd      	mov	sp, r7
 8003f44:	b006      	add	sp, #24
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	ffff00ff 	.word	0xffff00ff

08003f4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	221f      	movs	r2, #31
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	2201      	movs	r2, #1
 8003f60:	409a      	lsls	r2, r3
 8003f62:	0013      	movs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	43d2      	mvns	r2, r2
 8003f6e:	401a      	ands	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6a1a      	ldr	r2, [r3, #32]
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	211f      	movs	r1, #31
 8003f7c:	400b      	ands	r3, r1
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4099      	lsls	r1, r3
 8003f82:	000b      	movs	r3, r1
 8003f84:	431a      	orrs	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	621a      	str	r2, [r3, #32]
}
 8003f8a:	46c0      	nop			; (mov r8, r8)
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b006      	add	sp, #24
 8003f90:	bd80      	pop	{r7, pc}
	...

08003f94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
 8003f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	223c      	movs	r2, #60	; 0x3c
 8003fa2:	5c9b      	ldrb	r3, [r3, r2]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e047      	b.n	800403c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	223c      	movs	r2, #60	; 0x3c
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	223d      	movs	r2, #61	; 0x3d
 8003fb8:	2102      	movs	r1, #2
 8003fba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2270      	movs	r2, #112	; 0x70
 8003fd0:	4393      	bics	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a16      	ldr	r2, [pc, #88]	; (8004044 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00f      	beq.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	2380      	movs	r3, #128	; 0x80
 8003ff6:	05db      	lsls	r3, r3, #23
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d009      	beq.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a11      	ldr	r2, [pc, #68]	; (8004048 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d004      	beq.n	8004010 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a10      	ldr	r2, [pc, #64]	; (800404c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d10c      	bne.n	800402a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	2280      	movs	r2, #128	; 0x80
 8004014:	4393      	bics	r3, r2
 8004016:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	4313      	orrs	r3, r2
 8004020:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	223d      	movs	r2, #61	; 0x3d
 800402e:	2101      	movs	r1, #1
 8004030:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	223c      	movs	r2, #60	; 0x3c
 8004036:	2100      	movs	r1, #0
 8004038:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	b004      	add	sp, #16
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40012c00 	.word	0x40012c00
 8004048:	40000400 	.word	0x40000400
 800404c:	40014000 	.word	0x40014000

08004050 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	46bd      	mov	sp, r7
 800405c:	b002      	add	sp, #8
 800405e:	bd80      	pop	{r7, pc}

08004060 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004068:	46c0      	nop			; (mov r8, r8)
 800406a:	46bd      	mov	sp, r7
 800406c:	b002      	add	sp, #8
 800406e:	bd80      	pop	{r7, pc}

08004070 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e044      	b.n	800410c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004086:	2b00      	cmp	r3, #0
 8004088:	d107      	bne.n	800409a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2274      	movs	r2, #116	; 0x74
 800408e:	2100      	movs	r1, #0
 8004090:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	0018      	movs	r0, r3
 8004096:	f7fd f9b3 	bl	8001400 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2224      	movs	r2, #36	; 0x24
 800409e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2101      	movs	r1, #1
 80040ac:	438a      	bics	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	0018      	movs	r0, r3
 80040b4:	f000 f8da 	bl	800426c <UART_SetConfig>
 80040b8:	0003      	movs	r3, r0
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d101      	bne.n	80040c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e024      	b.n	800410c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	0018      	movs	r0, r3
 80040ce:	f000 fab5 	bl	800463c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	490d      	ldr	r1, [pc, #52]	; (8004114 <HAL_UART_Init+0xa4>)
 80040de:	400a      	ands	r2, r1
 80040e0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	689a      	ldr	r2, [r3, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	212a      	movs	r1, #42	; 0x2a
 80040ee:	438a      	bics	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2101      	movs	r1, #1
 80040fe:	430a      	orrs	r2, r1
 8004100:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	0018      	movs	r0, r3
 8004106:	f000 fb4d 	bl	80047a4 <UART_CheckIdleState>
 800410a:	0003      	movs	r3, r0
}
 800410c:	0018      	movs	r0, r3
 800410e:	46bd      	mov	sp, r7
 8004110:	b002      	add	sp, #8
 8004112:	bd80      	pop	{r7, pc}
 8004114:	ffffb7ff 	.word	0xffffb7ff

08004118 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b08a      	sub	sp, #40	; 0x28
 800411c:	af02      	add	r7, sp, #8
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	603b      	str	r3, [r7, #0]
 8004124:	1dbb      	adds	r3, r7, #6
 8004126:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412c:	2b20      	cmp	r3, #32
 800412e:	d000      	beq.n	8004132 <HAL_UART_Transmit+0x1a>
 8004130:	e096      	b.n	8004260 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_UART_Transmit+0x28>
 8004138:	1dbb      	adds	r3, r7, #6
 800413a:	881b      	ldrh	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e08e      	b.n	8004262 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689a      	ldr	r2, [r3, #8]
 8004148:	2380      	movs	r3, #128	; 0x80
 800414a:	015b      	lsls	r3, r3, #5
 800414c:	429a      	cmp	r2, r3
 800414e:	d109      	bne.n	8004164 <HAL_UART_Transmit+0x4c>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2201      	movs	r2, #1
 800415c:	4013      	ands	r3, r2
 800415e:	d001      	beq.n	8004164 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e07e      	b.n	8004262 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2274      	movs	r2, #116	; 0x74
 8004168:	5c9b      	ldrb	r3, [r3, r2]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d101      	bne.n	8004172 <HAL_UART_Transmit+0x5a>
 800416e:	2302      	movs	r3, #2
 8004170:	e077      	b.n	8004262 <HAL_UART_Transmit+0x14a>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2274      	movs	r2, #116	; 0x74
 8004176:	2101      	movs	r1, #1
 8004178:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2280      	movs	r2, #128	; 0x80
 800417e:	2100      	movs	r1, #0
 8004180:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2221      	movs	r2, #33	; 0x21
 8004186:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004188:	f7fd fa0c 	bl	80015a4 <HAL_GetTick>
 800418c:	0003      	movs	r3, r0
 800418e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1dba      	adds	r2, r7, #6
 8004194:	2150      	movs	r1, #80	; 0x50
 8004196:	8812      	ldrh	r2, [r2, #0]
 8004198:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	1dba      	adds	r2, r7, #6
 800419e:	2152      	movs	r1, #82	; 0x52
 80041a0:	8812      	ldrh	r2, [r2, #0]
 80041a2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	689a      	ldr	r2, [r3, #8]
 80041a8:	2380      	movs	r3, #128	; 0x80
 80041aa:	015b      	lsls	r3, r3, #5
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d108      	bne.n	80041c2 <HAL_UART_Transmit+0xaa>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d104      	bne.n	80041c2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	e003      	b.n	80041ca <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2274      	movs	r2, #116	; 0x74
 80041ce:	2100      	movs	r1, #0
 80041d0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80041d2:	e02d      	b.n	8004230 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	0013      	movs	r3, r2
 80041de:	2200      	movs	r2, #0
 80041e0:	2180      	movs	r1, #128	; 0x80
 80041e2:	f000 fb27 	bl	8004834 <UART_WaitOnFlagUntilTimeout>
 80041e6:	1e03      	subs	r3, r0, #0
 80041e8:	d001      	beq.n	80041ee <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e039      	b.n	8004262 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10b      	bne.n	800420c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	881a      	ldrh	r2, [r3, #0]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	05d2      	lsls	r2, r2, #23
 80041fe:	0dd2      	lsrs	r2, r2, #23
 8004200:	b292      	uxth	r2, r2
 8004202:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	3302      	adds	r3, #2
 8004208:	61bb      	str	r3, [r7, #24]
 800420a:	e008      	b.n	800421e <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	781a      	ldrb	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	b292      	uxth	r2, r2
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	3301      	adds	r3, #1
 800421c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2252      	movs	r2, #82	; 0x52
 8004222:	5a9b      	ldrh	r3, [r3, r2]
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b299      	uxth	r1, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2252      	movs	r2, #82	; 0x52
 800422e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2252      	movs	r2, #82	; 0x52
 8004234:	5a9b      	ldrh	r3, [r3, r2]
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1cb      	bne.n	80041d4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	0013      	movs	r3, r2
 8004246:	2200      	movs	r2, #0
 8004248:	2140      	movs	r1, #64	; 0x40
 800424a:	f000 faf3 	bl	8004834 <UART_WaitOnFlagUntilTimeout>
 800424e:	1e03      	subs	r3, r0, #0
 8004250:	d001      	beq.n	8004256 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e005      	b.n	8004262 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2220      	movs	r2, #32
 800425a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800425c:	2300      	movs	r3, #0
 800425e:	e000      	b.n	8004262 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004260:	2302      	movs	r3, #2
  }
}
 8004262:	0018      	movs	r0, r3
 8004264:	46bd      	mov	sp, r7
 8004266:	b008      	add	sp, #32
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004274:	231e      	movs	r3, #30
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689a      	ldr	r2, [r3, #8]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	431a      	orrs	r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4abe      	ldr	r2, [pc, #760]	; (8004594 <UART_SetConfig+0x328>)
 800429c:	4013      	ands	r3, r2
 800429e:	0019      	movs	r1, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	4ab9      	ldr	r2, [pc, #740]	; (8004598 <UART_SetConfig+0x32c>)
 80042b2:	4013      	ands	r3, r2
 80042b4:	0019      	movs	r1, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68da      	ldr	r2, [r3, #12]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	430a      	orrs	r2, r1
 80042c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	4ab0      	ldr	r2, [pc, #704]	; (800459c <UART_SetConfig+0x330>)
 80042da:	4013      	ands	r3, r2
 80042dc:	0019      	movs	r1, r3
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	430a      	orrs	r2, r1
 80042e6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4aac      	ldr	r2, [pc, #688]	; (80045a0 <UART_SetConfig+0x334>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d127      	bne.n	8004342 <UART_SetConfig+0xd6>
 80042f2:	4bac      	ldr	r3, [pc, #688]	; (80045a4 <UART_SetConfig+0x338>)
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	2203      	movs	r2, #3
 80042f8:	4013      	ands	r3, r2
 80042fa:	2b03      	cmp	r3, #3
 80042fc:	d00d      	beq.n	800431a <UART_SetConfig+0xae>
 80042fe:	d81b      	bhi.n	8004338 <UART_SetConfig+0xcc>
 8004300:	2b02      	cmp	r3, #2
 8004302:	d014      	beq.n	800432e <UART_SetConfig+0xc2>
 8004304:	d818      	bhi.n	8004338 <UART_SetConfig+0xcc>
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <UART_SetConfig+0xa4>
 800430a:	2b01      	cmp	r3, #1
 800430c:	d00a      	beq.n	8004324 <UART_SetConfig+0xb8>
 800430e:	e013      	b.n	8004338 <UART_SetConfig+0xcc>
 8004310:	231f      	movs	r3, #31
 8004312:	18fb      	adds	r3, r7, r3
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	e0bd      	b.n	8004496 <UART_SetConfig+0x22a>
 800431a:	231f      	movs	r3, #31
 800431c:	18fb      	adds	r3, r7, r3
 800431e:	2202      	movs	r2, #2
 8004320:	701a      	strb	r2, [r3, #0]
 8004322:	e0b8      	b.n	8004496 <UART_SetConfig+0x22a>
 8004324:	231f      	movs	r3, #31
 8004326:	18fb      	adds	r3, r7, r3
 8004328:	2204      	movs	r2, #4
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	e0b3      	b.n	8004496 <UART_SetConfig+0x22a>
 800432e:	231f      	movs	r3, #31
 8004330:	18fb      	adds	r3, r7, r3
 8004332:	2208      	movs	r2, #8
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e0ae      	b.n	8004496 <UART_SetConfig+0x22a>
 8004338:	231f      	movs	r3, #31
 800433a:	18fb      	adds	r3, r7, r3
 800433c:	2210      	movs	r2, #16
 800433e:	701a      	strb	r2, [r3, #0]
 8004340:	e0a9      	b.n	8004496 <UART_SetConfig+0x22a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a98      	ldr	r2, [pc, #608]	; (80045a8 <UART_SetConfig+0x33c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d134      	bne.n	80043b6 <UART_SetConfig+0x14a>
 800434c:	4b95      	ldr	r3, [pc, #596]	; (80045a4 <UART_SetConfig+0x338>)
 800434e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004350:	23c0      	movs	r3, #192	; 0xc0
 8004352:	029b      	lsls	r3, r3, #10
 8004354:	4013      	ands	r3, r2
 8004356:	22c0      	movs	r2, #192	; 0xc0
 8004358:	0292      	lsls	r2, r2, #10
 800435a:	4293      	cmp	r3, r2
 800435c:	d017      	beq.n	800438e <UART_SetConfig+0x122>
 800435e:	22c0      	movs	r2, #192	; 0xc0
 8004360:	0292      	lsls	r2, r2, #10
 8004362:	4293      	cmp	r3, r2
 8004364:	d822      	bhi.n	80043ac <UART_SetConfig+0x140>
 8004366:	2280      	movs	r2, #128	; 0x80
 8004368:	0292      	lsls	r2, r2, #10
 800436a:	4293      	cmp	r3, r2
 800436c:	d019      	beq.n	80043a2 <UART_SetConfig+0x136>
 800436e:	2280      	movs	r2, #128	; 0x80
 8004370:	0292      	lsls	r2, r2, #10
 8004372:	4293      	cmp	r3, r2
 8004374:	d81a      	bhi.n	80043ac <UART_SetConfig+0x140>
 8004376:	2b00      	cmp	r3, #0
 8004378:	d004      	beq.n	8004384 <UART_SetConfig+0x118>
 800437a:	2280      	movs	r2, #128	; 0x80
 800437c:	0252      	lsls	r2, r2, #9
 800437e:	4293      	cmp	r3, r2
 8004380:	d00a      	beq.n	8004398 <UART_SetConfig+0x12c>
 8004382:	e013      	b.n	80043ac <UART_SetConfig+0x140>
 8004384:	231f      	movs	r3, #31
 8004386:	18fb      	adds	r3, r7, r3
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
 800438c:	e083      	b.n	8004496 <UART_SetConfig+0x22a>
 800438e:	231f      	movs	r3, #31
 8004390:	18fb      	adds	r3, r7, r3
 8004392:	2202      	movs	r2, #2
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	e07e      	b.n	8004496 <UART_SetConfig+0x22a>
 8004398:	231f      	movs	r3, #31
 800439a:	18fb      	adds	r3, r7, r3
 800439c:	2204      	movs	r2, #4
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e079      	b.n	8004496 <UART_SetConfig+0x22a>
 80043a2:	231f      	movs	r3, #31
 80043a4:	18fb      	adds	r3, r7, r3
 80043a6:	2208      	movs	r2, #8
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e074      	b.n	8004496 <UART_SetConfig+0x22a>
 80043ac:	231f      	movs	r3, #31
 80043ae:	18fb      	adds	r3, r7, r3
 80043b0:	2210      	movs	r2, #16
 80043b2:	701a      	strb	r2, [r3, #0]
 80043b4:	e06f      	b.n	8004496 <UART_SetConfig+0x22a>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a7c      	ldr	r2, [pc, #496]	; (80045ac <UART_SetConfig+0x340>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d134      	bne.n	800442a <UART_SetConfig+0x1be>
 80043c0:	4b78      	ldr	r3, [pc, #480]	; (80045a4 <UART_SetConfig+0x338>)
 80043c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c4:	23c0      	movs	r3, #192	; 0xc0
 80043c6:	031b      	lsls	r3, r3, #12
 80043c8:	4013      	ands	r3, r2
 80043ca:	22c0      	movs	r2, #192	; 0xc0
 80043cc:	0312      	lsls	r2, r2, #12
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d017      	beq.n	8004402 <UART_SetConfig+0x196>
 80043d2:	22c0      	movs	r2, #192	; 0xc0
 80043d4:	0312      	lsls	r2, r2, #12
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d822      	bhi.n	8004420 <UART_SetConfig+0x1b4>
 80043da:	2280      	movs	r2, #128	; 0x80
 80043dc:	0312      	lsls	r2, r2, #12
 80043de:	4293      	cmp	r3, r2
 80043e0:	d019      	beq.n	8004416 <UART_SetConfig+0x1aa>
 80043e2:	2280      	movs	r2, #128	; 0x80
 80043e4:	0312      	lsls	r2, r2, #12
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d81a      	bhi.n	8004420 <UART_SetConfig+0x1b4>
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d004      	beq.n	80043f8 <UART_SetConfig+0x18c>
 80043ee:	2280      	movs	r2, #128	; 0x80
 80043f0:	02d2      	lsls	r2, r2, #11
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00a      	beq.n	800440c <UART_SetConfig+0x1a0>
 80043f6:	e013      	b.n	8004420 <UART_SetConfig+0x1b4>
 80043f8:	231f      	movs	r3, #31
 80043fa:	18fb      	adds	r3, r7, r3
 80043fc:	2200      	movs	r2, #0
 80043fe:	701a      	strb	r2, [r3, #0]
 8004400:	e049      	b.n	8004496 <UART_SetConfig+0x22a>
 8004402:	231f      	movs	r3, #31
 8004404:	18fb      	adds	r3, r7, r3
 8004406:	2202      	movs	r2, #2
 8004408:	701a      	strb	r2, [r3, #0]
 800440a:	e044      	b.n	8004496 <UART_SetConfig+0x22a>
 800440c:	231f      	movs	r3, #31
 800440e:	18fb      	adds	r3, r7, r3
 8004410:	2204      	movs	r2, #4
 8004412:	701a      	strb	r2, [r3, #0]
 8004414:	e03f      	b.n	8004496 <UART_SetConfig+0x22a>
 8004416:	231f      	movs	r3, #31
 8004418:	18fb      	adds	r3, r7, r3
 800441a:	2208      	movs	r2, #8
 800441c:	701a      	strb	r2, [r3, #0]
 800441e:	e03a      	b.n	8004496 <UART_SetConfig+0x22a>
 8004420:	231f      	movs	r3, #31
 8004422:	18fb      	adds	r3, r7, r3
 8004424:	2210      	movs	r2, #16
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	e035      	b.n	8004496 <UART_SetConfig+0x22a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a60      	ldr	r2, [pc, #384]	; (80045b0 <UART_SetConfig+0x344>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d104      	bne.n	800443e <UART_SetConfig+0x1d2>
 8004434:	231f      	movs	r3, #31
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
 800443c:	e02b      	b.n	8004496 <UART_SetConfig+0x22a>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a5c      	ldr	r2, [pc, #368]	; (80045b4 <UART_SetConfig+0x348>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d104      	bne.n	8004452 <UART_SetConfig+0x1e6>
 8004448:	231f      	movs	r3, #31
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	e021      	b.n	8004496 <UART_SetConfig+0x22a>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a58      	ldr	r2, [pc, #352]	; (80045b8 <UART_SetConfig+0x34c>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d104      	bne.n	8004466 <UART_SetConfig+0x1fa>
 800445c:	231f      	movs	r3, #31
 800445e:	18fb      	adds	r3, r7, r3
 8004460:	2200      	movs	r2, #0
 8004462:	701a      	strb	r2, [r3, #0]
 8004464:	e017      	b.n	8004496 <UART_SetConfig+0x22a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4a54      	ldr	r2, [pc, #336]	; (80045bc <UART_SetConfig+0x350>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d104      	bne.n	800447a <UART_SetConfig+0x20e>
 8004470:	231f      	movs	r3, #31
 8004472:	18fb      	adds	r3, r7, r3
 8004474:	2200      	movs	r2, #0
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e00d      	b.n	8004496 <UART_SetConfig+0x22a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a50      	ldr	r2, [pc, #320]	; (80045c0 <UART_SetConfig+0x354>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d104      	bne.n	800448e <UART_SetConfig+0x222>
 8004484:	231f      	movs	r3, #31
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	2200      	movs	r2, #0
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e003      	b.n	8004496 <UART_SetConfig+0x22a>
 800448e:	231f      	movs	r3, #31
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2210      	movs	r2, #16
 8004494:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69da      	ldr	r2, [r3, #28]
 800449a:	2380      	movs	r3, #128	; 0x80
 800449c:	021b      	lsls	r3, r3, #8
 800449e:	429a      	cmp	r2, r3
 80044a0:	d15d      	bne.n	800455e <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80044a2:	231f      	movs	r3, #31
 80044a4:	18fb      	adds	r3, r7, r3
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b08      	cmp	r3, #8
 80044aa:	d015      	beq.n	80044d8 <UART_SetConfig+0x26c>
 80044ac:	dc18      	bgt.n	80044e0 <UART_SetConfig+0x274>
 80044ae:	2b04      	cmp	r3, #4
 80044b0:	d00d      	beq.n	80044ce <UART_SetConfig+0x262>
 80044b2:	dc15      	bgt.n	80044e0 <UART_SetConfig+0x274>
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d002      	beq.n	80044be <UART_SetConfig+0x252>
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d005      	beq.n	80044c8 <UART_SetConfig+0x25c>
 80044bc:	e010      	b.n	80044e0 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044be:	f7fe f9d5 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 80044c2:	0003      	movs	r3, r0
 80044c4:	61bb      	str	r3, [r7, #24]
        break;
 80044c6:	e012      	b.n	80044ee <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044c8:	4b3e      	ldr	r3, [pc, #248]	; (80045c4 <UART_SetConfig+0x358>)
 80044ca:	61bb      	str	r3, [r7, #24]
        break;
 80044cc:	e00f      	b.n	80044ee <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ce:	f7fe f943 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 80044d2:	0003      	movs	r3, r0
 80044d4:	61bb      	str	r3, [r7, #24]
        break;
 80044d6:	e00a      	b.n	80044ee <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044d8:	2380      	movs	r3, #128	; 0x80
 80044da:	021b      	lsls	r3, r3, #8
 80044dc:	61bb      	str	r3, [r7, #24]
        break;
 80044de:	e006      	b.n	80044ee <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80044e0:	2300      	movs	r3, #0
 80044e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80044e4:	231e      	movs	r3, #30
 80044e6:	18fb      	adds	r3, r7, r3
 80044e8:	2201      	movs	r2, #1
 80044ea:	701a      	strb	r2, [r3, #0]
        break;
 80044ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d100      	bne.n	80044f6 <UART_SetConfig+0x28a>
 80044f4:	e095      	b.n	8004622 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	005a      	lsls	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	18d2      	adds	r2, r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	0019      	movs	r1, r3
 8004508:	0010      	movs	r0, r2
 800450a:	f7fb fe0d 	bl	8000128 <__udivsi3>
 800450e:	0003      	movs	r3, r0
 8004510:	b29b      	uxth	r3, r3
 8004512:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	2b0f      	cmp	r3, #15
 8004518:	d91c      	bls.n	8004554 <UART_SetConfig+0x2e8>
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	2380      	movs	r3, #128	; 0x80
 800451e:	025b      	lsls	r3, r3, #9
 8004520:	429a      	cmp	r2, r3
 8004522:	d217      	bcs.n	8004554 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	b29a      	uxth	r2, r3
 8004528:	200e      	movs	r0, #14
 800452a:	183b      	adds	r3, r7, r0
 800452c:	210f      	movs	r1, #15
 800452e:	438a      	bics	r2, r1
 8004530:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	085b      	lsrs	r3, r3, #1
 8004536:	b29b      	uxth	r3, r3
 8004538:	2207      	movs	r2, #7
 800453a:	4013      	ands	r3, r2
 800453c:	b299      	uxth	r1, r3
 800453e:	183b      	adds	r3, r7, r0
 8004540:	183a      	adds	r2, r7, r0
 8004542:	8812      	ldrh	r2, [r2, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	183a      	adds	r2, r7, r0
 800454e:	8812      	ldrh	r2, [r2, #0]
 8004550:	60da      	str	r2, [r3, #12]
 8004552:	e066      	b.n	8004622 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004554:	231e      	movs	r3, #30
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	2201      	movs	r2, #1
 800455a:	701a      	strb	r2, [r3, #0]
 800455c:	e061      	b.n	8004622 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800455e:	231f      	movs	r3, #31
 8004560:	18fb      	adds	r3, r7, r3
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b08      	cmp	r3, #8
 8004566:	d02f      	beq.n	80045c8 <UART_SetConfig+0x35c>
 8004568:	dc32      	bgt.n	80045d0 <UART_SetConfig+0x364>
 800456a:	2b04      	cmp	r3, #4
 800456c:	d00d      	beq.n	800458a <UART_SetConfig+0x31e>
 800456e:	dc2f      	bgt.n	80045d0 <UART_SetConfig+0x364>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <UART_SetConfig+0x30e>
 8004574:	2b02      	cmp	r3, #2
 8004576:	d005      	beq.n	8004584 <UART_SetConfig+0x318>
 8004578:	e02a      	b.n	80045d0 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800457a:	f7fe f977 	bl	800286c <HAL_RCC_GetPCLK1Freq>
 800457e:	0003      	movs	r3, r0
 8004580:	61bb      	str	r3, [r7, #24]
        break;
 8004582:	e02c      	b.n	80045de <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <UART_SetConfig+0x358>)
 8004586:	61bb      	str	r3, [r7, #24]
        break;
 8004588:	e029      	b.n	80045de <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800458a:	f7fe f8e5 	bl	8002758 <HAL_RCC_GetSysClockFreq>
 800458e:	0003      	movs	r3, r0
 8004590:	61bb      	str	r3, [r7, #24]
        break;
 8004592:	e024      	b.n	80045de <UART_SetConfig+0x372>
 8004594:	efff69f3 	.word	0xefff69f3
 8004598:	ffffcfff 	.word	0xffffcfff
 800459c:	fffff4ff 	.word	0xfffff4ff
 80045a0:	40013800 	.word	0x40013800
 80045a4:	40021000 	.word	0x40021000
 80045a8:	40004400 	.word	0x40004400
 80045ac:	40004800 	.word	0x40004800
 80045b0:	40004c00 	.word	0x40004c00
 80045b4:	40005000 	.word	0x40005000
 80045b8:	40011400 	.word	0x40011400
 80045bc:	40011800 	.word	0x40011800
 80045c0:	40011c00 	.word	0x40011c00
 80045c4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045c8:	2380      	movs	r3, #128	; 0x80
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	61bb      	str	r3, [r7, #24]
        break;
 80045ce:	e006      	b.n	80045de <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80045d0:	2300      	movs	r3, #0
 80045d2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80045d4:	231e      	movs	r3, #30
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	2201      	movs	r2, #1
 80045da:	701a      	strb	r2, [r3, #0]
        break;
 80045dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d01e      	beq.n	8004622 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	085a      	lsrs	r2, r3, #1
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	18d2      	adds	r2, r2, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	0019      	movs	r1, r3
 80045f4:	0010      	movs	r0, r2
 80045f6:	f7fb fd97 	bl	8000128 <__udivsi3>
 80045fa:	0003      	movs	r3, r0
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b0f      	cmp	r3, #15
 8004604:	d909      	bls.n	800461a <UART_SetConfig+0x3ae>
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	025b      	lsls	r3, r3, #9
 800460c:	429a      	cmp	r2, r3
 800460e:	d204      	bcs.n	800461a <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	60da      	str	r2, [r3, #12]
 8004618:	e003      	b.n	8004622 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800461a:	231e      	movs	r3, #30
 800461c:	18fb      	adds	r3, r7, r3
 800461e:	2201      	movs	r2, #1
 8004620:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800462e:	231e      	movs	r3, #30
 8004630:	18fb      	adds	r3, r7, r3
 8004632:	781b      	ldrb	r3, [r3, #0]
}
 8004634:	0018      	movs	r0, r3
 8004636:	46bd      	mov	sp, r7
 8004638:	b008      	add	sp, #32
 800463a:	bd80      	pop	{r7, pc}

0800463c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b082      	sub	sp, #8
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004648:	2201      	movs	r2, #1
 800464a:	4013      	ands	r3, r2
 800464c:	d00b      	beq.n	8004666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	4a4a      	ldr	r2, [pc, #296]	; (8004780 <UART_AdvFeatureConfig+0x144>)
 8004656:	4013      	ands	r3, r2
 8004658:	0019      	movs	r1, r3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466a:	2202      	movs	r2, #2
 800466c:	4013      	ands	r3, r2
 800466e:	d00b      	beq.n	8004688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	4a43      	ldr	r2, [pc, #268]	; (8004784 <UART_AdvFeatureConfig+0x148>)
 8004678:	4013      	ands	r3, r2
 800467a:	0019      	movs	r1, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	430a      	orrs	r2, r1
 8004686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468c:	2204      	movs	r2, #4
 800468e:	4013      	ands	r3, r2
 8004690:	d00b      	beq.n	80046aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	4a3b      	ldr	r2, [pc, #236]	; (8004788 <UART_AdvFeatureConfig+0x14c>)
 800469a:	4013      	ands	r3, r2
 800469c:	0019      	movs	r1, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ae:	2208      	movs	r2, #8
 80046b0:	4013      	ands	r3, r2
 80046b2:	d00b      	beq.n	80046cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	4a34      	ldr	r2, [pc, #208]	; (800478c <UART_AdvFeatureConfig+0x150>)
 80046bc:	4013      	ands	r3, r2
 80046be:	0019      	movs	r1, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	430a      	orrs	r2, r1
 80046ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2210      	movs	r2, #16
 80046d2:	4013      	ands	r3, r2
 80046d4:	d00b      	beq.n	80046ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	4a2c      	ldr	r2, [pc, #176]	; (8004790 <UART_AdvFeatureConfig+0x154>)
 80046de:	4013      	ands	r3, r2
 80046e0:	0019      	movs	r1, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f2:	2220      	movs	r2, #32
 80046f4:	4013      	ands	r3, r2
 80046f6:	d00b      	beq.n	8004710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	4a25      	ldr	r2, [pc, #148]	; (8004794 <UART_AdvFeatureConfig+0x158>)
 8004700:	4013      	ands	r3, r2
 8004702:	0019      	movs	r1, r3
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	430a      	orrs	r2, r1
 800470e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	2240      	movs	r2, #64	; 0x40
 8004716:	4013      	ands	r3, r2
 8004718:	d01d      	beq.n	8004756 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	4a1d      	ldr	r2, [pc, #116]	; (8004798 <UART_AdvFeatureConfig+0x15c>)
 8004722:	4013      	ands	r3, r2
 8004724:	0019      	movs	r1, r3
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	430a      	orrs	r2, r1
 8004730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004736:	2380      	movs	r3, #128	; 0x80
 8004738:	035b      	lsls	r3, r3, #13
 800473a:	429a      	cmp	r2, r3
 800473c:	d10b      	bne.n	8004756 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a15      	ldr	r2, [pc, #84]	; (800479c <UART_AdvFeatureConfig+0x160>)
 8004746:	4013      	ands	r3, r2
 8004748:	0019      	movs	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	2280      	movs	r2, #128	; 0x80
 800475c:	4013      	ands	r3, r2
 800475e:	d00b      	beq.n	8004778 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4a0e      	ldr	r2, [pc, #56]	; (80047a0 <UART_AdvFeatureConfig+0x164>)
 8004768:	4013      	ands	r3, r2
 800476a:	0019      	movs	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }
}
 8004778:	46c0      	nop			; (mov r8, r8)
 800477a:	46bd      	mov	sp, r7
 800477c:	b002      	add	sp, #8
 800477e:	bd80      	pop	{r7, pc}
 8004780:	fffdffff 	.word	0xfffdffff
 8004784:	fffeffff 	.word	0xfffeffff
 8004788:	fffbffff 	.word	0xfffbffff
 800478c:	ffff7fff 	.word	0xffff7fff
 8004790:	ffffefff 	.word	0xffffefff
 8004794:	ffffdfff 	.word	0xffffdfff
 8004798:	ffefffff 	.word	0xffefffff
 800479c:	ff9fffff 	.word	0xff9fffff
 80047a0:	fff7ffff 	.word	0xfff7ffff

080047a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b086      	sub	sp, #24
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2280      	movs	r2, #128	; 0x80
 80047b0:	2100      	movs	r1, #0
 80047b2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80047b4:	f7fc fef6 	bl	80015a4 <HAL_GetTick>
 80047b8:	0003      	movs	r3, r0
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2208      	movs	r2, #8
 80047c4:	4013      	ands	r3, r2
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d10c      	bne.n	80047e4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2280      	movs	r2, #128	; 0x80
 80047ce:	0391      	lsls	r1, r2, #14
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	4a17      	ldr	r2, [pc, #92]	; (8004830 <UART_CheckIdleState+0x8c>)
 80047d4:	9200      	str	r2, [sp, #0]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f000 f82c 	bl	8004834 <UART_WaitOnFlagUntilTimeout>
 80047dc:	1e03      	subs	r3, r0, #0
 80047de:	d001      	beq.n	80047e4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e021      	b.n	8004828 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2204      	movs	r2, #4
 80047ec:	4013      	ands	r3, r2
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	d10c      	bne.n	800480c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2280      	movs	r2, #128	; 0x80
 80047f6:	03d1      	lsls	r1, r2, #15
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4a0d      	ldr	r2, [pc, #52]	; (8004830 <UART_CheckIdleState+0x8c>)
 80047fc:	9200      	str	r2, [sp, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	f000 f818 	bl	8004834 <UART_WaitOnFlagUntilTimeout>
 8004804:	1e03      	subs	r3, r0, #0
 8004806:	d001      	beq.n	800480c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e00d      	b.n	8004828 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2220      	movs	r2, #32
 8004810:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2220      	movs	r2, #32
 8004816:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2200      	movs	r2, #0
 800481c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2274      	movs	r2, #116	; 0x74
 8004822:	2100      	movs	r1, #0
 8004824:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	0018      	movs	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	b004      	add	sp, #16
 800482e:	bd80      	pop	{r7, pc}
 8004830:	01ffffff 	.word	0x01ffffff

08004834 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b094      	sub	sp, #80	; 0x50
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	603b      	str	r3, [r7, #0]
 8004840:	1dfb      	adds	r3, r7, #7
 8004842:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004844:	e0a3      	b.n	800498e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004848:	3301      	adds	r3, #1
 800484a:	d100      	bne.n	800484e <UART_WaitOnFlagUntilTimeout+0x1a>
 800484c:	e09f      	b.n	800498e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800484e:	f7fc fea9 	bl	80015a4 <HAL_GetTick>
 8004852:	0002      	movs	r2, r0
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800485a:	429a      	cmp	r2, r3
 800485c:	d302      	bcc.n	8004864 <UART_WaitOnFlagUntilTimeout+0x30>
 800485e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004860:	2b00      	cmp	r3, #0
 8004862:	d13d      	bne.n	80048e0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004864:	f3ef 8310 	mrs	r3, PRIMASK
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800486c:	647b      	str	r3, [r7, #68]	; 0x44
 800486e:	2301      	movs	r3, #1
 8004870:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004874:	f383 8810 	msr	PRIMASK, r3
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	494c      	ldr	r1, [pc, #304]	; (80049b8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004886:	400a      	ands	r2, r1
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800488c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800488e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004890:	f383 8810 	msr	PRIMASK, r3
}
 8004894:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004896:	f3ef 8310 	mrs	r3, PRIMASK
 800489a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800489c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489e:	643b      	str	r3, [r7, #64]	; 0x40
 80048a0:	2301      	movs	r3, #1
 80048a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048a6:	f383 8810 	msr	PRIMASK, r3
}
 80048aa:	46c0      	nop			; (mov r8, r8)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689a      	ldr	r2, [r3, #8]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2101      	movs	r1, #1
 80048b8:	438a      	bics	r2, r1
 80048ba:	609a      	str	r2, [r3, #8]
 80048bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048be:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048c2:	f383 8810 	msr	PRIMASK, r3
}
 80048c6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2220      	movs	r2, #32
 80048cc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2274      	movs	r2, #116	; 0x74
 80048d8:	2100      	movs	r1, #0
 80048da:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e067      	b.n	80049b0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2204      	movs	r2, #4
 80048e8:	4013      	ands	r3, r2
 80048ea:	d050      	beq.n	800498e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	69da      	ldr	r2, [r3, #28]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	401a      	ands	r2, r3
 80048f8:	2380      	movs	r3, #128	; 0x80
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d146      	bne.n	800498e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2280      	movs	r2, #128	; 0x80
 8004906:	0112      	lsls	r2, r2, #4
 8004908:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800490a:	f3ef 8310 	mrs	r3, PRIMASK
 800490e:	613b      	str	r3, [r7, #16]
  return(result);
 8004910:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004914:	2301      	movs	r3, #1
 8004916:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f383 8810 	msr	PRIMASK, r3
}
 800491e:	46c0      	nop			; (mov r8, r8)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4923      	ldr	r1, [pc, #140]	; (80049b8 <UART_WaitOnFlagUntilTimeout+0x184>)
 800492c:	400a      	ands	r2, r1
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004932:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	f383 8810 	msr	PRIMASK, r3
}
 800493a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800493c:	f3ef 8310 	mrs	r3, PRIMASK
 8004940:	61fb      	str	r3, [r7, #28]
  return(result);
 8004942:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004944:	64bb      	str	r3, [r7, #72]	; 0x48
 8004946:	2301      	movs	r3, #1
 8004948:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494a:	6a3b      	ldr	r3, [r7, #32]
 800494c:	f383 8810 	msr	PRIMASK, r3
}
 8004950:	46c0      	nop			; (mov r8, r8)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2101      	movs	r1, #1
 800495e:	438a      	bics	r2, r1
 8004960:	609a      	str	r2, [r3, #8]
 8004962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	f383 8810 	msr	PRIMASK, r3
}
 800496c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2220      	movs	r2, #32
 8004972:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2220      	movs	r2, #32
 8004978:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2280      	movs	r2, #128	; 0x80
 800497e:	2120      	movs	r1, #32
 8004980:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2274      	movs	r2, #116	; 0x74
 8004986:	2100      	movs	r1, #0
 8004988:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e010      	b.n	80049b0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	68ba      	ldr	r2, [r7, #8]
 8004996:	4013      	ands	r3, r2
 8004998:	68ba      	ldr	r2, [r7, #8]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	425a      	negs	r2, r3
 800499e:	4153      	adcs	r3, r2
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	001a      	movs	r2, r3
 80049a4:	1dfb      	adds	r3, r7, #7
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d100      	bne.n	80049ae <UART_WaitOnFlagUntilTimeout+0x17a>
 80049ac:	e74b      	b.n	8004846 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	0018      	movs	r0, r3
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b014      	add	sp, #80	; 0x50
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	fffffe5f 	.word	0xfffffe5f

080049bc <__errno>:
 80049bc:	4b01      	ldr	r3, [pc, #4]	; (80049c4 <__errno+0x8>)
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	4770      	bx	lr
 80049c2:	46c0      	nop			; (mov r8, r8)
 80049c4:	20000034 	.word	0x20000034

080049c8 <__libc_init_array>:
 80049c8:	b570      	push	{r4, r5, r6, lr}
 80049ca:	2600      	movs	r6, #0
 80049cc:	4d0c      	ldr	r5, [pc, #48]	; (8004a00 <__libc_init_array+0x38>)
 80049ce:	4c0d      	ldr	r4, [pc, #52]	; (8004a04 <__libc_init_array+0x3c>)
 80049d0:	1b64      	subs	r4, r4, r5
 80049d2:	10a4      	asrs	r4, r4, #2
 80049d4:	42a6      	cmp	r6, r4
 80049d6:	d109      	bne.n	80049ec <__libc_init_array+0x24>
 80049d8:	2600      	movs	r6, #0
 80049da:	f000 fc8b 	bl	80052f4 <_init>
 80049de:	4d0a      	ldr	r5, [pc, #40]	; (8004a08 <__libc_init_array+0x40>)
 80049e0:	4c0a      	ldr	r4, [pc, #40]	; (8004a0c <__libc_init_array+0x44>)
 80049e2:	1b64      	subs	r4, r4, r5
 80049e4:	10a4      	asrs	r4, r4, #2
 80049e6:	42a6      	cmp	r6, r4
 80049e8:	d105      	bne.n	80049f6 <__libc_init_array+0x2e>
 80049ea:	bd70      	pop	{r4, r5, r6, pc}
 80049ec:	00b3      	lsls	r3, r6, #2
 80049ee:	58eb      	ldr	r3, [r5, r3]
 80049f0:	4798      	blx	r3
 80049f2:	3601      	adds	r6, #1
 80049f4:	e7ee      	b.n	80049d4 <__libc_init_array+0xc>
 80049f6:	00b3      	lsls	r3, r6, #2
 80049f8:	58eb      	ldr	r3, [r5, r3]
 80049fa:	4798      	blx	r3
 80049fc:	3601      	adds	r6, #1
 80049fe:	e7f2      	b.n	80049e6 <__libc_init_array+0x1e>
 8004a00:	08005438 	.word	0x08005438
 8004a04:	08005438 	.word	0x08005438
 8004a08:	08005438 	.word	0x08005438
 8004a0c:	08005444 	.word	0x08005444

08004a10 <memset>:
 8004a10:	0003      	movs	r3, r0
 8004a12:	1882      	adds	r2, r0, r2
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d100      	bne.n	8004a1a <memset+0xa>
 8004a18:	4770      	bx	lr
 8004a1a:	7019      	strb	r1, [r3, #0]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	e7f9      	b.n	8004a14 <memset+0x4>

08004a20 <siprintf>:
 8004a20:	b40e      	push	{r1, r2, r3}
 8004a22:	b500      	push	{lr}
 8004a24:	490b      	ldr	r1, [pc, #44]	; (8004a54 <siprintf+0x34>)
 8004a26:	b09c      	sub	sp, #112	; 0x70
 8004a28:	ab1d      	add	r3, sp, #116	; 0x74
 8004a2a:	9002      	str	r0, [sp, #8]
 8004a2c:	9006      	str	r0, [sp, #24]
 8004a2e:	9107      	str	r1, [sp, #28]
 8004a30:	9104      	str	r1, [sp, #16]
 8004a32:	4809      	ldr	r0, [pc, #36]	; (8004a58 <siprintf+0x38>)
 8004a34:	4909      	ldr	r1, [pc, #36]	; (8004a5c <siprintf+0x3c>)
 8004a36:	cb04      	ldmia	r3!, {r2}
 8004a38:	9105      	str	r1, [sp, #20]
 8004a3a:	6800      	ldr	r0, [r0, #0]
 8004a3c:	a902      	add	r1, sp, #8
 8004a3e:	9301      	str	r3, [sp, #4]
 8004a40:	f000 f870 	bl	8004b24 <_svfiprintf_r>
 8004a44:	2300      	movs	r3, #0
 8004a46:	9a02      	ldr	r2, [sp, #8]
 8004a48:	7013      	strb	r3, [r2, #0]
 8004a4a:	b01c      	add	sp, #112	; 0x70
 8004a4c:	bc08      	pop	{r3}
 8004a4e:	b003      	add	sp, #12
 8004a50:	4718      	bx	r3
 8004a52:	46c0      	nop			; (mov r8, r8)
 8004a54:	7fffffff 	.word	0x7fffffff
 8004a58:	20000034 	.word	0x20000034
 8004a5c:	ffff0208 	.word	0xffff0208

08004a60 <__ssputs_r>:
 8004a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a62:	688e      	ldr	r6, [r1, #8]
 8004a64:	b085      	sub	sp, #20
 8004a66:	0007      	movs	r7, r0
 8004a68:	000c      	movs	r4, r1
 8004a6a:	9203      	str	r2, [sp, #12]
 8004a6c:	9301      	str	r3, [sp, #4]
 8004a6e:	429e      	cmp	r6, r3
 8004a70:	d83c      	bhi.n	8004aec <__ssputs_r+0x8c>
 8004a72:	2390      	movs	r3, #144	; 0x90
 8004a74:	898a      	ldrh	r2, [r1, #12]
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	421a      	tst	r2, r3
 8004a7a:	d034      	beq.n	8004ae6 <__ssputs_r+0x86>
 8004a7c:	6909      	ldr	r1, [r1, #16]
 8004a7e:	6823      	ldr	r3, [r4, #0]
 8004a80:	6960      	ldr	r0, [r4, #20]
 8004a82:	1a5b      	subs	r3, r3, r1
 8004a84:	9302      	str	r3, [sp, #8]
 8004a86:	2303      	movs	r3, #3
 8004a88:	4343      	muls	r3, r0
 8004a8a:	0fdd      	lsrs	r5, r3, #31
 8004a8c:	18ed      	adds	r5, r5, r3
 8004a8e:	9b01      	ldr	r3, [sp, #4]
 8004a90:	9802      	ldr	r0, [sp, #8]
 8004a92:	3301      	adds	r3, #1
 8004a94:	181b      	adds	r3, r3, r0
 8004a96:	106d      	asrs	r5, r5, #1
 8004a98:	42ab      	cmp	r3, r5
 8004a9a:	d900      	bls.n	8004a9e <__ssputs_r+0x3e>
 8004a9c:	001d      	movs	r5, r3
 8004a9e:	0553      	lsls	r3, r2, #21
 8004aa0:	d532      	bpl.n	8004b08 <__ssputs_r+0xa8>
 8004aa2:	0029      	movs	r1, r5
 8004aa4:	0038      	movs	r0, r7
 8004aa6:	f000 fb53 	bl	8005150 <_malloc_r>
 8004aaa:	1e06      	subs	r6, r0, #0
 8004aac:	d109      	bne.n	8004ac2 <__ssputs_r+0x62>
 8004aae:	230c      	movs	r3, #12
 8004ab0:	603b      	str	r3, [r7, #0]
 8004ab2:	2340      	movs	r3, #64	; 0x40
 8004ab4:	2001      	movs	r0, #1
 8004ab6:	89a2      	ldrh	r2, [r4, #12]
 8004ab8:	4240      	negs	r0, r0
 8004aba:	4313      	orrs	r3, r2
 8004abc:	81a3      	strh	r3, [r4, #12]
 8004abe:	b005      	add	sp, #20
 8004ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac2:	9a02      	ldr	r2, [sp, #8]
 8004ac4:	6921      	ldr	r1, [r4, #16]
 8004ac6:	f000 faba 	bl	800503e <memcpy>
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	4a14      	ldr	r2, [pc, #80]	; (8004b20 <__ssputs_r+0xc0>)
 8004ace:	401a      	ands	r2, r3
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	81a3      	strh	r3, [r4, #12]
 8004ad6:	9b02      	ldr	r3, [sp, #8]
 8004ad8:	6126      	str	r6, [r4, #16]
 8004ada:	18f6      	adds	r6, r6, r3
 8004adc:	6026      	str	r6, [r4, #0]
 8004ade:	6165      	str	r5, [r4, #20]
 8004ae0:	9e01      	ldr	r6, [sp, #4]
 8004ae2:	1aed      	subs	r5, r5, r3
 8004ae4:	60a5      	str	r5, [r4, #8]
 8004ae6:	9b01      	ldr	r3, [sp, #4]
 8004ae8:	429e      	cmp	r6, r3
 8004aea:	d900      	bls.n	8004aee <__ssputs_r+0x8e>
 8004aec:	9e01      	ldr	r6, [sp, #4]
 8004aee:	0032      	movs	r2, r6
 8004af0:	9903      	ldr	r1, [sp, #12]
 8004af2:	6820      	ldr	r0, [r4, #0]
 8004af4:	f000 faac 	bl	8005050 <memmove>
 8004af8:	68a3      	ldr	r3, [r4, #8]
 8004afa:	2000      	movs	r0, #0
 8004afc:	1b9b      	subs	r3, r3, r6
 8004afe:	60a3      	str	r3, [r4, #8]
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	199e      	adds	r6, r3, r6
 8004b04:	6026      	str	r6, [r4, #0]
 8004b06:	e7da      	b.n	8004abe <__ssputs_r+0x5e>
 8004b08:	002a      	movs	r2, r5
 8004b0a:	0038      	movs	r0, r7
 8004b0c:	f000 fb96 	bl	800523c <_realloc_r>
 8004b10:	1e06      	subs	r6, r0, #0
 8004b12:	d1e0      	bne.n	8004ad6 <__ssputs_r+0x76>
 8004b14:	0038      	movs	r0, r7
 8004b16:	6921      	ldr	r1, [r4, #16]
 8004b18:	f000 faae 	bl	8005078 <_free_r>
 8004b1c:	e7c7      	b.n	8004aae <__ssputs_r+0x4e>
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	fffffb7f 	.word	0xfffffb7f

08004b24 <_svfiprintf_r>:
 8004b24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b26:	b0a1      	sub	sp, #132	; 0x84
 8004b28:	9003      	str	r0, [sp, #12]
 8004b2a:	001d      	movs	r5, r3
 8004b2c:	898b      	ldrh	r3, [r1, #12]
 8004b2e:	000f      	movs	r7, r1
 8004b30:	0016      	movs	r6, r2
 8004b32:	061b      	lsls	r3, r3, #24
 8004b34:	d511      	bpl.n	8004b5a <_svfiprintf_r+0x36>
 8004b36:	690b      	ldr	r3, [r1, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10e      	bne.n	8004b5a <_svfiprintf_r+0x36>
 8004b3c:	2140      	movs	r1, #64	; 0x40
 8004b3e:	f000 fb07 	bl	8005150 <_malloc_r>
 8004b42:	6038      	str	r0, [r7, #0]
 8004b44:	6138      	str	r0, [r7, #16]
 8004b46:	2800      	cmp	r0, #0
 8004b48:	d105      	bne.n	8004b56 <_svfiprintf_r+0x32>
 8004b4a:	230c      	movs	r3, #12
 8004b4c:	9a03      	ldr	r2, [sp, #12]
 8004b4e:	3801      	subs	r0, #1
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	b021      	add	sp, #132	; 0x84
 8004b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b56:	2340      	movs	r3, #64	; 0x40
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	ac08      	add	r4, sp, #32
 8004b5e:	6163      	str	r3, [r4, #20]
 8004b60:	3320      	adds	r3, #32
 8004b62:	7663      	strb	r3, [r4, #25]
 8004b64:	3310      	adds	r3, #16
 8004b66:	76a3      	strb	r3, [r4, #26]
 8004b68:	9507      	str	r5, [sp, #28]
 8004b6a:	0035      	movs	r5, r6
 8004b6c:	782b      	ldrb	r3, [r5, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <_svfiprintf_r+0x52>
 8004b72:	2b25      	cmp	r3, #37	; 0x25
 8004b74:	d147      	bne.n	8004c06 <_svfiprintf_r+0xe2>
 8004b76:	1bab      	subs	r3, r5, r6
 8004b78:	9305      	str	r3, [sp, #20]
 8004b7a:	42b5      	cmp	r5, r6
 8004b7c:	d00c      	beq.n	8004b98 <_svfiprintf_r+0x74>
 8004b7e:	0032      	movs	r2, r6
 8004b80:	0039      	movs	r1, r7
 8004b82:	9803      	ldr	r0, [sp, #12]
 8004b84:	f7ff ff6c 	bl	8004a60 <__ssputs_r>
 8004b88:	1c43      	adds	r3, r0, #1
 8004b8a:	d100      	bne.n	8004b8e <_svfiprintf_r+0x6a>
 8004b8c:	e0ae      	b.n	8004cec <_svfiprintf_r+0x1c8>
 8004b8e:	6962      	ldr	r2, [r4, #20]
 8004b90:	9b05      	ldr	r3, [sp, #20]
 8004b92:	4694      	mov	ip, r2
 8004b94:	4463      	add	r3, ip
 8004b96:	6163      	str	r3, [r4, #20]
 8004b98:	782b      	ldrb	r3, [r5, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d100      	bne.n	8004ba0 <_svfiprintf_r+0x7c>
 8004b9e:	e0a5      	b.n	8004cec <_svfiprintf_r+0x1c8>
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	4252      	negs	r2, r2
 8004ba6:	6062      	str	r2, [r4, #4]
 8004ba8:	a904      	add	r1, sp, #16
 8004baa:	3254      	adds	r2, #84	; 0x54
 8004bac:	1852      	adds	r2, r2, r1
 8004bae:	1c6e      	adds	r6, r5, #1
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	60e3      	str	r3, [r4, #12]
 8004bb4:	60a3      	str	r3, [r4, #8]
 8004bb6:	7013      	strb	r3, [r2, #0]
 8004bb8:	65a3      	str	r3, [r4, #88]	; 0x58
 8004bba:	2205      	movs	r2, #5
 8004bbc:	7831      	ldrb	r1, [r6, #0]
 8004bbe:	4854      	ldr	r0, [pc, #336]	; (8004d10 <_svfiprintf_r+0x1ec>)
 8004bc0:	f000 fa32 	bl	8005028 <memchr>
 8004bc4:	1c75      	adds	r5, r6, #1
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d11f      	bne.n	8004c0a <_svfiprintf_r+0xe6>
 8004bca:	6822      	ldr	r2, [r4, #0]
 8004bcc:	06d3      	lsls	r3, r2, #27
 8004bce:	d504      	bpl.n	8004bda <_svfiprintf_r+0xb6>
 8004bd0:	2353      	movs	r3, #83	; 0x53
 8004bd2:	a904      	add	r1, sp, #16
 8004bd4:	185b      	adds	r3, r3, r1
 8004bd6:	2120      	movs	r1, #32
 8004bd8:	7019      	strb	r1, [r3, #0]
 8004bda:	0713      	lsls	r3, r2, #28
 8004bdc:	d504      	bpl.n	8004be8 <_svfiprintf_r+0xc4>
 8004bde:	2353      	movs	r3, #83	; 0x53
 8004be0:	a904      	add	r1, sp, #16
 8004be2:	185b      	adds	r3, r3, r1
 8004be4:	212b      	movs	r1, #43	; 0x2b
 8004be6:	7019      	strb	r1, [r3, #0]
 8004be8:	7833      	ldrb	r3, [r6, #0]
 8004bea:	2b2a      	cmp	r3, #42	; 0x2a
 8004bec:	d016      	beq.n	8004c1c <_svfiprintf_r+0xf8>
 8004bee:	0035      	movs	r5, r6
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	200a      	movs	r0, #10
 8004bf4:	68e3      	ldr	r3, [r4, #12]
 8004bf6:	782a      	ldrb	r2, [r5, #0]
 8004bf8:	1c6e      	adds	r6, r5, #1
 8004bfa:	3a30      	subs	r2, #48	; 0x30
 8004bfc:	2a09      	cmp	r2, #9
 8004bfe:	d94e      	bls.n	8004c9e <_svfiprintf_r+0x17a>
 8004c00:	2900      	cmp	r1, #0
 8004c02:	d111      	bne.n	8004c28 <_svfiprintf_r+0x104>
 8004c04:	e017      	b.n	8004c36 <_svfiprintf_r+0x112>
 8004c06:	3501      	adds	r5, #1
 8004c08:	e7b0      	b.n	8004b6c <_svfiprintf_r+0x48>
 8004c0a:	4b41      	ldr	r3, [pc, #260]	; (8004d10 <_svfiprintf_r+0x1ec>)
 8004c0c:	6822      	ldr	r2, [r4, #0]
 8004c0e:	1ac0      	subs	r0, r0, r3
 8004c10:	2301      	movs	r3, #1
 8004c12:	4083      	lsls	r3, r0
 8004c14:	4313      	orrs	r3, r2
 8004c16:	002e      	movs	r6, r5
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	e7ce      	b.n	8004bba <_svfiprintf_r+0x96>
 8004c1c:	9b07      	ldr	r3, [sp, #28]
 8004c1e:	1d19      	adds	r1, r3, #4
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	9107      	str	r1, [sp, #28]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	db01      	blt.n	8004c2c <_svfiprintf_r+0x108>
 8004c28:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c2a:	e004      	b.n	8004c36 <_svfiprintf_r+0x112>
 8004c2c:	425b      	negs	r3, r3
 8004c2e:	60e3      	str	r3, [r4, #12]
 8004c30:	2302      	movs	r3, #2
 8004c32:	4313      	orrs	r3, r2
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	782b      	ldrb	r3, [r5, #0]
 8004c38:	2b2e      	cmp	r3, #46	; 0x2e
 8004c3a:	d10a      	bne.n	8004c52 <_svfiprintf_r+0x12e>
 8004c3c:	786b      	ldrb	r3, [r5, #1]
 8004c3e:	2b2a      	cmp	r3, #42	; 0x2a
 8004c40:	d135      	bne.n	8004cae <_svfiprintf_r+0x18a>
 8004c42:	9b07      	ldr	r3, [sp, #28]
 8004c44:	3502      	adds	r5, #2
 8004c46:	1d1a      	adds	r2, r3, #4
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	9207      	str	r2, [sp, #28]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	db2b      	blt.n	8004ca8 <_svfiprintf_r+0x184>
 8004c50:	9309      	str	r3, [sp, #36]	; 0x24
 8004c52:	4e30      	ldr	r6, [pc, #192]	; (8004d14 <_svfiprintf_r+0x1f0>)
 8004c54:	2203      	movs	r2, #3
 8004c56:	0030      	movs	r0, r6
 8004c58:	7829      	ldrb	r1, [r5, #0]
 8004c5a:	f000 f9e5 	bl	8005028 <memchr>
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	d006      	beq.n	8004c70 <_svfiprintf_r+0x14c>
 8004c62:	2340      	movs	r3, #64	; 0x40
 8004c64:	1b80      	subs	r0, r0, r6
 8004c66:	4083      	lsls	r3, r0
 8004c68:	6822      	ldr	r2, [r4, #0]
 8004c6a:	3501      	adds	r5, #1
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	6023      	str	r3, [r4, #0]
 8004c70:	7829      	ldrb	r1, [r5, #0]
 8004c72:	2206      	movs	r2, #6
 8004c74:	4828      	ldr	r0, [pc, #160]	; (8004d18 <_svfiprintf_r+0x1f4>)
 8004c76:	1c6e      	adds	r6, r5, #1
 8004c78:	7621      	strb	r1, [r4, #24]
 8004c7a:	f000 f9d5 	bl	8005028 <memchr>
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d03c      	beq.n	8004cfc <_svfiprintf_r+0x1d8>
 8004c82:	4b26      	ldr	r3, [pc, #152]	; (8004d1c <_svfiprintf_r+0x1f8>)
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d125      	bne.n	8004cd4 <_svfiprintf_r+0x1b0>
 8004c88:	2207      	movs	r2, #7
 8004c8a:	9b07      	ldr	r3, [sp, #28]
 8004c8c:	3307      	adds	r3, #7
 8004c8e:	4393      	bics	r3, r2
 8004c90:	3308      	adds	r3, #8
 8004c92:	9307      	str	r3, [sp, #28]
 8004c94:	6963      	ldr	r3, [r4, #20]
 8004c96:	9a04      	ldr	r2, [sp, #16]
 8004c98:	189b      	adds	r3, r3, r2
 8004c9a:	6163      	str	r3, [r4, #20]
 8004c9c:	e765      	b.n	8004b6a <_svfiprintf_r+0x46>
 8004c9e:	4343      	muls	r3, r0
 8004ca0:	0035      	movs	r5, r6
 8004ca2:	2101      	movs	r1, #1
 8004ca4:	189b      	adds	r3, r3, r2
 8004ca6:	e7a6      	b.n	8004bf6 <_svfiprintf_r+0xd2>
 8004ca8:	2301      	movs	r3, #1
 8004caa:	425b      	negs	r3, r3
 8004cac:	e7d0      	b.n	8004c50 <_svfiprintf_r+0x12c>
 8004cae:	2300      	movs	r3, #0
 8004cb0:	200a      	movs	r0, #10
 8004cb2:	001a      	movs	r2, r3
 8004cb4:	3501      	adds	r5, #1
 8004cb6:	6063      	str	r3, [r4, #4]
 8004cb8:	7829      	ldrb	r1, [r5, #0]
 8004cba:	1c6e      	adds	r6, r5, #1
 8004cbc:	3930      	subs	r1, #48	; 0x30
 8004cbe:	2909      	cmp	r1, #9
 8004cc0:	d903      	bls.n	8004cca <_svfiprintf_r+0x1a6>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0c5      	beq.n	8004c52 <_svfiprintf_r+0x12e>
 8004cc6:	9209      	str	r2, [sp, #36]	; 0x24
 8004cc8:	e7c3      	b.n	8004c52 <_svfiprintf_r+0x12e>
 8004cca:	4342      	muls	r2, r0
 8004ccc:	0035      	movs	r5, r6
 8004cce:	2301      	movs	r3, #1
 8004cd0:	1852      	adds	r2, r2, r1
 8004cd2:	e7f1      	b.n	8004cb8 <_svfiprintf_r+0x194>
 8004cd4:	ab07      	add	r3, sp, #28
 8004cd6:	9300      	str	r3, [sp, #0]
 8004cd8:	003a      	movs	r2, r7
 8004cda:	0021      	movs	r1, r4
 8004cdc:	4b10      	ldr	r3, [pc, #64]	; (8004d20 <_svfiprintf_r+0x1fc>)
 8004cde:	9803      	ldr	r0, [sp, #12]
 8004ce0:	e000      	b.n	8004ce4 <_svfiprintf_r+0x1c0>
 8004ce2:	bf00      	nop
 8004ce4:	9004      	str	r0, [sp, #16]
 8004ce6:	9b04      	ldr	r3, [sp, #16]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	d1d3      	bne.n	8004c94 <_svfiprintf_r+0x170>
 8004cec:	89bb      	ldrh	r3, [r7, #12]
 8004cee:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004cf0:	065b      	lsls	r3, r3, #25
 8004cf2:	d400      	bmi.n	8004cf6 <_svfiprintf_r+0x1d2>
 8004cf4:	e72d      	b.n	8004b52 <_svfiprintf_r+0x2e>
 8004cf6:	2001      	movs	r0, #1
 8004cf8:	4240      	negs	r0, r0
 8004cfa:	e72a      	b.n	8004b52 <_svfiprintf_r+0x2e>
 8004cfc:	ab07      	add	r3, sp, #28
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	003a      	movs	r2, r7
 8004d02:	0021      	movs	r1, r4
 8004d04:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <_svfiprintf_r+0x1fc>)
 8004d06:	9803      	ldr	r0, [sp, #12]
 8004d08:	f000 f87c 	bl	8004e04 <_printf_i>
 8004d0c:	e7ea      	b.n	8004ce4 <_svfiprintf_r+0x1c0>
 8004d0e:	46c0      	nop			; (mov r8, r8)
 8004d10:	08005404 	.word	0x08005404
 8004d14:	0800540a 	.word	0x0800540a
 8004d18:	0800540e 	.word	0x0800540e
 8004d1c:	00000000 	.word	0x00000000
 8004d20:	08004a61 	.word	0x08004a61

08004d24 <_printf_common>:
 8004d24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d26:	0015      	movs	r5, r2
 8004d28:	9301      	str	r3, [sp, #4]
 8004d2a:	688a      	ldr	r2, [r1, #8]
 8004d2c:	690b      	ldr	r3, [r1, #16]
 8004d2e:	000c      	movs	r4, r1
 8004d30:	9000      	str	r0, [sp, #0]
 8004d32:	4293      	cmp	r3, r2
 8004d34:	da00      	bge.n	8004d38 <_printf_common+0x14>
 8004d36:	0013      	movs	r3, r2
 8004d38:	0022      	movs	r2, r4
 8004d3a:	602b      	str	r3, [r5, #0]
 8004d3c:	3243      	adds	r2, #67	; 0x43
 8004d3e:	7812      	ldrb	r2, [r2, #0]
 8004d40:	2a00      	cmp	r2, #0
 8004d42:	d001      	beq.n	8004d48 <_printf_common+0x24>
 8004d44:	3301      	adds	r3, #1
 8004d46:	602b      	str	r3, [r5, #0]
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	069b      	lsls	r3, r3, #26
 8004d4c:	d502      	bpl.n	8004d54 <_printf_common+0x30>
 8004d4e:	682b      	ldr	r3, [r5, #0]
 8004d50:	3302      	adds	r3, #2
 8004d52:	602b      	str	r3, [r5, #0]
 8004d54:	6822      	ldr	r2, [r4, #0]
 8004d56:	2306      	movs	r3, #6
 8004d58:	0017      	movs	r7, r2
 8004d5a:	401f      	ands	r7, r3
 8004d5c:	421a      	tst	r2, r3
 8004d5e:	d027      	beq.n	8004db0 <_printf_common+0x8c>
 8004d60:	0023      	movs	r3, r4
 8004d62:	3343      	adds	r3, #67	; 0x43
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	1e5a      	subs	r2, r3, #1
 8004d68:	4193      	sbcs	r3, r2
 8004d6a:	6822      	ldr	r2, [r4, #0]
 8004d6c:	0692      	lsls	r2, r2, #26
 8004d6e:	d430      	bmi.n	8004dd2 <_printf_common+0xae>
 8004d70:	0022      	movs	r2, r4
 8004d72:	9901      	ldr	r1, [sp, #4]
 8004d74:	9800      	ldr	r0, [sp, #0]
 8004d76:	9e08      	ldr	r6, [sp, #32]
 8004d78:	3243      	adds	r2, #67	; 0x43
 8004d7a:	47b0      	blx	r6
 8004d7c:	1c43      	adds	r3, r0, #1
 8004d7e:	d025      	beq.n	8004dcc <_printf_common+0xa8>
 8004d80:	2306      	movs	r3, #6
 8004d82:	6820      	ldr	r0, [r4, #0]
 8004d84:	682a      	ldr	r2, [r5, #0]
 8004d86:	68e1      	ldr	r1, [r4, #12]
 8004d88:	2500      	movs	r5, #0
 8004d8a:	4003      	ands	r3, r0
 8004d8c:	2b04      	cmp	r3, #4
 8004d8e:	d103      	bne.n	8004d98 <_printf_common+0x74>
 8004d90:	1a8d      	subs	r5, r1, r2
 8004d92:	43eb      	mvns	r3, r5
 8004d94:	17db      	asrs	r3, r3, #31
 8004d96:	401d      	ands	r5, r3
 8004d98:	68a3      	ldr	r3, [r4, #8]
 8004d9a:	6922      	ldr	r2, [r4, #16]
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	dd01      	ble.n	8004da4 <_printf_common+0x80>
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	18ed      	adds	r5, r5, r3
 8004da4:	2700      	movs	r7, #0
 8004da6:	42bd      	cmp	r5, r7
 8004da8:	d120      	bne.n	8004dec <_printf_common+0xc8>
 8004daa:	2000      	movs	r0, #0
 8004dac:	e010      	b.n	8004dd0 <_printf_common+0xac>
 8004dae:	3701      	adds	r7, #1
 8004db0:	68e3      	ldr	r3, [r4, #12]
 8004db2:	682a      	ldr	r2, [r5, #0]
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	42bb      	cmp	r3, r7
 8004db8:	ddd2      	ble.n	8004d60 <_printf_common+0x3c>
 8004dba:	0022      	movs	r2, r4
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	9901      	ldr	r1, [sp, #4]
 8004dc0:	9800      	ldr	r0, [sp, #0]
 8004dc2:	9e08      	ldr	r6, [sp, #32]
 8004dc4:	3219      	adds	r2, #25
 8004dc6:	47b0      	blx	r6
 8004dc8:	1c43      	adds	r3, r0, #1
 8004dca:	d1f0      	bne.n	8004dae <_printf_common+0x8a>
 8004dcc:	2001      	movs	r0, #1
 8004dce:	4240      	negs	r0, r0
 8004dd0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004dd2:	2030      	movs	r0, #48	; 0x30
 8004dd4:	18e1      	adds	r1, r4, r3
 8004dd6:	3143      	adds	r1, #67	; 0x43
 8004dd8:	7008      	strb	r0, [r1, #0]
 8004dda:	0021      	movs	r1, r4
 8004ddc:	1c5a      	adds	r2, r3, #1
 8004dde:	3145      	adds	r1, #69	; 0x45
 8004de0:	7809      	ldrb	r1, [r1, #0]
 8004de2:	18a2      	adds	r2, r4, r2
 8004de4:	3243      	adds	r2, #67	; 0x43
 8004de6:	3302      	adds	r3, #2
 8004de8:	7011      	strb	r1, [r2, #0]
 8004dea:	e7c1      	b.n	8004d70 <_printf_common+0x4c>
 8004dec:	0022      	movs	r2, r4
 8004dee:	2301      	movs	r3, #1
 8004df0:	9901      	ldr	r1, [sp, #4]
 8004df2:	9800      	ldr	r0, [sp, #0]
 8004df4:	9e08      	ldr	r6, [sp, #32]
 8004df6:	321a      	adds	r2, #26
 8004df8:	47b0      	blx	r6
 8004dfa:	1c43      	adds	r3, r0, #1
 8004dfc:	d0e6      	beq.n	8004dcc <_printf_common+0xa8>
 8004dfe:	3701      	adds	r7, #1
 8004e00:	e7d1      	b.n	8004da6 <_printf_common+0x82>
	...

08004e04 <_printf_i>:
 8004e04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e06:	b08b      	sub	sp, #44	; 0x2c
 8004e08:	9206      	str	r2, [sp, #24]
 8004e0a:	000a      	movs	r2, r1
 8004e0c:	3243      	adds	r2, #67	; 0x43
 8004e0e:	9307      	str	r3, [sp, #28]
 8004e10:	9005      	str	r0, [sp, #20]
 8004e12:	9204      	str	r2, [sp, #16]
 8004e14:	7e0a      	ldrb	r2, [r1, #24]
 8004e16:	000c      	movs	r4, r1
 8004e18:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e1a:	2a78      	cmp	r2, #120	; 0x78
 8004e1c:	d807      	bhi.n	8004e2e <_printf_i+0x2a>
 8004e1e:	2a62      	cmp	r2, #98	; 0x62
 8004e20:	d809      	bhi.n	8004e36 <_printf_i+0x32>
 8004e22:	2a00      	cmp	r2, #0
 8004e24:	d100      	bne.n	8004e28 <_printf_i+0x24>
 8004e26:	e0c1      	b.n	8004fac <_printf_i+0x1a8>
 8004e28:	2a58      	cmp	r2, #88	; 0x58
 8004e2a:	d100      	bne.n	8004e2e <_printf_i+0x2a>
 8004e2c:	e08c      	b.n	8004f48 <_printf_i+0x144>
 8004e2e:	0026      	movs	r6, r4
 8004e30:	3642      	adds	r6, #66	; 0x42
 8004e32:	7032      	strb	r2, [r6, #0]
 8004e34:	e022      	b.n	8004e7c <_printf_i+0x78>
 8004e36:	0010      	movs	r0, r2
 8004e38:	3863      	subs	r0, #99	; 0x63
 8004e3a:	2815      	cmp	r0, #21
 8004e3c:	d8f7      	bhi.n	8004e2e <_printf_i+0x2a>
 8004e3e:	f7fb f969 	bl	8000114 <__gnu_thumb1_case_shi>
 8004e42:	0016      	.short	0x0016
 8004e44:	fff6001f 	.word	0xfff6001f
 8004e48:	fff6fff6 	.word	0xfff6fff6
 8004e4c:	001ffff6 	.word	0x001ffff6
 8004e50:	fff6fff6 	.word	0xfff6fff6
 8004e54:	fff6fff6 	.word	0xfff6fff6
 8004e58:	003600a8 	.word	0x003600a8
 8004e5c:	fff6009a 	.word	0xfff6009a
 8004e60:	00b9fff6 	.word	0x00b9fff6
 8004e64:	0036fff6 	.word	0x0036fff6
 8004e68:	fff6fff6 	.word	0xfff6fff6
 8004e6c:	009e      	.short	0x009e
 8004e6e:	0026      	movs	r6, r4
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	3642      	adds	r6, #66	; 0x42
 8004e74:	1d11      	adds	r1, r2, #4
 8004e76:	6019      	str	r1, [r3, #0]
 8004e78:	6813      	ldr	r3, [r2, #0]
 8004e7a:	7033      	strb	r3, [r6, #0]
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0a7      	b.n	8004fd0 <_printf_i+0x1cc>
 8004e80:	6808      	ldr	r0, [r1, #0]
 8004e82:	6819      	ldr	r1, [r3, #0]
 8004e84:	1d0a      	adds	r2, r1, #4
 8004e86:	0605      	lsls	r5, r0, #24
 8004e88:	d50b      	bpl.n	8004ea2 <_printf_i+0x9e>
 8004e8a:	680d      	ldr	r5, [r1, #0]
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	da03      	bge.n	8004e9a <_printf_i+0x96>
 8004e92:	232d      	movs	r3, #45	; 0x2d
 8004e94:	9a04      	ldr	r2, [sp, #16]
 8004e96:	426d      	negs	r5, r5
 8004e98:	7013      	strb	r3, [r2, #0]
 8004e9a:	4b61      	ldr	r3, [pc, #388]	; (8005020 <_printf_i+0x21c>)
 8004e9c:	270a      	movs	r7, #10
 8004e9e:	9303      	str	r3, [sp, #12]
 8004ea0:	e01b      	b.n	8004eda <_printf_i+0xd6>
 8004ea2:	680d      	ldr	r5, [r1, #0]
 8004ea4:	601a      	str	r2, [r3, #0]
 8004ea6:	0641      	lsls	r1, r0, #25
 8004ea8:	d5f1      	bpl.n	8004e8e <_printf_i+0x8a>
 8004eaa:	b22d      	sxth	r5, r5
 8004eac:	e7ef      	b.n	8004e8e <_printf_i+0x8a>
 8004eae:	680d      	ldr	r5, [r1, #0]
 8004eb0:	6819      	ldr	r1, [r3, #0]
 8004eb2:	1d08      	adds	r0, r1, #4
 8004eb4:	6018      	str	r0, [r3, #0]
 8004eb6:	062e      	lsls	r6, r5, #24
 8004eb8:	d501      	bpl.n	8004ebe <_printf_i+0xba>
 8004eba:	680d      	ldr	r5, [r1, #0]
 8004ebc:	e003      	b.n	8004ec6 <_printf_i+0xc2>
 8004ebe:	066d      	lsls	r5, r5, #25
 8004ec0:	d5fb      	bpl.n	8004eba <_printf_i+0xb6>
 8004ec2:	680d      	ldr	r5, [r1, #0]
 8004ec4:	b2ad      	uxth	r5, r5
 8004ec6:	4b56      	ldr	r3, [pc, #344]	; (8005020 <_printf_i+0x21c>)
 8004ec8:	2708      	movs	r7, #8
 8004eca:	9303      	str	r3, [sp, #12]
 8004ecc:	2a6f      	cmp	r2, #111	; 0x6f
 8004ece:	d000      	beq.n	8004ed2 <_printf_i+0xce>
 8004ed0:	3702      	adds	r7, #2
 8004ed2:	0023      	movs	r3, r4
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	3343      	adds	r3, #67	; 0x43
 8004ed8:	701a      	strb	r2, [r3, #0]
 8004eda:	6863      	ldr	r3, [r4, #4]
 8004edc:	60a3      	str	r3, [r4, #8]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	db03      	blt.n	8004eea <_printf_i+0xe6>
 8004ee2:	2204      	movs	r2, #4
 8004ee4:	6821      	ldr	r1, [r4, #0]
 8004ee6:	4391      	bics	r1, r2
 8004ee8:	6021      	str	r1, [r4, #0]
 8004eea:	2d00      	cmp	r5, #0
 8004eec:	d102      	bne.n	8004ef4 <_printf_i+0xf0>
 8004eee:	9e04      	ldr	r6, [sp, #16]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00c      	beq.n	8004f0e <_printf_i+0x10a>
 8004ef4:	9e04      	ldr	r6, [sp, #16]
 8004ef6:	0028      	movs	r0, r5
 8004ef8:	0039      	movs	r1, r7
 8004efa:	f7fb f99b 	bl	8000234 <__aeabi_uidivmod>
 8004efe:	9b03      	ldr	r3, [sp, #12]
 8004f00:	3e01      	subs	r6, #1
 8004f02:	5c5b      	ldrb	r3, [r3, r1]
 8004f04:	7033      	strb	r3, [r6, #0]
 8004f06:	002b      	movs	r3, r5
 8004f08:	0005      	movs	r5, r0
 8004f0a:	429f      	cmp	r7, r3
 8004f0c:	d9f3      	bls.n	8004ef6 <_printf_i+0xf2>
 8004f0e:	2f08      	cmp	r7, #8
 8004f10:	d109      	bne.n	8004f26 <_printf_i+0x122>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	07db      	lsls	r3, r3, #31
 8004f16:	d506      	bpl.n	8004f26 <_printf_i+0x122>
 8004f18:	6863      	ldr	r3, [r4, #4]
 8004f1a:	6922      	ldr	r2, [r4, #16]
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	dc02      	bgt.n	8004f26 <_printf_i+0x122>
 8004f20:	2330      	movs	r3, #48	; 0x30
 8004f22:	3e01      	subs	r6, #1
 8004f24:	7033      	strb	r3, [r6, #0]
 8004f26:	9b04      	ldr	r3, [sp, #16]
 8004f28:	1b9b      	subs	r3, r3, r6
 8004f2a:	6123      	str	r3, [r4, #16]
 8004f2c:	9b07      	ldr	r3, [sp, #28]
 8004f2e:	0021      	movs	r1, r4
 8004f30:	9300      	str	r3, [sp, #0]
 8004f32:	9805      	ldr	r0, [sp, #20]
 8004f34:	9b06      	ldr	r3, [sp, #24]
 8004f36:	aa09      	add	r2, sp, #36	; 0x24
 8004f38:	f7ff fef4 	bl	8004d24 <_printf_common>
 8004f3c:	1c43      	adds	r3, r0, #1
 8004f3e:	d14c      	bne.n	8004fda <_printf_i+0x1d6>
 8004f40:	2001      	movs	r0, #1
 8004f42:	4240      	negs	r0, r0
 8004f44:	b00b      	add	sp, #44	; 0x2c
 8004f46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f48:	3145      	adds	r1, #69	; 0x45
 8004f4a:	700a      	strb	r2, [r1, #0]
 8004f4c:	4a34      	ldr	r2, [pc, #208]	; (8005020 <_printf_i+0x21c>)
 8004f4e:	9203      	str	r2, [sp, #12]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	6821      	ldr	r1, [r4, #0]
 8004f54:	ca20      	ldmia	r2!, {r5}
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	0608      	lsls	r0, r1, #24
 8004f5a:	d516      	bpl.n	8004f8a <_printf_i+0x186>
 8004f5c:	07cb      	lsls	r3, r1, #31
 8004f5e:	d502      	bpl.n	8004f66 <_printf_i+0x162>
 8004f60:	2320      	movs	r3, #32
 8004f62:	4319      	orrs	r1, r3
 8004f64:	6021      	str	r1, [r4, #0]
 8004f66:	2710      	movs	r7, #16
 8004f68:	2d00      	cmp	r5, #0
 8004f6a:	d1b2      	bne.n	8004ed2 <_printf_i+0xce>
 8004f6c:	2320      	movs	r3, #32
 8004f6e:	6822      	ldr	r2, [r4, #0]
 8004f70:	439a      	bics	r2, r3
 8004f72:	6022      	str	r2, [r4, #0]
 8004f74:	e7ad      	b.n	8004ed2 <_printf_i+0xce>
 8004f76:	2220      	movs	r2, #32
 8004f78:	6809      	ldr	r1, [r1, #0]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	6022      	str	r2, [r4, #0]
 8004f7e:	0022      	movs	r2, r4
 8004f80:	2178      	movs	r1, #120	; 0x78
 8004f82:	3245      	adds	r2, #69	; 0x45
 8004f84:	7011      	strb	r1, [r2, #0]
 8004f86:	4a27      	ldr	r2, [pc, #156]	; (8005024 <_printf_i+0x220>)
 8004f88:	e7e1      	b.n	8004f4e <_printf_i+0x14a>
 8004f8a:	0648      	lsls	r0, r1, #25
 8004f8c:	d5e6      	bpl.n	8004f5c <_printf_i+0x158>
 8004f8e:	b2ad      	uxth	r5, r5
 8004f90:	e7e4      	b.n	8004f5c <_printf_i+0x158>
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	680d      	ldr	r5, [r1, #0]
 8004f96:	1d10      	adds	r0, r2, #4
 8004f98:	6949      	ldr	r1, [r1, #20]
 8004f9a:	6018      	str	r0, [r3, #0]
 8004f9c:	6813      	ldr	r3, [r2, #0]
 8004f9e:	062e      	lsls	r6, r5, #24
 8004fa0:	d501      	bpl.n	8004fa6 <_printf_i+0x1a2>
 8004fa2:	6019      	str	r1, [r3, #0]
 8004fa4:	e002      	b.n	8004fac <_printf_i+0x1a8>
 8004fa6:	066d      	lsls	r5, r5, #25
 8004fa8:	d5fb      	bpl.n	8004fa2 <_printf_i+0x19e>
 8004faa:	8019      	strh	r1, [r3, #0]
 8004fac:	2300      	movs	r3, #0
 8004fae:	9e04      	ldr	r6, [sp, #16]
 8004fb0:	6123      	str	r3, [r4, #16]
 8004fb2:	e7bb      	b.n	8004f2c <_printf_i+0x128>
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	1d11      	adds	r1, r2, #4
 8004fb8:	6019      	str	r1, [r3, #0]
 8004fba:	6816      	ldr	r6, [r2, #0]
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	0030      	movs	r0, r6
 8004fc0:	6862      	ldr	r2, [r4, #4]
 8004fc2:	f000 f831 	bl	8005028 <memchr>
 8004fc6:	2800      	cmp	r0, #0
 8004fc8:	d001      	beq.n	8004fce <_printf_i+0x1ca>
 8004fca:	1b80      	subs	r0, r0, r6
 8004fcc:	6060      	str	r0, [r4, #4]
 8004fce:	6863      	ldr	r3, [r4, #4]
 8004fd0:	6123      	str	r3, [r4, #16]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	9a04      	ldr	r2, [sp, #16]
 8004fd6:	7013      	strb	r3, [r2, #0]
 8004fd8:	e7a8      	b.n	8004f2c <_printf_i+0x128>
 8004fda:	6923      	ldr	r3, [r4, #16]
 8004fdc:	0032      	movs	r2, r6
 8004fde:	9906      	ldr	r1, [sp, #24]
 8004fe0:	9805      	ldr	r0, [sp, #20]
 8004fe2:	9d07      	ldr	r5, [sp, #28]
 8004fe4:	47a8      	blx	r5
 8004fe6:	1c43      	adds	r3, r0, #1
 8004fe8:	d0aa      	beq.n	8004f40 <_printf_i+0x13c>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	079b      	lsls	r3, r3, #30
 8004fee:	d415      	bmi.n	800501c <_printf_i+0x218>
 8004ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ff2:	68e0      	ldr	r0, [r4, #12]
 8004ff4:	4298      	cmp	r0, r3
 8004ff6:	daa5      	bge.n	8004f44 <_printf_i+0x140>
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	e7a3      	b.n	8004f44 <_printf_i+0x140>
 8004ffc:	0022      	movs	r2, r4
 8004ffe:	2301      	movs	r3, #1
 8005000:	9906      	ldr	r1, [sp, #24]
 8005002:	9805      	ldr	r0, [sp, #20]
 8005004:	9e07      	ldr	r6, [sp, #28]
 8005006:	3219      	adds	r2, #25
 8005008:	47b0      	blx	r6
 800500a:	1c43      	adds	r3, r0, #1
 800500c:	d098      	beq.n	8004f40 <_printf_i+0x13c>
 800500e:	3501      	adds	r5, #1
 8005010:	68e3      	ldr	r3, [r4, #12]
 8005012:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005014:	1a9b      	subs	r3, r3, r2
 8005016:	42ab      	cmp	r3, r5
 8005018:	dcf0      	bgt.n	8004ffc <_printf_i+0x1f8>
 800501a:	e7e9      	b.n	8004ff0 <_printf_i+0x1ec>
 800501c:	2500      	movs	r5, #0
 800501e:	e7f7      	b.n	8005010 <_printf_i+0x20c>
 8005020:	08005415 	.word	0x08005415
 8005024:	08005426 	.word	0x08005426

08005028 <memchr>:
 8005028:	b2c9      	uxtb	r1, r1
 800502a:	1882      	adds	r2, r0, r2
 800502c:	4290      	cmp	r0, r2
 800502e:	d101      	bne.n	8005034 <memchr+0xc>
 8005030:	2000      	movs	r0, #0
 8005032:	4770      	bx	lr
 8005034:	7803      	ldrb	r3, [r0, #0]
 8005036:	428b      	cmp	r3, r1
 8005038:	d0fb      	beq.n	8005032 <memchr+0xa>
 800503a:	3001      	adds	r0, #1
 800503c:	e7f6      	b.n	800502c <memchr+0x4>

0800503e <memcpy>:
 800503e:	2300      	movs	r3, #0
 8005040:	b510      	push	{r4, lr}
 8005042:	429a      	cmp	r2, r3
 8005044:	d100      	bne.n	8005048 <memcpy+0xa>
 8005046:	bd10      	pop	{r4, pc}
 8005048:	5ccc      	ldrb	r4, [r1, r3]
 800504a:	54c4      	strb	r4, [r0, r3]
 800504c:	3301      	adds	r3, #1
 800504e:	e7f8      	b.n	8005042 <memcpy+0x4>

08005050 <memmove>:
 8005050:	b510      	push	{r4, lr}
 8005052:	4288      	cmp	r0, r1
 8005054:	d902      	bls.n	800505c <memmove+0xc>
 8005056:	188b      	adds	r3, r1, r2
 8005058:	4298      	cmp	r0, r3
 800505a:	d303      	bcc.n	8005064 <memmove+0x14>
 800505c:	2300      	movs	r3, #0
 800505e:	e007      	b.n	8005070 <memmove+0x20>
 8005060:	5c8b      	ldrb	r3, [r1, r2]
 8005062:	5483      	strb	r3, [r0, r2]
 8005064:	3a01      	subs	r2, #1
 8005066:	d2fb      	bcs.n	8005060 <memmove+0x10>
 8005068:	bd10      	pop	{r4, pc}
 800506a:	5ccc      	ldrb	r4, [r1, r3]
 800506c:	54c4      	strb	r4, [r0, r3]
 800506e:	3301      	adds	r3, #1
 8005070:	429a      	cmp	r2, r3
 8005072:	d1fa      	bne.n	800506a <memmove+0x1a>
 8005074:	e7f8      	b.n	8005068 <memmove+0x18>
	...

08005078 <_free_r>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	0005      	movs	r5, r0
 800507c:	2900      	cmp	r1, #0
 800507e:	d010      	beq.n	80050a2 <_free_r+0x2a>
 8005080:	1f0c      	subs	r4, r1, #4
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	da00      	bge.n	800508a <_free_r+0x12>
 8005088:	18e4      	adds	r4, r4, r3
 800508a:	0028      	movs	r0, r5
 800508c:	f000 f918 	bl	80052c0 <__malloc_lock>
 8005090:	4a1d      	ldr	r2, [pc, #116]	; (8005108 <_free_r+0x90>)
 8005092:	6813      	ldr	r3, [r2, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d105      	bne.n	80050a4 <_free_r+0x2c>
 8005098:	6063      	str	r3, [r4, #4]
 800509a:	6014      	str	r4, [r2, #0]
 800509c:	0028      	movs	r0, r5
 800509e:	f000 f917 	bl	80052d0 <__malloc_unlock>
 80050a2:	bd70      	pop	{r4, r5, r6, pc}
 80050a4:	42a3      	cmp	r3, r4
 80050a6:	d908      	bls.n	80050ba <_free_r+0x42>
 80050a8:	6821      	ldr	r1, [r4, #0]
 80050aa:	1860      	adds	r0, r4, r1
 80050ac:	4283      	cmp	r3, r0
 80050ae:	d1f3      	bne.n	8005098 <_free_r+0x20>
 80050b0:	6818      	ldr	r0, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	1841      	adds	r1, r0, r1
 80050b6:	6021      	str	r1, [r4, #0]
 80050b8:	e7ee      	b.n	8005098 <_free_r+0x20>
 80050ba:	001a      	movs	r2, r3
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d001      	beq.n	80050c6 <_free_r+0x4e>
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	d9f9      	bls.n	80050ba <_free_r+0x42>
 80050c6:	6811      	ldr	r1, [r2, #0]
 80050c8:	1850      	adds	r0, r2, r1
 80050ca:	42a0      	cmp	r0, r4
 80050cc:	d10b      	bne.n	80050e6 <_free_r+0x6e>
 80050ce:	6820      	ldr	r0, [r4, #0]
 80050d0:	1809      	adds	r1, r1, r0
 80050d2:	1850      	adds	r0, r2, r1
 80050d4:	6011      	str	r1, [r2, #0]
 80050d6:	4283      	cmp	r3, r0
 80050d8:	d1e0      	bne.n	800509c <_free_r+0x24>
 80050da:	6818      	ldr	r0, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	1841      	adds	r1, r0, r1
 80050e0:	6011      	str	r1, [r2, #0]
 80050e2:	6053      	str	r3, [r2, #4]
 80050e4:	e7da      	b.n	800509c <_free_r+0x24>
 80050e6:	42a0      	cmp	r0, r4
 80050e8:	d902      	bls.n	80050f0 <_free_r+0x78>
 80050ea:	230c      	movs	r3, #12
 80050ec:	602b      	str	r3, [r5, #0]
 80050ee:	e7d5      	b.n	800509c <_free_r+0x24>
 80050f0:	6821      	ldr	r1, [r4, #0]
 80050f2:	1860      	adds	r0, r4, r1
 80050f4:	4283      	cmp	r3, r0
 80050f6:	d103      	bne.n	8005100 <_free_r+0x88>
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	1841      	adds	r1, r0, r1
 80050fe:	6021      	str	r1, [r4, #0]
 8005100:	6063      	str	r3, [r4, #4]
 8005102:	6054      	str	r4, [r2, #4]
 8005104:	e7ca      	b.n	800509c <_free_r+0x24>
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	20002534 	.word	0x20002534

0800510c <sbrk_aligned>:
 800510c:	b570      	push	{r4, r5, r6, lr}
 800510e:	4e0f      	ldr	r6, [pc, #60]	; (800514c <sbrk_aligned+0x40>)
 8005110:	000d      	movs	r5, r1
 8005112:	6831      	ldr	r1, [r6, #0]
 8005114:	0004      	movs	r4, r0
 8005116:	2900      	cmp	r1, #0
 8005118:	d102      	bne.n	8005120 <sbrk_aligned+0x14>
 800511a:	f000 f8bf 	bl	800529c <_sbrk_r>
 800511e:	6030      	str	r0, [r6, #0]
 8005120:	0029      	movs	r1, r5
 8005122:	0020      	movs	r0, r4
 8005124:	f000 f8ba 	bl	800529c <_sbrk_r>
 8005128:	1c43      	adds	r3, r0, #1
 800512a:	d00a      	beq.n	8005142 <sbrk_aligned+0x36>
 800512c:	2303      	movs	r3, #3
 800512e:	1cc5      	adds	r5, r0, #3
 8005130:	439d      	bics	r5, r3
 8005132:	42a8      	cmp	r0, r5
 8005134:	d007      	beq.n	8005146 <sbrk_aligned+0x3a>
 8005136:	1a29      	subs	r1, r5, r0
 8005138:	0020      	movs	r0, r4
 800513a:	f000 f8af 	bl	800529c <_sbrk_r>
 800513e:	1c43      	adds	r3, r0, #1
 8005140:	d101      	bne.n	8005146 <sbrk_aligned+0x3a>
 8005142:	2501      	movs	r5, #1
 8005144:	426d      	negs	r5, r5
 8005146:	0028      	movs	r0, r5
 8005148:	bd70      	pop	{r4, r5, r6, pc}
 800514a:	46c0      	nop			; (mov r8, r8)
 800514c:	20002538 	.word	0x20002538

08005150 <_malloc_r>:
 8005150:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005152:	2203      	movs	r2, #3
 8005154:	1ccb      	adds	r3, r1, #3
 8005156:	4393      	bics	r3, r2
 8005158:	3308      	adds	r3, #8
 800515a:	0006      	movs	r6, r0
 800515c:	001f      	movs	r7, r3
 800515e:	2b0c      	cmp	r3, #12
 8005160:	d232      	bcs.n	80051c8 <_malloc_r+0x78>
 8005162:	270c      	movs	r7, #12
 8005164:	42b9      	cmp	r1, r7
 8005166:	d831      	bhi.n	80051cc <_malloc_r+0x7c>
 8005168:	0030      	movs	r0, r6
 800516a:	f000 f8a9 	bl	80052c0 <__malloc_lock>
 800516e:	4d32      	ldr	r5, [pc, #200]	; (8005238 <_malloc_r+0xe8>)
 8005170:	682b      	ldr	r3, [r5, #0]
 8005172:	001c      	movs	r4, r3
 8005174:	2c00      	cmp	r4, #0
 8005176:	d12e      	bne.n	80051d6 <_malloc_r+0x86>
 8005178:	0039      	movs	r1, r7
 800517a:	0030      	movs	r0, r6
 800517c:	f7ff ffc6 	bl	800510c <sbrk_aligned>
 8005180:	0004      	movs	r4, r0
 8005182:	1c43      	adds	r3, r0, #1
 8005184:	d11e      	bne.n	80051c4 <_malloc_r+0x74>
 8005186:	682c      	ldr	r4, [r5, #0]
 8005188:	0025      	movs	r5, r4
 800518a:	2d00      	cmp	r5, #0
 800518c:	d14a      	bne.n	8005224 <_malloc_r+0xd4>
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	0029      	movs	r1, r5
 8005192:	18e3      	adds	r3, r4, r3
 8005194:	0030      	movs	r0, r6
 8005196:	9301      	str	r3, [sp, #4]
 8005198:	f000 f880 	bl	800529c <_sbrk_r>
 800519c:	9b01      	ldr	r3, [sp, #4]
 800519e:	4283      	cmp	r3, r0
 80051a0:	d143      	bne.n	800522a <_malloc_r+0xda>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	3703      	adds	r7, #3
 80051a6:	1aff      	subs	r7, r7, r3
 80051a8:	2303      	movs	r3, #3
 80051aa:	439f      	bics	r7, r3
 80051ac:	3708      	adds	r7, #8
 80051ae:	2f0c      	cmp	r7, #12
 80051b0:	d200      	bcs.n	80051b4 <_malloc_r+0x64>
 80051b2:	270c      	movs	r7, #12
 80051b4:	0039      	movs	r1, r7
 80051b6:	0030      	movs	r0, r6
 80051b8:	f7ff ffa8 	bl	800510c <sbrk_aligned>
 80051bc:	1c43      	adds	r3, r0, #1
 80051be:	d034      	beq.n	800522a <_malloc_r+0xda>
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	19df      	adds	r7, r3, r7
 80051c4:	6027      	str	r7, [r4, #0]
 80051c6:	e013      	b.n	80051f0 <_malloc_r+0xa0>
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	dacb      	bge.n	8005164 <_malloc_r+0x14>
 80051cc:	230c      	movs	r3, #12
 80051ce:	2500      	movs	r5, #0
 80051d0:	6033      	str	r3, [r6, #0]
 80051d2:	0028      	movs	r0, r5
 80051d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051d6:	6822      	ldr	r2, [r4, #0]
 80051d8:	1bd1      	subs	r1, r2, r7
 80051da:	d420      	bmi.n	800521e <_malloc_r+0xce>
 80051dc:	290b      	cmp	r1, #11
 80051de:	d917      	bls.n	8005210 <_malloc_r+0xc0>
 80051e0:	19e2      	adds	r2, r4, r7
 80051e2:	6027      	str	r7, [r4, #0]
 80051e4:	42a3      	cmp	r3, r4
 80051e6:	d111      	bne.n	800520c <_malloc_r+0xbc>
 80051e8:	602a      	str	r2, [r5, #0]
 80051ea:	6863      	ldr	r3, [r4, #4]
 80051ec:	6011      	str	r1, [r2, #0]
 80051ee:	6053      	str	r3, [r2, #4]
 80051f0:	0030      	movs	r0, r6
 80051f2:	0025      	movs	r5, r4
 80051f4:	f000 f86c 	bl	80052d0 <__malloc_unlock>
 80051f8:	2207      	movs	r2, #7
 80051fa:	350b      	adds	r5, #11
 80051fc:	1d23      	adds	r3, r4, #4
 80051fe:	4395      	bics	r5, r2
 8005200:	1aea      	subs	r2, r5, r3
 8005202:	429d      	cmp	r5, r3
 8005204:	d0e5      	beq.n	80051d2 <_malloc_r+0x82>
 8005206:	1b5b      	subs	r3, r3, r5
 8005208:	50a3      	str	r3, [r4, r2]
 800520a:	e7e2      	b.n	80051d2 <_malloc_r+0x82>
 800520c:	605a      	str	r2, [r3, #4]
 800520e:	e7ec      	b.n	80051ea <_malloc_r+0x9a>
 8005210:	6862      	ldr	r2, [r4, #4]
 8005212:	42a3      	cmp	r3, r4
 8005214:	d101      	bne.n	800521a <_malloc_r+0xca>
 8005216:	602a      	str	r2, [r5, #0]
 8005218:	e7ea      	b.n	80051f0 <_malloc_r+0xa0>
 800521a:	605a      	str	r2, [r3, #4]
 800521c:	e7e8      	b.n	80051f0 <_malloc_r+0xa0>
 800521e:	0023      	movs	r3, r4
 8005220:	6864      	ldr	r4, [r4, #4]
 8005222:	e7a7      	b.n	8005174 <_malloc_r+0x24>
 8005224:	002c      	movs	r4, r5
 8005226:	686d      	ldr	r5, [r5, #4]
 8005228:	e7af      	b.n	800518a <_malloc_r+0x3a>
 800522a:	230c      	movs	r3, #12
 800522c:	0030      	movs	r0, r6
 800522e:	6033      	str	r3, [r6, #0]
 8005230:	f000 f84e 	bl	80052d0 <__malloc_unlock>
 8005234:	e7cd      	b.n	80051d2 <_malloc_r+0x82>
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	20002534 	.word	0x20002534

0800523c <_realloc_r>:
 800523c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800523e:	0007      	movs	r7, r0
 8005240:	000e      	movs	r6, r1
 8005242:	0014      	movs	r4, r2
 8005244:	2900      	cmp	r1, #0
 8005246:	d105      	bne.n	8005254 <_realloc_r+0x18>
 8005248:	0011      	movs	r1, r2
 800524a:	f7ff ff81 	bl	8005150 <_malloc_r>
 800524e:	0005      	movs	r5, r0
 8005250:	0028      	movs	r0, r5
 8005252:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005254:	2a00      	cmp	r2, #0
 8005256:	d103      	bne.n	8005260 <_realloc_r+0x24>
 8005258:	f7ff ff0e 	bl	8005078 <_free_r>
 800525c:	0025      	movs	r5, r4
 800525e:	e7f7      	b.n	8005250 <_realloc_r+0x14>
 8005260:	f000 f83e 	bl	80052e0 <_malloc_usable_size_r>
 8005264:	9001      	str	r0, [sp, #4]
 8005266:	4284      	cmp	r4, r0
 8005268:	d803      	bhi.n	8005272 <_realloc_r+0x36>
 800526a:	0035      	movs	r5, r6
 800526c:	0843      	lsrs	r3, r0, #1
 800526e:	42a3      	cmp	r3, r4
 8005270:	d3ee      	bcc.n	8005250 <_realloc_r+0x14>
 8005272:	0021      	movs	r1, r4
 8005274:	0038      	movs	r0, r7
 8005276:	f7ff ff6b 	bl	8005150 <_malloc_r>
 800527a:	1e05      	subs	r5, r0, #0
 800527c:	d0e8      	beq.n	8005250 <_realloc_r+0x14>
 800527e:	9b01      	ldr	r3, [sp, #4]
 8005280:	0022      	movs	r2, r4
 8005282:	429c      	cmp	r4, r3
 8005284:	d900      	bls.n	8005288 <_realloc_r+0x4c>
 8005286:	001a      	movs	r2, r3
 8005288:	0031      	movs	r1, r6
 800528a:	0028      	movs	r0, r5
 800528c:	f7ff fed7 	bl	800503e <memcpy>
 8005290:	0031      	movs	r1, r6
 8005292:	0038      	movs	r0, r7
 8005294:	f7ff fef0 	bl	8005078 <_free_r>
 8005298:	e7da      	b.n	8005250 <_realloc_r+0x14>
	...

0800529c <_sbrk_r>:
 800529c:	2300      	movs	r3, #0
 800529e:	b570      	push	{r4, r5, r6, lr}
 80052a0:	4d06      	ldr	r5, [pc, #24]	; (80052bc <_sbrk_r+0x20>)
 80052a2:	0004      	movs	r4, r0
 80052a4:	0008      	movs	r0, r1
 80052a6:	602b      	str	r3, [r5, #0]
 80052a8:	f7fb fe58 	bl	8000f5c <_sbrk>
 80052ac:	1c43      	adds	r3, r0, #1
 80052ae:	d103      	bne.n	80052b8 <_sbrk_r+0x1c>
 80052b0:	682b      	ldr	r3, [r5, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d000      	beq.n	80052b8 <_sbrk_r+0x1c>
 80052b6:	6023      	str	r3, [r4, #0]
 80052b8:	bd70      	pop	{r4, r5, r6, pc}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	2000253c 	.word	0x2000253c

080052c0 <__malloc_lock>:
 80052c0:	b510      	push	{r4, lr}
 80052c2:	4802      	ldr	r0, [pc, #8]	; (80052cc <__malloc_lock+0xc>)
 80052c4:	f000 f814 	bl	80052f0 <__retarget_lock_acquire_recursive>
 80052c8:	bd10      	pop	{r4, pc}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	20002540 	.word	0x20002540

080052d0 <__malloc_unlock>:
 80052d0:	b510      	push	{r4, lr}
 80052d2:	4802      	ldr	r0, [pc, #8]	; (80052dc <__malloc_unlock+0xc>)
 80052d4:	f000 f80d 	bl	80052f2 <__retarget_lock_release_recursive>
 80052d8:	bd10      	pop	{r4, pc}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	20002540 	.word	0x20002540

080052e0 <_malloc_usable_size_r>:
 80052e0:	1f0b      	subs	r3, r1, #4
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	1f18      	subs	r0, r3, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	da01      	bge.n	80052ee <_malloc_usable_size_r+0xe>
 80052ea:	580b      	ldr	r3, [r1, r0]
 80052ec:	18c0      	adds	r0, r0, r3
 80052ee:	4770      	bx	lr

080052f0 <__retarget_lock_acquire_recursive>:
 80052f0:	4770      	bx	lr

080052f2 <__retarget_lock_release_recursive>:
 80052f2:	4770      	bx	lr

080052f4 <_init>:
 80052f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052f6:	46c0      	nop			; (mov r8, r8)
 80052f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fa:	bc08      	pop	{r3}
 80052fc:	469e      	mov	lr, r3
 80052fe:	4770      	bx	lr

08005300 <_fini>:
 8005300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005302:	46c0      	nop			; (mov r8, r8)
 8005304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005306:	bc08      	pop	{r3}
 8005308:	469e      	mov	lr, r3
 800530a:	4770      	bx	lr
