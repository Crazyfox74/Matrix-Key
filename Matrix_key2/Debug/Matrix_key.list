
Matrix_key.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005054  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800523c  0800523c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  0800523c  0800523c  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800523c  0800523c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800523c  0800523c  0001523c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005240  08005240  00015240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08005244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024a4  2000009c  080052e0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002540  080052e0  00022540  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e5b2  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002280  00000000  00000000  0002e676  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  000308f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  000315d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000420e  00000000  00000000  000321b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010efb  00000000  00000000  000363be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9434  00000000  00000000  000472b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f06ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030a0  00000000  00000000  000f0740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000009c 	.word	0x2000009c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080050f8 	.word	0x080050f8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	200000a0 	.word	0x200000a0
 8000100:	080050f8 	.word	0x080050f8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__gnu_thumb1_case_shi>:
 8000114:	b403      	push	{r0, r1}
 8000116:	4671      	mov	r1, lr
 8000118:	0849      	lsrs	r1, r1, #1
 800011a:	0040      	lsls	r0, r0, #1
 800011c:	0049      	lsls	r1, r1, #1
 800011e:	5e09      	ldrsh	r1, [r1, r0]
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	448e      	add	lr, r1
 8000124:	bc03      	pop	{r0, r1}
 8000126:	4770      	bx	lr

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f806 	bl	800023c <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__aeabi_idiv0>:
 800023c:	4770      	bx	lr
 800023e:	46c0      	nop			; (mov r8, r8)

08000240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000246:	4b0c      	ldr	r3, [pc, #48]	; (8000278 <MX_DMA_Init+0x38>)
 8000248:	695a      	ldr	r2, [r3, #20]
 800024a:	4b0b      	ldr	r3, [pc, #44]	; (8000278 <MX_DMA_Init+0x38>)
 800024c:	2101      	movs	r1, #1
 800024e:	430a      	orrs	r2, r1
 8000250:	615a      	str	r2, [r3, #20]
 8000252:	4b09      	ldr	r3, [pc, #36]	; (8000278 <MX_DMA_Init+0x38>)
 8000254:	695b      	ldr	r3, [r3, #20]
 8000256:	2201      	movs	r2, #1
 8000258:	4013      	ands	r3, r2
 800025a:	607b      	str	r3, [r7, #4]
 800025c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Ch4_7_DMA2_Ch3_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Ch4_7_DMA2_Ch3_5_IRQn, 0, 0);
 800025e:	2200      	movs	r2, #0
 8000260:	2100      	movs	r1, #0
 8000262:	200b      	movs	r0, #11
 8000264:	f001 f956 	bl	8001514 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Ch4_7_DMA2_Ch3_5_IRQn);
 8000268:	200b      	movs	r0, #11
 800026a:	f001 f968 	bl	800153e <HAL_NVIC_EnableIRQ>

}
 800026e:	46c0      	nop			; (mov r8, r8)
 8000270:	46bd      	mov	sp, r7
 8000272:	b002      	add	sp, #8
 8000274:	bd80      	pop	{r7, pc}
 8000276:	46c0      	nop			; (mov r8, r8)
 8000278:	40021000 	.word	0x40021000

0800027c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800027c:	b590      	push	{r4, r7, lr}
 800027e:	b089      	sub	sp, #36	; 0x24
 8000280:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000282:	240c      	movs	r4, #12
 8000284:	193b      	adds	r3, r7, r4
 8000286:	0018      	movs	r0, r3
 8000288:	2314      	movs	r3, #20
 800028a:	001a      	movs	r2, r3
 800028c:	2100      	movs	r1, #0
 800028e:	f004 faca 	bl	8004826 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000292:	4b5b      	ldr	r3, [pc, #364]	; (8000400 <MX_GPIO_Init+0x184>)
 8000294:	695a      	ldr	r2, [r3, #20]
 8000296:	4b5a      	ldr	r3, [pc, #360]	; (8000400 <MX_GPIO_Init+0x184>)
 8000298:	2180      	movs	r1, #128	; 0x80
 800029a:	03c9      	lsls	r1, r1, #15
 800029c:	430a      	orrs	r2, r1
 800029e:	615a      	str	r2, [r3, #20]
 80002a0:	4b57      	ldr	r3, [pc, #348]	; (8000400 <MX_GPIO_Init+0x184>)
 80002a2:	695a      	ldr	r2, [r3, #20]
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	03db      	lsls	r3, r3, #15
 80002a8:	4013      	ands	r3, r2
 80002aa:	60bb      	str	r3, [r7, #8]
 80002ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ae:	4b54      	ldr	r3, [pc, #336]	; (8000400 <MX_GPIO_Init+0x184>)
 80002b0:	695a      	ldr	r2, [r3, #20]
 80002b2:	4b53      	ldr	r3, [pc, #332]	; (8000400 <MX_GPIO_Init+0x184>)
 80002b4:	2180      	movs	r1, #128	; 0x80
 80002b6:	02c9      	lsls	r1, r1, #11
 80002b8:	430a      	orrs	r2, r1
 80002ba:	615a      	str	r2, [r3, #20]
 80002bc:	4b50      	ldr	r3, [pc, #320]	; (8000400 <MX_GPIO_Init+0x184>)
 80002be:	695a      	ldr	r2, [r3, #20]
 80002c0:	2380      	movs	r3, #128	; 0x80
 80002c2:	02db      	lsls	r3, r3, #11
 80002c4:	4013      	ands	r3, r2
 80002c6:	607b      	str	r3, [r7, #4]
 80002c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002ca:	4b4d      	ldr	r3, [pc, #308]	; (8000400 <MX_GPIO_Init+0x184>)
 80002cc:	695a      	ldr	r2, [r3, #20]
 80002ce:	4b4c      	ldr	r3, [pc, #304]	; (8000400 <MX_GPIO_Init+0x184>)
 80002d0:	2180      	movs	r1, #128	; 0x80
 80002d2:	0289      	lsls	r1, r1, #10
 80002d4:	430a      	orrs	r2, r1
 80002d6:	615a      	str	r2, [r3, #20]
 80002d8:	4b49      	ldr	r3, [pc, #292]	; (8000400 <MX_GPIO_Init+0x184>)
 80002da:	695a      	ldr	r2, [r3, #20]
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	029b      	lsls	r3, r3, #10
 80002e0:	4013      	ands	r3, r2
 80002e2:	603b      	str	r3, [r7, #0]
 80002e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11|GPIO_PIN_15, GPIO_PIN_RESET);
 80002e6:	2388      	movs	r3, #136	; 0x88
 80002e8:	0219      	lsls	r1, r3, #8
 80002ea:	2390      	movs	r3, #144	; 0x90
 80002ec:	05db      	lsls	r3, r3, #23
 80002ee:	2200      	movs	r2, #0
 80002f0:	0018      	movs	r0, r3
 80002f2:	f001 fcb5 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80002f6:	4b43      	ldr	r3, [pc, #268]	; (8000404 <MX_GPIO_Init+0x188>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	21f8      	movs	r1, #248	; 0xf8
 80002fc:	0018      	movs	r0, r3
 80002fe:	f001 fcaf 	bl	8001c60 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_11, GPIO_PIN_RESET);
 8000302:	2380      	movs	r3, #128	; 0x80
 8000304:	011b      	lsls	r3, r3, #4
 8000306:	4840      	ldr	r0, [pc, #256]	; (8000408 <MX_GPIO_Init+0x18c>)
 8000308:	2200      	movs	r2, #0
 800030a:	0019      	movs	r1, r3
 800030c:	f001 fca8 	bl	8001c60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000310:	193b      	adds	r3, r7, r4
 8000312:	22f0      	movs	r2, #240	; 0xf0
 8000314:	0212      	lsls	r2, r2, #8
 8000316:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000318:	193b      	adds	r3, r7, r4
 800031a:	2200      	movs	r2, #0
 800031c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800031e:	193b      	adds	r3, r7, r4
 8000320:	2201      	movs	r2, #1
 8000322:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000324:	193b      	adds	r3, r7, r4
 8000326:	4a37      	ldr	r2, [pc, #220]	; (8000404 <MX_GPIO_Init+0x188>)
 8000328:	0019      	movs	r1, r3
 800032a:	0010      	movs	r0, r2
 800032c:	f001 fb20 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000330:	193b      	adds	r3, r7, r4
 8000332:	2280      	movs	r2, #128	; 0x80
 8000334:	0052      	lsls	r2, r2, #1
 8000336:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000338:	193b      	adds	r3, r7, r4
 800033a:	2200      	movs	r2, #0
 800033c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800033e:	193b      	adds	r3, r7, r4
 8000340:	2201      	movs	r2, #1
 8000342:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000344:	193a      	adds	r2, r7, r4
 8000346:	2390      	movs	r3, #144	; 0x90
 8000348:	05db      	lsls	r3, r3, #23
 800034a:	0011      	movs	r1, r2
 800034c:	0018      	movs	r0, r3
 800034e:	f001 fb0f 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000352:	0021      	movs	r1, r4
 8000354:	187b      	adds	r3, r7, r1
 8000356:	2280      	movs	r2, #128	; 0x80
 8000358:	0112      	lsls	r2, r2, #4
 800035a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035c:	000c      	movs	r4, r1
 800035e:	193b      	adds	r3, r7, r4
 8000360:	2201      	movs	r2, #1
 8000362:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000364:	193b      	adds	r3, r7, r4
 8000366:	2201      	movs	r2, #1
 8000368:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800036a:	193b      	adds	r3, r7, r4
 800036c:	2200      	movs	r2, #0
 800036e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000370:	193a      	adds	r2, r7, r4
 8000372:	2390      	movs	r3, #144	; 0x90
 8000374:	05db      	lsls	r3, r3, #23
 8000376:	0011      	movs	r1, r2
 8000378:	0018      	movs	r0, r3
 800037a:	f001 faf9 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800037e:	0021      	movs	r1, r4
 8000380:	187b      	adds	r3, r7, r1
 8000382:	2280      	movs	r2, #128	; 0x80
 8000384:	0212      	lsls	r2, r2, #8
 8000386:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000388:	000c      	movs	r4, r1
 800038a:	193b      	adds	r3, r7, r4
 800038c:	2201      	movs	r2, #1
 800038e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000390:	193b      	adds	r3, r7, r4
 8000392:	2201      	movs	r2, #1
 8000394:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000396:	193b      	adds	r3, r7, r4
 8000398:	2203      	movs	r2, #3
 800039a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039c:	193a      	adds	r2, r7, r4
 800039e:	2390      	movs	r3, #144	; 0x90
 80003a0:	05db      	lsls	r3, r3, #23
 80003a2:	0011      	movs	r1, r2
 80003a4:	0018      	movs	r0, r3
 80003a6:	f001 fae3 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80003aa:	193b      	adds	r3, r7, r4
 80003ac:	22f8      	movs	r2, #248	; 0xf8
 80003ae:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003b0:	193b      	adds	r3, r7, r4
 80003b2:	2201      	movs	r2, #1
 80003b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003b6:	193b      	adds	r3, r7, r4
 80003b8:	2201      	movs	r2, #1
 80003ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003bc:	193b      	adds	r3, r7, r4
 80003be:	2200      	movs	r2, #0
 80003c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	4a0f      	ldr	r2, [pc, #60]	; (8000404 <MX_GPIO_Init+0x188>)
 80003c6:	0019      	movs	r1, r3
 80003c8:	0010      	movs	r0, r2
 80003ca:	f001 fad1 	bl	8001970 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80003ce:	0021      	movs	r1, r4
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2280      	movs	r2, #128	; 0x80
 80003d4:	0112      	lsls	r2, r2, #4
 80003d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2201      	movs	r2, #1
 80003dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003de:	187b      	adds	r3, r7, r1
 80003e0:	2201      	movs	r2, #1
 80003e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2200      	movs	r2, #0
 80003e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	4a06      	ldr	r2, [pc, #24]	; (8000408 <MX_GPIO_Init+0x18c>)
 80003ee:	0019      	movs	r1, r3
 80003f0:	0010      	movs	r0, r2
 80003f2:	f001 fabd 	bl	8001970 <HAL_GPIO_Init>

}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b009      	add	sp, #36	; 0x24
 80003fc:	bd90      	pop	{r4, r7, pc}
 80003fe:	46c0      	nop			; (mov r8, r8)
 8000400:	40021000 	.word	0x40021000
 8000404:	48000400 	.word	0x48000400
 8000408:	48001400 	.word	0x48001400

0800040c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	if(htim -> Instance == TIM3){
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	4ada      	ldr	r2, [pc, #872]	; (8000784 <HAL_TIM_PeriodElapsedCallback+0x378>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d000      	beq.n	8000420 <HAL_TIM_PeriodElapsedCallback+0x14>
 800041e:	e1af      	b.n	8000780 <HAL_TIM_PeriodElapsedCallback+0x374>

		if(cnt_scan > 0)	cnt_scan--;
 8000420:	4bd9      	ldr	r3, [pc, #868]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d006      	beq.n	8000436 <HAL_TIM_PeriodElapsedCallback+0x2a>
 8000428:	4bd7      	ldr	r3, [pc, #860]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	3b01      	subs	r3, #1
 800042e:	b2da      	uxtb	r2, r3
 8000430:	4bd5      	ldr	r3, [pc, #852]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000432:	701a      	strb	r2, [r3, #0]
 8000434:	e002      	b.n	800043c <HAL_TIM_PeriodElapsedCallback+0x30>
			else cnt_scan = 0;
 8000436:	4bd4      	ldr	r3, [pc, #848]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000438:	2200      	movs	r2, #0
 800043a:	701a      	strb	r2, [r3, #0]
		switch (col_numb){
 800043c:	4bd3      	ldr	r3, [pc, #844]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x380>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b07      	cmp	r3, #7
 8000442:	d900      	bls.n	8000446 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8000444:	e0ba      	b.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8000446:	009a      	lsls	r2, r3, #2
 8000448:	4bd1      	ldr	r3, [pc, #836]	; (8000790 <HAL_TIM_PeriodElapsedCallback+0x384>)
 800044a:	18d3      	adds	r3, r2, r3
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	469f      	mov	pc, r3
		case 0:
			M_COL_A;
 8000450:	4bd0      	ldr	r3, [pc, #832]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000452:	699a      	ldr	r2, [r3, #24]
 8000454:	4bcf      	ldr	r3, [pc, #828]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000456:	2180      	movs	r1, #128	; 0x80
 8000458:	0509      	lsls	r1, r1, #20
 800045a:	430a      	orrs	r2, r1
 800045c:	619a      	str	r2, [r3, #24]
 800045e:	4bce      	ldr	r3, [pc, #824]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000460:	699a      	ldr	r2, [r3, #24]
 8000462:	4bcd      	ldr	r3, [pc, #820]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000464:	21f8      	movs	r1, #248	; 0xf8
 8000466:	430a      	orrs	r2, r1
 8000468:	619a      	str	r2, [r3, #24]
 800046a:	2390      	movs	r3, #144	; 0x90
 800046c:	05db      	lsls	r3, r3, #23
 800046e:	699a      	ldr	r2, [r3, #24]
 8000470:	2390      	movs	r3, #144	; 0x90
 8000472:	05db      	lsls	r3, r3, #23
 8000474:	2188      	movs	r1, #136	; 0x88
 8000476:	0209      	lsls	r1, r1, #8
 8000478:	430a      	orrs	r2, r1
 800047a:	619a      	str	r2, [r3, #24]
			break;
 800047c:	e09e      	b.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x1b0>
		case 1:
			M_COL_B;
 800047e:	4bc5      	ldr	r3, [pc, #788]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000480:	699a      	ldr	r2, [r3, #24]
 8000482:	4bc4      	ldr	r3, [pc, #784]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000484:	2180      	movs	r1, #128	; 0x80
 8000486:	0109      	lsls	r1, r1, #4
 8000488:	430a      	orrs	r2, r1
 800048a:	619a      	str	r2, [r3, #24]
 800048c:	4bc2      	ldr	r3, [pc, #776]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800048e:	699a      	ldr	r2, [r3, #24]
 8000490:	4bc1      	ldr	r3, [pc, #772]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000492:	49c2      	ldr	r1, [pc, #776]	; (800079c <HAL_TIM_PeriodElapsedCallback+0x390>)
 8000494:	430a      	orrs	r2, r1
 8000496:	619a      	str	r2, [r3, #24]
 8000498:	2390      	movs	r3, #144	; 0x90
 800049a:	05db      	lsls	r3, r3, #23
 800049c:	699a      	ldr	r2, [r3, #24]
 800049e:	2390      	movs	r3, #144	; 0x90
 80004a0:	05db      	lsls	r3, r3, #23
 80004a2:	2188      	movs	r1, #136	; 0x88
 80004a4:	0209      	lsls	r1, r1, #8
 80004a6:	430a      	orrs	r2, r1
 80004a8:	619a      	str	r2, [r3, #24]
			break;
 80004aa:	e087      	b.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x1b0>
		case 2:
			M_COL_C;
 80004ac:	4bb9      	ldr	r3, [pc, #740]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80004ae:	699a      	ldr	r2, [r3, #24]
 80004b0:	4bb8      	ldr	r3, [pc, #736]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80004b2:	2180      	movs	r1, #128	; 0x80
 80004b4:	0109      	lsls	r1, r1, #4
 80004b6:	430a      	orrs	r2, r1
 80004b8:	619a      	str	r2, [r3, #24]
 80004ba:	4bb7      	ldr	r3, [pc, #732]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80004bc:	699a      	ldr	r2, [r3, #24]
 80004be:	4bb6      	ldr	r3, [pc, #728]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80004c0:	49b7      	ldr	r1, [pc, #732]	; (80007a0 <HAL_TIM_PeriodElapsedCallback+0x394>)
 80004c2:	430a      	orrs	r2, r1
 80004c4:	619a      	str	r2, [r3, #24]
 80004c6:	2390      	movs	r3, #144	; 0x90
 80004c8:	05db      	lsls	r3, r3, #23
 80004ca:	699a      	ldr	r2, [r3, #24]
 80004cc:	2390      	movs	r3, #144	; 0x90
 80004ce:	05db      	lsls	r3, r3, #23
 80004d0:	2188      	movs	r1, #136	; 0x88
 80004d2:	0209      	lsls	r1, r1, #8
 80004d4:	430a      	orrs	r2, r1
 80004d6:	619a      	str	r2, [r3, #24]
			break;
 80004d8:	e070      	b.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x1b0>
		case 3:
			M_COL_D;
 80004da:	4bae      	ldr	r3, [pc, #696]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80004dc:	699a      	ldr	r2, [r3, #24]
 80004de:	4bad      	ldr	r3, [pc, #692]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 80004e0:	2180      	movs	r1, #128	; 0x80
 80004e2:	0109      	lsls	r1, r1, #4
 80004e4:	430a      	orrs	r2, r1
 80004e6:	619a      	str	r2, [r3, #24]
 80004e8:	4bab      	ldr	r3, [pc, #684]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80004ea:	699a      	ldr	r2, [r3, #24]
 80004ec:	4baa      	ldr	r3, [pc, #680]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80004ee:	49ad      	ldr	r1, [pc, #692]	; (80007a4 <HAL_TIM_PeriodElapsedCallback+0x398>)
 80004f0:	430a      	orrs	r2, r1
 80004f2:	619a      	str	r2, [r3, #24]
 80004f4:	2390      	movs	r3, #144	; 0x90
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	699a      	ldr	r2, [r3, #24]
 80004fa:	2390      	movs	r3, #144	; 0x90
 80004fc:	05db      	lsls	r3, r3, #23
 80004fe:	2188      	movs	r1, #136	; 0x88
 8000500:	0209      	lsls	r1, r1, #8
 8000502:	430a      	orrs	r2, r1
 8000504:	619a      	str	r2, [r3, #24]
			break;
 8000506:	e059      	b.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x1b0>
		case 4:
			M_COL_E;
 8000508:	4ba2      	ldr	r3, [pc, #648]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800050a:	699a      	ldr	r2, [r3, #24]
 800050c:	4ba1      	ldr	r3, [pc, #644]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800050e:	2180      	movs	r1, #128	; 0x80
 8000510:	0109      	lsls	r1, r1, #4
 8000512:	430a      	orrs	r2, r1
 8000514:	619a      	str	r2, [r3, #24]
 8000516:	4ba0      	ldr	r3, [pc, #640]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000518:	699a      	ldr	r2, [r3, #24]
 800051a:	4b9f      	ldr	r3, [pc, #636]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800051c:	49a2      	ldr	r1, [pc, #648]	; (80007a8 <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800051e:	430a      	orrs	r2, r1
 8000520:	619a      	str	r2, [r3, #24]
 8000522:	2390      	movs	r3, #144	; 0x90
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	699a      	ldr	r2, [r3, #24]
 8000528:	2390      	movs	r3, #144	; 0x90
 800052a:	05db      	lsls	r3, r3, #23
 800052c:	2188      	movs	r1, #136	; 0x88
 800052e:	0209      	lsls	r1, r1, #8
 8000530:	430a      	orrs	r2, r1
 8000532:	619a      	str	r2, [r3, #24]
			break;
 8000534:	e042      	b.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x1b0>
		case 5:
			M_COL_F;
 8000536:	4b97      	ldr	r3, [pc, #604]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000538:	699a      	ldr	r2, [r3, #24]
 800053a:	4b96      	ldr	r3, [pc, #600]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	0109      	lsls	r1, r1, #4
 8000540:	430a      	orrs	r2, r1
 8000542:	619a      	str	r2, [r3, #24]
 8000544:	4b94      	ldr	r3, [pc, #592]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000546:	699a      	ldr	r2, [r3, #24]
 8000548:	4b93      	ldr	r3, [pc, #588]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800054a:	4998      	ldr	r1, [pc, #608]	; (80007ac <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 800054c:	430a      	orrs	r2, r1
 800054e:	619a      	str	r2, [r3, #24]
 8000550:	2390      	movs	r3, #144	; 0x90
 8000552:	05db      	lsls	r3, r3, #23
 8000554:	699a      	ldr	r2, [r3, #24]
 8000556:	2390      	movs	r3, #144	; 0x90
 8000558:	05db      	lsls	r3, r3, #23
 800055a:	2188      	movs	r1, #136	; 0x88
 800055c:	0209      	lsls	r1, r1, #8
 800055e:	430a      	orrs	r2, r1
 8000560:	619a      	str	r2, [r3, #24]
			break;
 8000562:	e02b      	b.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x1b0>
		case 6:
			M_COL_G;
 8000564:	4b8b      	ldr	r3, [pc, #556]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000566:	699a      	ldr	r2, [r3, #24]
 8000568:	4b8a      	ldr	r3, [pc, #552]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	0109      	lsls	r1, r1, #4
 800056e:	430a      	orrs	r2, r1
 8000570:	619a      	str	r2, [r3, #24]
 8000572:	4b89      	ldr	r3, [pc, #548]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000574:	699a      	ldr	r2, [r3, #24]
 8000576:	4b88      	ldr	r3, [pc, #544]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000578:	21f8      	movs	r1, #248	; 0xf8
 800057a:	430a      	orrs	r2, r1
 800057c:	619a      	str	r2, [r3, #24]
 800057e:	2390      	movs	r3, #144	; 0x90
 8000580:	05db      	lsls	r3, r3, #23
 8000582:	699a      	ldr	r2, [r3, #24]
 8000584:	2390      	movs	r3, #144	; 0x90
 8000586:	05db      	lsls	r3, r3, #23
 8000588:	4989      	ldr	r1, [pc, #548]	; (80007b0 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 800058a:	430a      	orrs	r2, r1
 800058c:	619a      	str	r2, [r3, #24]
			break;
 800058e:	e015      	b.n	80005bc <HAL_TIM_PeriodElapsedCallback+0x1b0>
		case 7:
			M_COL_DP;
 8000590:	4b80      	ldr	r3, [pc, #512]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000592:	699a      	ldr	r2, [r3, #24]
 8000594:	4b7f      	ldr	r3, [pc, #508]	; (8000794 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8000596:	2180      	movs	r1, #128	; 0x80
 8000598:	0109      	lsls	r1, r1, #4
 800059a:	430a      	orrs	r2, r1
 800059c:	619a      	str	r2, [r3, #24]
 800059e:	4b7e      	ldr	r3, [pc, #504]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80005a0:	699a      	ldr	r2, [r3, #24]
 80005a2:	4b7d      	ldr	r3, [pc, #500]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80005a4:	21f8      	movs	r1, #248	; 0xf8
 80005a6:	430a      	orrs	r2, r1
 80005a8:	619a      	str	r2, [r3, #24]
 80005aa:	2390      	movs	r3, #144	; 0x90
 80005ac:	05db      	lsls	r3, r3, #23
 80005ae:	699a      	ldr	r2, [r3, #24]
 80005b0:	2390      	movs	r3, #144	; 0x90
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	497f      	ldr	r1, [pc, #508]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 80005b6:	430a      	orrs	r2, r1
 80005b8:	619a      	str	r2, [r3, #24]
			break;
 80005ba:	46c0      	nop			; (mov r8, r8)
		}

		if((GPIOA->IDR & (1 << 8)) == 0) {row_data &= 0xFE;	} else {	row_data |= 0x01;}
 80005bc:	2390      	movs	r3, #144	; 0x90
 80005be:	05db      	lsls	r3, r3, #23
 80005c0:	691a      	ldr	r2, [r3, #16]
 80005c2:	2380      	movs	r3, #128	; 0x80
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	4013      	ands	r3, r2
 80005c8:	d107      	bne.n	80005da <HAL_TIM_PeriodElapsedCallback+0x1ce>
 80005ca:	4b7b      	ldr	r3, [pc, #492]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2201      	movs	r2, #1
 80005d0:	4393      	bics	r3, r2
 80005d2:	b2da      	uxtb	r2, r3
 80005d4:	4b78      	ldr	r3, [pc, #480]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	e006      	b.n	80005e8 <HAL_TIM_PeriodElapsedCallback+0x1dc>
 80005da:	4b77      	ldr	r3, [pc, #476]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2201      	movs	r2, #1
 80005e0:	4313      	orrs	r3, r2
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	4b74      	ldr	r3, [pc, #464]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80005e6:	701a      	strb	r2, [r3, #0]
		if((GPIOB->IDR & (1 << 15)) == 0) {row_data &= 0xFD;	} else {	row_data |= 0x02;}
 80005e8:	4b6b      	ldr	r3, [pc, #428]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 80005ea:	691a      	ldr	r2, [r3, #16]
 80005ec:	2380      	movs	r3, #128	; 0x80
 80005ee:	021b      	lsls	r3, r3, #8
 80005f0:	4013      	ands	r3, r2
 80005f2:	d107      	bne.n	8000604 <HAL_TIM_PeriodElapsedCallback+0x1f8>
 80005f4:	4b70      	ldr	r3, [pc, #448]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2202      	movs	r2, #2
 80005fa:	4393      	bics	r3, r2
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b6e      	ldr	r3, [pc, #440]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000600:	701a      	strb	r2, [r3, #0]
 8000602:	e006      	b.n	8000612 <HAL_TIM_PeriodElapsedCallback+0x206>
 8000604:	4b6c      	ldr	r3, [pc, #432]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2202      	movs	r2, #2
 800060a:	4313      	orrs	r3, r2
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b6a      	ldr	r3, [pc, #424]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000610:	701a      	strb	r2, [r3, #0]
		if((GPIOB->IDR & (1 << 14)) == 0) {row_data &= 0xFB;	} else {	row_data |= 0x04;}
 8000612:	4b61      	ldr	r3, [pc, #388]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000614:	691a      	ldr	r2, [r3, #16]
 8000616:	2380      	movs	r3, #128	; 0x80
 8000618:	01db      	lsls	r3, r3, #7
 800061a:	4013      	ands	r3, r2
 800061c:	d107      	bne.n	800062e <HAL_TIM_PeriodElapsedCallback+0x222>
 800061e:	4b66      	ldr	r3, [pc, #408]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2204      	movs	r2, #4
 8000624:	4393      	bics	r3, r2
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b63      	ldr	r3, [pc, #396]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	e006      	b.n	800063c <HAL_TIM_PeriodElapsedCallback+0x230>
 800062e:	4b62      	ldr	r3, [pc, #392]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	2204      	movs	r2, #4
 8000634:	4313      	orrs	r3, r2
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b5f      	ldr	r3, [pc, #380]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800063a:	701a      	strb	r2, [r3, #0]
		if((GPIOB->IDR & (1 << 13)) == 0) {row_data &= 0xF7;	} else {	row_data |= 0x08;}
 800063c:	4b56      	ldr	r3, [pc, #344]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 800063e:	691a      	ldr	r2, [r3, #16]
 8000640:	2380      	movs	r3, #128	; 0x80
 8000642:	019b      	lsls	r3, r3, #6
 8000644:	4013      	ands	r3, r2
 8000646:	d107      	bne.n	8000658 <HAL_TIM_PeriodElapsedCallback+0x24c>
 8000648:	4b5b      	ldr	r3, [pc, #364]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2208      	movs	r2, #8
 800064e:	4393      	bics	r3, r2
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b59      	ldr	r3, [pc, #356]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e006      	b.n	8000666 <HAL_TIM_PeriodElapsedCallback+0x25a>
 8000658:	4b57      	ldr	r3, [pc, #348]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	2208      	movs	r2, #8
 800065e:	4313      	orrs	r3, r2
 8000660:	b2da      	uxtb	r2, r3
 8000662:	4b55      	ldr	r3, [pc, #340]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000664:	701a      	strb	r2, [r3, #0]
		if((GPIOB->IDR & (1 << 12)) == 0) {row_data &= 0xEF;	} else {	row_data |= 0x10;}
 8000666:	4b4c      	ldr	r3, [pc, #304]	; (8000798 <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8000668:	691a      	ldr	r2, [r3, #16]
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	015b      	lsls	r3, r3, #5
 800066e:	4013      	ands	r3, r2
 8000670:	d107      	bne.n	8000682 <HAL_TIM_PeriodElapsedCallback+0x276>
 8000672:	4b51      	ldr	r3, [pc, #324]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	2210      	movs	r2, #16
 8000678:	4393      	bics	r3, r2
 800067a:	b2da      	uxtb	r2, r3
 800067c:	4b4e      	ldr	r3, [pc, #312]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800067e:	701a      	strb	r2, [r3, #0]
 8000680:	e006      	b.n	8000690 <HAL_TIM_PeriodElapsedCallback+0x284>
 8000682:	4b4d      	ldr	r3, [pc, #308]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	2210      	movs	r2, #16
 8000688:	4313      	orrs	r3, r2
 800068a:	b2da      	uxtb	r2, r3
 800068c:	4b4a      	ldr	r3, [pc, #296]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 800068e:	701a      	strb	r2, [r3, #0]
		switch(row_data){
 8000690:	4b49      	ldr	r3, [pc, #292]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	3bef      	subs	r3, #239	; 0xef
 8000696:	2b10      	cmp	r3, #16
 8000698:	d900      	bls.n	800069c <HAL_TIM_PeriodElapsedCallback+0x290>
 800069a:	e09e      	b.n	80007da <HAL_TIM_PeriodElapsedCallback+0x3ce>
 800069c:	009a      	lsls	r2, r3, #2
 800069e:	4b47      	ldr	r3, [pc, #284]	; (80007bc <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 80006a0:	18d3      	adds	r3, r2, r3
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	469f      	mov	pc, r3
		case 0xFE:
		case 0xFD:
		case 0xFB:
		case 0xF7:
		case 0xEF:
			switch(but_status){
 80006a6:	4b46      	ldr	r3, [pc, #280]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <HAL_TIM_PeriodElapsedCallback+0x2a8>
 80006ae:	2b01      	cmp	r3, #1
 80006b0:	d007      	beq.n	80006c2 <HAL_TIM_PeriodElapsedCallback+0x2b6>
					b_butpres = true;
					b_enprint = true;
				}
				break;
			}
			break;
 80006b2:	e092      	b.n	80007da <HAL_TIM_PeriodElapsedCallback+0x3ce>
				but_status = 1;
 80006b4:	4b42      	ldr	r3, [pc, #264]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80006b6:	2201      	movs	r2, #1
 80006b8:	701a      	strb	r2, [r3, #0]
				cnt_scan = 10;
 80006ba:	4b33      	ldr	r3, [pc, #204]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80006bc:	220a      	movs	r2, #10
 80006be:	701a      	strb	r2, [r3, #0]
				break;
 80006c0:	e02f      	b.n	8000722 <HAL_TIM_PeriodElapsedCallback+0x316>
				if(cnt_scan == 0){
 80006c2:	4b31      	ldr	r3, [pc, #196]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d12a      	bne.n	8000720 <HAL_TIM_PeriodElapsedCallback+0x314>
					but_status = 2;
 80006ca:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 80006cc:	2202      	movs	r2, #2
 80006ce:	701a      	strb	r2, [r3, #0]
					switch(row_data){
 80006d0:	4b39      	ldr	r3, [pc, #228]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	3bef      	subs	r3, #239	; 0xef
 80006d6:	2b0f      	cmp	r3, #15
 80006d8:	d818      	bhi.n	800070c <HAL_TIM_PeriodElapsedCallback+0x300>
 80006da:	009a      	lsls	r2, r3, #2
 80006dc:	4b39      	ldr	r3, [pc, #228]	; (80007c4 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80006de:	18d3      	adds	r3, r2, r3
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	469f      	mov	pc, r3
						n_row = 4;
 80006e4:	4b38      	ldr	r3, [pc, #224]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	701a      	strb	r2, [r3, #0]
						break;
 80006ea:	e00f      	b.n	800070c <HAL_TIM_PeriodElapsedCallback+0x300>
						n_row = 3;
 80006ec:	4b36      	ldr	r3, [pc, #216]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80006ee:	2203      	movs	r2, #3
 80006f0:	701a      	strb	r2, [r3, #0]
						break;
 80006f2:	e00b      	b.n	800070c <HAL_TIM_PeriodElapsedCallback+0x300>
						n_row = 2;
 80006f4:	4b34      	ldr	r3, [pc, #208]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80006f6:	2202      	movs	r2, #2
 80006f8:	701a      	strb	r2, [r3, #0]
						break;
 80006fa:	e007      	b.n	800070c <HAL_TIM_PeriodElapsedCallback+0x300>
						n_row = 1;
 80006fc:	4b32      	ldr	r3, [pc, #200]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80006fe:	2201      	movs	r2, #1
 8000700:	701a      	strb	r2, [r3, #0]
						break;
 8000702:	e003      	b.n	800070c <HAL_TIM_PeriodElapsedCallback+0x300>
						n_row = 0;
 8000704:	4b30      	ldr	r3, [pc, #192]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
						break;
 800070a:	46c0      	nop			; (mov r8, r8)
					n_col = col_numb;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x380>)
 800070e:	781a      	ldrb	r2, [r3, #0]
 8000710:	4b2e      	ldr	r3, [pc, #184]	; (80007cc <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 8000712:	701a      	strb	r2, [r3, #0]
					b_butpres = true;
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000716:	2201      	movs	r2, #1
 8000718:	701a      	strb	r2, [r3, #0]
					b_enprint = true;
 800071a:	4b2e      	ldr	r3, [pc, #184]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
				break;
 8000720:	46c0      	nop			; (mov r8, r8)
			break;
 8000722:	e05a      	b.n	80007da <HAL_TIM_PeriodElapsedCallback+0x3ce>

		case 0xFF:	// когда ни одна кнопка не нажата
			switch(but_status){
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b03      	cmp	r3, #3
 800072a:	d01a      	beq.n	8000762 <HAL_TIM_PeriodElapsedCallback+0x356>
 800072c:	dc54      	bgt.n	80007d8 <HAL_TIM_PeriodElapsedCallback+0x3cc>
 800072e:	2b00      	cmp	r3, #0
 8000730:	d002      	beq.n	8000738 <HAL_TIM_PeriodElapsedCallback+0x32c>
 8000732:	2b02      	cmp	r3, #2
 8000734:	d00e      	beq.n	8000754 <HAL_TIM_PeriodElapsedCallback+0x348>
					b_butpres = false;

				}
				break;
			}
				break;
 8000736:	e04f      	b.n	80007d8 <HAL_TIM_PeriodElapsedCallback+0x3cc>
				col_numb++;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x380>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	3301      	adds	r3, #1
 800073e:	b2da      	uxtb	r2, r3
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000742:	701a      	strb	r2, [r3, #0]
				if(col_numb == COL_COUNT){
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x380>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	2b08      	cmp	r3, #8
 800074a:	d115      	bne.n	8000778 <HAL_TIM_PeriodElapsedCallback+0x36c>
					col_numb = 0;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <HAL_TIM_PeriodElapsedCallback+0x380>)
 800074e:	2200      	movs	r2, #0
 8000750:	701a      	strb	r2, [r3, #0]
				break;
 8000752:	e011      	b.n	8000778 <HAL_TIM_PeriodElapsedCallback+0x36c>
				but_status = 3;
 8000754:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8000756:	2203      	movs	r2, #3
 8000758:	701a      	strb	r2, [r3, #0]
				cnt_scan = 10;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 800075c:	220a      	movs	r2, #10
 800075e:	701a      	strb	r2, [r3, #0]
				break;
 8000760:	e00d      	b.n	800077e <HAL_TIM_PeriodElapsedCallback+0x372>
				if(cnt_scan == 0){
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <HAL_TIM_PeriodElapsedCallback+0x37c>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d108      	bne.n	800077c <HAL_TIM_PeriodElapsedCallback+0x370>
					but_status = 0;
 800076a:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
					b_butpres = false;
 8000770:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 8000772:	2200      	movs	r2, #0
 8000774:	701a      	strb	r2, [r3, #0]
				break;
 8000776:	e001      	b.n	800077c <HAL_TIM_PeriodElapsedCallback+0x370>
				break;
 8000778:	46c0      	nop			; (mov r8, r8)
 800077a:	e02d      	b.n	80007d8 <HAL_TIM_PeriodElapsedCallback+0x3cc>
				break;
 800077c:	46c0      	nop			; (mov r8, r8)
				break;
 800077e:	e02b      	b.n	80007d8 <HAL_TIM_PeriodElapsedCallback+0x3cc>
		}

	}
 8000780:	46c0      	nop			; (mov r8, r8)
 8000782:	e02a      	b.n	80007da <HAL_TIM_PeriodElapsedCallback+0x3ce>
 8000784:	40000400 	.word	0x40000400
 8000788:	200000bc 	.word	0x200000bc
 800078c:	200000b8 	.word	0x200000b8
 8000790:	08005138 	.word	0x08005138
 8000794:	48001400 	.word	0x48001400
 8000798:	48000400 	.word	0x48000400
 800079c:	00800078 	.word	0x00800078
 80007a0:	004000b8 	.word	0x004000b8
 80007a4:	002000d8 	.word	0x002000d8
 80007a8:	001000e8 	.word	0x001000e8
 80007ac:	000800f0 	.word	0x000800f0
 80007b0:	80000800 	.word	0x80000800
 80007b4:	08008000 	.word	0x08008000
 80007b8:	20000000 	.word	0x20000000
 80007bc:	08005158 	.word	0x08005158
 80007c0:	200000b9 	.word	0x200000b9
 80007c4:	0800519c 	.word	0x0800519c
 80007c8:	200000be 	.word	0x200000be
 80007cc:	200000bd 	.word	0x200000bd
 80007d0:	200000ba 	.word	0x200000ba
 80007d4:	200000bb 	.word	0x200000bb
				break;
 80007d8:	46c0      	nop			; (mov r8, r8)

	if(htim->Instance == TIM7){
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	4a1d      	ldr	r2, [pc, #116]	; (8000854 <HAL_TIM_PeriodElapsedCallback+0x448>)
 80007e0:	4293      	cmp	r3, r2
 80007e2:	d133      	bne.n	800084c <HAL_TIM_PeriodElapsedCallback+0x440>
			  ws2812_init();
			  HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_4,(uint32_t*)&BUF_DMA,ARRAY_LEN);
		  }
		*/

			if(b_butpres==true){
 80007e4:	4b1c      	ldr	r3, [pc, #112]	; (8000858 <HAL_TIM_PeriodElapsedCallback+0x44c>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d02f      	beq.n	800084c <HAL_TIM_PeriodElapsedCallback+0x440>
			if(led_stat == true){
 80007ec:	4b1b      	ldr	r3, [pc, #108]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x450>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d01f      	beq.n	8000834 <HAL_TIM_PeriodElapsedCallback+0x428>
				position_ws = ws_num_led(n_row, n_col);
 80007f4:	4b1a      	ldr	r3, [pc, #104]	; (8000860 <HAL_TIM_PeriodElapsedCallback+0x454>)
 80007f6:	781a      	ldrb	r2, [r3, #0]
 80007f8:	4b1a      	ldr	r3, [pc, #104]	; (8000864 <HAL_TIM_PeriodElapsedCallback+0x458>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	0019      	movs	r1, r3
 80007fe:	0010      	movs	r0, r2
 8000800:	f000 fce6 	bl	80011d0 <ws_num_led>
 8000804:	0003      	movs	r3, r0
 8000806:	001a      	movs	r2, r3
 8000808:	4b17      	ldr	r3, [pc, #92]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 800080a:	801a      	strh	r2, [r3, #0]
				ws2812_init();
 800080c:	f000 fc06 	bl	800101c <ws2812_init>
				ws2812_pixel_rgb_to_buf_dma(0, 128, 128, position_ws);
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <HAL_TIM_PeriodElapsedCallback+0x45c>)
 8000812:	881b      	ldrh	r3, [r3, #0]
 8000814:	2280      	movs	r2, #128	; 0x80
 8000816:	2180      	movs	r1, #128	; 0x80
 8000818:	2000      	movs	r0, #0
 800081a:	f000 fc19 	bl	8001050 <ws2812_pixel_rgb_to_buf_dma>
				HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_4,(uint32_t*)&BUF_DMA,ARRAY_LEN);
 800081e:	238a      	movs	r3, #138	; 0x8a
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	4a12      	ldr	r2, [pc, #72]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x460>)
 8000824:	4812      	ldr	r0, [pc, #72]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8000826:	210c      	movs	r1, #12
 8000828:	f002 f932 	bl	8002a90 <HAL_TIM_PWM_Start_DMA>
				led_stat = false;
 800082c:	4b0b      	ldr	r3, [pc, #44]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x450>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
			}
			}


	}
}
 8000832:	e00b      	b.n	800084c <HAL_TIM_PeriodElapsedCallback+0x440>
				ws2812_init();
 8000834:	f000 fbf2 	bl	800101c <ws2812_init>
				HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_4,(uint32_t*)&BUF_DMA,ARRAY_LEN);
 8000838:	238a      	movs	r3, #138	; 0x8a
 800083a:	011b      	lsls	r3, r3, #4
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <HAL_TIM_PeriodElapsedCallback+0x460>)
 800083e:	480c      	ldr	r0, [pc, #48]	; (8000870 <HAL_TIM_PeriodElapsedCallback+0x464>)
 8000840:	210c      	movs	r1, #12
 8000842:	f002 f925 	bl	8002a90 <HAL_TIM_PWM_Start_DMA>
				led_stat = true;
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_TIM_PeriodElapsedCallback+0x450>)
 8000848:	2201      	movs	r2, #1
 800084a:	701a      	strb	r2, [r3, #0]
}
 800084c:	46c0      	nop			; (mov r8, r8)
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40001400 	.word	0x40001400
 8000858:	200000ba 	.word	0x200000ba
 800085c:	20000102 	.word	0x20000102
 8000860:	200000be 	.word	0x200000be
 8000864:	200000bd 	.word	0x200000bd
 8000868:	20000100 	.word	0x20000100
 800086c:	200002a8 	.word	0x200002a8
 8000870:	20000108 	.word	0x20000108

08000874 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000878:	f000 fd3c 	bl	80012f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800087c:	f000 f864 	bl	8000948 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000880:	f7ff fcfc 	bl	800027c <MX_GPIO_Init>
  MX_DMA_Init();
 8000884:	f7ff fcdc 	bl	8000240 <MX_DMA_Init>
  MX_TIM3_Init();
 8000888:	f000 f9e2 	bl	8000c50 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 800088c:	f000 fb48 	bl	8000f20 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000890:	f000 f960 	bl	8000b54 <MX_TIM2_Init>
  MX_TIM7_Init();
 8000894:	f000 fa32 	bl	8000cfc <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000898:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <main+0xa4>)
 800089a:	0018      	movs	r0, r3
 800089c:	f002 f84e 	bl	800293c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim7);
 80008a0:	4b1e      	ldr	r3, [pc, #120]	; (800091c <main+0xa8>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f002 f84a 	bl	800293c <HAL_TIM_Base_Start_IT>
//  BUF_DMA[0] = 19;
 // HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 // HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_4,(uint32_t*)&BUF_DMA,1);
  ws2812_init();
 80008a8:	f000 fbb8 	bl	800101c <ws2812_init>
 // ws2812_pixel_rgb_to_buf_dma(0, 128, 128, 2);

  HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_4,(uint32_t*)&BUF_DMA,2);
 80008ac:	4a1c      	ldr	r2, [pc, #112]	; (8000920 <main+0xac>)
 80008ae:	481d      	ldr	r0, [pc, #116]	; (8000924 <main+0xb0>)
 80008b0:	2302      	movs	r3, #2
 80008b2:	210c      	movs	r1, #12
 80008b4:	f002 f8ec 	bl	8002a90 <HAL_TIM_PWM_Start_DMA>
		  ws2812_init();
		  HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_4,(uint32_t*)&BUF_DMA,ARRAY_LEN);
	  }
*/

	  if(but_status == 0){
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <main+0xb4>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d108      	bne.n	80008d2 <main+0x5e>
		  ws2812_init();
 80008c0:	f000 fbac 	bl	800101c <ws2812_init>
		  HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_4,(uint32_t*)&BUF_DMA,ARRAY_LEN);
 80008c4:	238a      	movs	r3, #138	; 0x8a
 80008c6:	011b      	lsls	r3, r3, #4
 80008c8:	4a15      	ldr	r2, [pc, #84]	; (8000920 <main+0xac>)
 80008ca:	4816      	ldr	r0, [pc, #88]	; (8000924 <main+0xb0>)
 80008cc:	210c      	movs	r1, #12
 80008ce:	f002 f8df 	bl	8002a90 <HAL_TIM_PWM_Start_DMA>
	  }


	  if(b_enprint == true){
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <main+0xb8>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d0ee      	beq.n	80008b8 <main+0x44>
		  sprintf(test1, "%d\r\n",key[n_row][n_col]);
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <main+0xbc>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	0018      	movs	r0, r3
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <main+0xc0>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	0019      	movs	r1, r3
 80008e6:	4a14      	ldr	r2, [pc, #80]	; (8000938 <main+0xc4>)
 80008e8:	00c3      	lsls	r3, r0, #3
 80008ea:	18d3      	adds	r3, r2, r3
 80008ec:	5c5b      	ldrb	r3, [r3, r1]
 80008ee:	001a      	movs	r2, r3
 80008f0:	4912      	ldr	r1, [pc, #72]	; (800093c <main+0xc8>)
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <main+0xcc>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f003 ff9f 	bl	8004838 <siprintf>
		/*  	position_ws = ws_num_led(n_row, n_col);		для индикации нажатия
		    ws2812_init();
		  ws2812_pixel_rgb_to_buf_dma(0, 128, 128, position_ws);
		  HAL_TIM_PWM_Start_DMA(&htim2,TIM_CHANNEL_4,(uint32_t*)&BUF_DMA,ARRAY_LEN);*/
		  HAL_UART_Transmit(&huart1, (uint8_t*)&test1, strlen(test1), 100);
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <main+0xcc>)
 80008fc:	0018      	movs	r0, r3
 80008fe:	f7ff fc01 	bl	8000104 <strlen>
 8000902:	0003      	movs	r3, r0
 8000904:	b29a      	uxth	r2, r3
 8000906:	490e      	ldr	r1, [pc, #56]	; (8000940 <main+0xcc>)
 8000908:	480e      	ldr	r0, [pc, #56]	; (8000944 <main+0xd0>)
 800090a:	2364      	movs	r3, #100	; 0x64
 800090c:	f003 fb06 	bl	8003f1c <HAL_UART_Transmit>
		  b_enprint = false;
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <main+0xb8>)
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]
	  if(but_status == 0){
 8000916:	e7cf      	b.n	80008b8 <main+0x44>
 8000918:	20000150 	.word	0x20000150
 800091c:	20000198 	.word	0x20000198
 8000920:	200002a8 	.word	0x200002a8
 8000924:	20000108 	.word	0x20000108
 8000928:	200000b9 	.word	0x200000b9
 800092c:	200000bb 	.word	0x200000bb
 8000930:	200000be 	.word	0x200000be
 8000934:	200000bd 	.word	0x200000bd
 8000938:	20000004 	.word	0x20000004
 800093c:	08005110 	.word	0x08005110
 8000940:	200000c0 	.word	0x200000c0
 8000944:	20000224 	.word	0x20000224

08000948 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000948:	b590      	push	{r4, r7, lr}
 800094a:	b099      	sub	sp, #100	; 0x64
 800094c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800094e:	242c      	movs	r4, #44	; 0x2c
 8000950:	193b      	adds	r3, r7, r4
 8000952:	0018      	movs	r0, r3
 8000954:	2334      	movs	r3, #52	; 0x34
 8000956:	001a      	movs	r2, r3
 8000958:	2100      	movs	r1, #0
 800095a:	f003 ff64 	bl	8004826 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095e:	231c      	movs	r3, #28
 8000960:	18fb      	adds	r3, r7, r3
 8000962:	0018      	movs	r0, r3
 8000964:	2310      	movs	r3, #16
 8000966:	001a      	movs	r2, r3
 8000968:	2100      	movs	r1, #0
 800096a:	f003 ff5c 	bl	8004826 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800096e:	003b      	movs	r3, r7
 8000970:	0018      	movs	r0, r3
 8000972:	231c      	movs	r3, #28
 8000974:	001a      	movs	r2, r3
 8000976:	2100      	movs	r1, #0
 8000978:	f003 ff55 	bl	8004826 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800097c:	0021      	movs	r1, r4
 800097e:	187b      	adds	r3, r7, r1
 8000980:	2201      	movs	r2, #1
 8000982:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000984:	187b      	adds	r3, r7, r1
 8000986:	2201      	movs	r2, #1
 8000988:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098a:	187b      	adds	r3, r7, r1
 800098c:	2202      	movs	r2, #2
 800098e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000990:	187b      	adds	r3, r7, r1
 8000992:	2280      	movs	r2, #128	; 0x80
 8000994:	0252      	lsls	r2, r2, #9
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000998:	187b      	adds	r3, r7, r1
 800099a:	2280      	movs	r2, #128	; 0x80
 800099c:	0352      	lsls	r2, r2, #13
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2200      	movs	r2, #0
 80009a4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	0018      	movs	r0, r3
 80009aa:	f001 f977 	bl	8001c9c <HAL_RCC_OscConfig>
 80009ae:	1e03      	subs	r3, r0, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80009b2:	f000 f828 	bl	8000a06 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b6:	211c      	movs	r1, #28
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2207      	movs	r2, #7
 80009bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	2202      	movs	r2, #2
 80009c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009c4:	187b      	adds	r3, r7, r1
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ca:	187b      	adds	r3, r7, r1
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d0:	187b      	adds	r3, r7, r1
 80009d2:	2101      	movs	r1, #1
 80009d4:	0018      	movs	r0, r3
 80009d6:	f001 fce7 	bl	80023a8 <HAL_RCC_ClockConfig>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009de:	f000 f812 	bl	8000a06 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80009e2:	003b      	movs	r3, r7
 80009e4:	2201      	movs	r2, #1
 80009e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80009e8:	003b      	movs	r3, r7
 80009ea:	2200      	movs	r2, #0
 80009ec:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009ee:	003b      	movs	r3, r7
 80009f0:	0018      	movs	r0, r3
 80009f2:	f001 fe53 	bl	800269c <HAL_RCCEx_PeriphCLKConfig>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009fa:	f000 f804 	bl	8000a06 <Error_Handler>
  }
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b019      	add	sp, #100	; 0x64
 8000a04:	bd90      	pop	{r4, r7, pc}

08000a06 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a0a:	b672      	cpsid	i
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <Error_Handler+0x8>

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <HAL_MspInit+0x44>)
 8000a18:	699a      	ldr	r2, [r3, #24]
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <HAL_MspInit+0x44>)
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	619a      	str	r2, [r3, #24]
 8000a22:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <HAL_MspInit+0x44>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	2201      	movs	r2, #1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <HAL_MspInit+0x44>)
 8000a30:	69da      	ldr	r2, [r3, #28]
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <HAL_MspInit+0x44>)
 8000a34:	2180      	movs	r1, #128	; 0x80
 8000a36:	0549      	lsls	r1, r1, #21
 8000a38:	430a      	orrs	r2, r1
 8000a3a:	61da      	str	r2, [r3, #28]
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_MspInit+0x44>)
 8000a3e:	69da      	ldr	r2, [r3, #28]
 8000a40:	2380      	movs	r3, #128	; 0x80
 8000a42:	055b      	lsls	r3, r3, #21
 8000a44:	4013      	ands	r3, r2
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	46c0      	nop			; (mov r8, r8)
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	b002      	add	sp, #8
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	40021000 	.word	0x40021000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a68:	46c0      	nop			; (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a72:	46c0      	nop			; (mov r8, r8)
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7c:	f000 fc82 	bl	8001384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a80:	46c0      	nop			; (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 to 7 and DMA2 channel 3 to 5 interrupts.
  */
void DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */

	HAL_TIM_PWM_Stop_DMA(&htim2,TIM_CHANNEL_4);
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x1c>)
 8000a8e:	210c      	movs	r1, #12
 8000a90:	0018      	movs	r0, r3
 8000a92:	f002 f9b3 	bl	8002dfc <HAL_TIM_PWM_Stop_DMA>
  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch4);
 8000a96:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <DMA1_Ch4_7_DMA2_Ch3_5_IRQHandler+0x20>)
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 fe60 	bl	800175e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */

  /* USER CODE END DMA1_Ch4_7_DMA2_Ch3_5_IRQn 1 */
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000108 	.word	0x20000108
 8000aa8:	200001e0 	.word	0x200001e0

08000aac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <TIM3_IRQHandler+0x14>)
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	f002 fa82 	bl	8002fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000150 	.word	0x20000150

08000ac4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <TIM7_IRQHandler+0x14>)
 8000aca:	0018      	movs	r0, r3
 8000acc:	f002 fa76 	bl	8002fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000ad0:	46c0      	nop			; (mov r8, r8)
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	20000198 	.word	0x20000198

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f003 fe58 	bl	80047c0 <__errno>
 8000b10:	0003      	movs	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	2301      	movs	r3, #1
 8000b18:	425b      	negs	r3, r3
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	18d2      	adds	r2, r2, r3
 8000b2a:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <_sbrk+0x64>)
 8000b2c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	0018      	movs	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	b006      	add	sp, #24
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20008000 	.word	0x20008000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	20000104 	.word	0x20000104
 8000b44:	20002540 	.word	0x20002540

08000b48 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
	...

08000b54 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
DMA_HandleTypeDef hdma_tim2_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08e      	sub	sp, #56	; 0x38
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5a:	2328      	movs	r3, #40	; 0x28
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	0018      	movs	r0, r3
 8000b60:	2310      	movs	r3, #16
 8000b62:	001a      	movs	r2, r3
 8000b64:	2100      	movs	r1, #0
 8000b66:	f003 fe5e 	bl	8004826 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6a:	2320      	movs	r3, #32
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2308      	movs	r3, #8
 8000b72:	001a      	movs	r2, r3
 8000b74:	2100      	movs	r1, #0
 8000b76:	f003 fe56 	bl	8004826 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	231c      	movs	r3, #28
 8000b80:	001a      	movs	r2, r3
 8000b82:	2100      	movs	r1, #0
 8000b84:	f003 fe4f 	bl	8004826 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b88:	4b30      	ldr	r3, [pc, #192]	; (8000c4c <MX_TIM2_Init+0xf8>)
 8000b8a:	2280      	movs	r2, #128	; 0x80
 8000b8c:	05d2      	lsls	r2, r2, #23
 8000b8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b90:	4b2e      	ldr	r3, [pc, #184]	; (8000c4c <MX_TIM2_Init+0xf8>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b96:	4b2d      	ldr	r3, [pc, #180]	; (8000c4c <MX_TIM2_Init+0xf8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 59;
 8000b9c:	4b2b      	ldr	r3, [pc, #172]	; (8000c4c <MX_TIM2_Init+0xf8>)
 8000b9e:	223b      	movs	r2, #59	; 0x3b
 8000ba0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba2:	4b2a      	ldr	r3, [pc, #168]	; (8000c4c <MX_TIM2_Init+0xf8>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ba8:	4b28      	ldr	r3, [pc, #160]	; (8000c4c <MX_TIM2_Init+0xf8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bae:	4b27      	ldr	r3, [pc, #156]	; (8000c4c <MX_TIM2_Init+0xf8>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f001 fe73 	bl	800289c <HAL_TIM_Base_Init>
 8000bb6:	1e03      	subs	r3, r0, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000bba:	f7ff ff24 	bl	8000a06 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bbe:	2128      	movs	r1, #40	; 0x28
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2280      	movs	r2, #128	; 0x80
 8000bc4:	0152      	lsls	r2, r2, #5
 8000bc6:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000bc8:	187a      	adds	r2, r7, r1
 8000bca:	4b20      	ldr	r3, [pc, #128]	; (8000c4c <MX_TIM2_Init+0xf8>)
 8000bcc:	0011      	movs	r1, r2
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f002 fbd0 	bl	8003374 <HAL_TIM_ConfigClockSource>
 8000bd4:	1e03      	subs	r3, r0, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8000bd8:	f7ff ff15 	bl	8000a06 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bdc:	4b1b      	ldr	r3, [pc, #108]	; (8000c4c <MX_TIM2_Init+0xf8>)
 8000bde:	0018      	movs	r0, r3
 8000be0:	f001 fefe 	bl	80029e0 <HAL_TIM_PWM_Init>
 8000be4:	1e03      	subs	r3, r0, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000be8:	f7ff ff0d 	bl	8000a06 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bec:	2120      	movs	r1, #32
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bfa:	187a      	adds	r2, r7, r1
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <MX_TIM2_Init+0xf8>)
 8000bfe:	0011      	movs	r1, r2
 8000c00:	0018      	movs	r0, r3
 8000c02:	f003 f8c9 	bl	8003d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000c06:	1e03      	subs	r3, r0, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000c0a:	f7ff fefc 	bl	8000a06 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	2260      	movs	r2, #96	; 0x60
 8000c12:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000c14:	1d3b      	adds	r3, r7, #4
 8000c16:	2200      	movs	r2, #0
 8000c18:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1a:	1d3b      	adds	r3, r7, #4
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c20:	1d3b      	adds	r3, r7, #4
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c26:	1d39      	adds	r1, r7, #4
 8000c28:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <MX_TIM2_Init+0xf8>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f002 fadb 	bl	80031e8 <HAL_TIM_PWM_ConfigChannel>
 8000c32:	1e03      	subs	r3, r0, #0
 8000c34:	d001      	beq.n	8000c3a <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8000c36:	f7ff fee6 	bl	8000a06 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <MX_TIM2_Init+0xf8>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f000 f92f 	bl	8000ea0 <HAL_TIM_MspPostInit>

}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b00e      	add	sp, #56	; 0x38
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	20000108 	.word	0x20000108

08000c50 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c56:	2308      	movs	r3, #8
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	0018      	movs	r0, r3
 8000c5c:	2310      	movs	r3, #16
 8000c5e:	001a      	movs	r2, r3
 8000c60:	2100      	movs	r1, #0
 8000c62:	f003 fde0 	bl	8004826 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c66:	003b      	movs	r3, r7
 8000c68:	0018      	movs	r0, r3
 8000c6a:	2308      	movs	r3, #8
 8000c6c:	001a      	movs	r2, r3
 8000c6e:	2100      	movs	r1, #0
 8000c70:	f003 fdd9 	bl	8004826 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <MX_TIM3_Init+0xa4>)
 8000c76:	4a20      	ldr	r2, [pc, #128]	; (8000cf8 <MX_TIM3_Init+0xa8>)
 8000c78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 479;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <MX_TIM3_Init+0xa4>)
 8000c7c:	22e0      	movs	r2, #224	; 0xe0
 8000c7e:	32ff      	adds	r2, #255	; 0xff
 8000c80:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c82:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <MX_TIM3_Init+0xa4>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <MX_TIM3_Init+0xa4>)
 8000c8a:	22fa      	movs	r2, #250	; 0xfa
 8000c8c:	0092      	lsls	r2, r2, #2
 8000c8e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c90:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <MX_TIM3_Init+0xa4>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c96:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <MX_TIM3_Init+0xa4>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <MX_TIM3_Init+0xa4>)
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f001 fdfc 	bl	800289c <HAL_TIM_Base_Init>
 8000ca4:	1e03      	subs	r3, r0, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM3_Init+0x5c>
  {
    Error_Handler();
 8000ca8:	f7ff fead 	bl	8000a06 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cac:	2108      	movs	r1, #8
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2280      	movs	r2, #128	; 0x80
 8000cb2:	0152      	lsls	r2, r2, #5
 8000cb4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000cb6:	187a      	adds	r2, r7, r1
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <MX_TIM3_Init+0xa4>)
 8000cba:	0011      	movs	r1, r2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f002 fb59 	bl	8003374 <HAL_TIM_ConfigClockSource>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8000cc6:	f7ff fe9e 	bl	8000a06 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cca:	003b      	movs	r3, r7
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd0:	003b      	movs	r3, r7
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000cd6:	003a      	movs	r2, r7
 8000cd8:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <MX_TIM3_Init+0xa4>)
 8000cda:	0011      	movs	r1, r2
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f003 f85b 	bl	8003d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce2:	1e03      	subs	r3, r0, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8000ce6:	f7ff fe8e 	bl	8000a06 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	46bd      	mov	sp, r7
 8000cee:	b006      	add	sp, #24
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	46c0      	nop			; (mov r8, r8)
 8000cf4:	20000150 	.word	0x20000150
 8000cf8:	40000400 	.word	0x40000400

08000cfc <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d02:	003b      	movs	r3, r7
 8000d04:	0018      	movs	r0, r3
 8000d06:	2308      	movs	r3, #8
 8000d08:	001a      	movs	r2, r3
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	f003 fd8b 	bl	8004826 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8000d10:	4b15      	ldr	r3, [pc, #84]	; (8000d68 <MX_TIM7_Init+0x6c>)
 8000d12:	4a16      	ldr	r2, [pc, #88]	; (8000d6c <MX_TIM7_Init+0x70>)
 8000d14:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 48000;
 8000d16:	4b14      	ldr	r3, [pc, #80]	; (8000d68 <MX_TIM7_Init+0x6c>)
 8000d18:	4a15      	ldr	r2, [pc, #84]	; (8000d70 <MX_TIM7_Init+0x74>)
 8000d1a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d1c:	4b12      	ldr	r3, [pc, #72]	; (8000d68 <MX_TIM7_Init+0x6c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <MX_TIM7_Init+0x6c>)
 8000d24:	22fa      	movs	r2, #250	; 0xfa
 8000d26:	0052      	lsls	r2, r2, #1
 8000d28:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <MX_TIM7_Init+0x6c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8000d30:	4b0d      	ldr	r3, [pc, #52]	; (8000d68 <MX_TIM7_Init+0x6c>)
 8000d32:	0018      	movs	r0, r3
 8000d34:	f001 fdb2 	bl	800289c <HAL_TIM_Base_Init>
 8000d38:	1e03      	subs	r3, r0, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM7_Init+0x44>
  {
    Error_Handler();
 8000d3c:	f7ff fe63 	bl	8000a06 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d40:	003b      	movs	r3, r7
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d46:	003b      	movs	r3, r7
 8000d48:	2200      	movs	r2, #0
 8000d4a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8000d4c:	003a      	movs	r2, r7
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <MX_TIM7_Init+0x6c>)
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f003 f820 	bl	8003d98 <HAL_TIMEx_MasterConfigSynchronization>
 8000d58:	1e03      	subs	r3, r0, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_TIM7_Init+0x64>
  {
    Error_Handler();
 8000d5c:	f7ff fe53 	bl	8000a06 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8000d60:	46c0      	nop			; (mov r8, r8)
 8000d62:	46bd      	mov	sp, r7
 8000d64:	b002      	add	sp, #8
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000198 	.word	0x20000198
 8000d6c:	40001400 	.word	0x40001400
 8000d70:	0000bb80 	.word	0x0000bb80

08000d74 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681a      	ldr	r2, [r3, #0]
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	05db      	lsls	r3, r3, #23
 8000d84:	429a      	cmp	r2, r3
 8000d86:	d145      	bne.n	8000e14 <HAL_TIM_Base_MspInit+0xa0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d88:	4b3e      	ldr	r3, [pc, #248]	; (8000e84 <HAL_TIM_Base_MspInit+0x110>)
 8000d8a:	69da      	ldr	r2, [r3, #28]
 8000d8c:	4b3d      	ldr	r3, [pc, #244]	; (8000e84 <HAL_TIM_Base_MspInit+0x110>)
 8000d8e:	2101      	movs	r1, #1
 8000d90:	430a      	orrs	r2, r1
 8000d92:	61da      	str	r2, [r3, #28]
 8000d94:	4b3b      	ldr	r3, [pc, #236]	; (8000e84 <HAL_TIM_Base_MspInit+0x110>)
 8000d96:	69db      	ldr	r3, [r3, #28]
 8000d98:	2201      	movs	r2, #1
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	617b      	str	r3, [r7, #20]
 8000d9e:	697b      	ldr	r3, [r7, #20]

    /* TIM2 DMA Init */
    /* TIM2_CH4 Init */
    hdma_tim2_ch4.Instance = DMA1_Channel4;
 8000da0:	4b39      	ldr	r3, [pc, #228]	; (8000e88 <HAL_TIM_Base_MspInit+0x114>)
 8000da2:	4a3a      	ldr	r2, [pc, #232]	; (8000e8c <HAL_TIM_Base_MspInit+0x118>)
 8000da4:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000da6:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <HAL_TIM_Base_MspInit+0x114>)
 8000da8:	2210      	movs	r2, #16
 8000daa:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dac:	4b36      	ldr	r3, [pc, #216]	; (8000e88 <HAL_TIM_Base_MspInit+0x114>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <HAL_TIM_Base_MspInit+0x114>)
 8000db4:	2280      	movs	r2, #128	; 0x80
 8000db6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000db8:	4b33      	ldr	r3, [pc, #204]	; (8000e88 <HAL_TIM_Base_MspInit+0x114>)
 8000dba:	2280      	movs	r2, #128	; 0x80
 8000dbc:	0092      	lsls	r2, r2, #2
 8000dbe:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000dc0:	4b31      	ldr	r3, [pc, #196]	; (8000e88 <HAL_TIM_Base_MspInit+0x114>)
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	0112      	lsls	r2, r2, #4
 8000dc6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch4.Init.Mode = DMA_NORMAL;
 8000dc8:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <HAL_TIM_Base_MspInit+0x114>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch4.Init.Priority = DMA_PRIORITY_LOW;
 8000dce:	4b2e      	ldr	r3, [pc, #184]	; (8000e88 <HAL_TIM_Base_MspInit+0x114>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch4) != HAL_OK)
 8000dd4:	4b2c      	ldr	r3, [pc, #176]	; (8000e88 <HAL_TIM_Base_MspInit+0x114>)
 8000dd6:	0018      	movs	r0, r3
 8000dd8:	f000 fbce 	bl	8001578 <HAL_DMA_Init>
 8000ddc:	1e03      	subs	r3, r0, #0
 8000dde:	d001      	beq.n	8000de4 <HAL_TIM_Base_MspInit+0x70>
    {
      Error_Handler();
 8000de0:	f7ff fe11 	bl	8000a06 <Error_Handler>
    }

    __HAL_DMA1_REMAP(HAL_DMA1_CH4_TIM2_CH4);
 8000de4:	4a2a      	ldr	r2, [pc, #168]	; (8000e90 <HAL_TIM_Base_MspInit+0x11c>)
 8000de6:	23a8      	movs	r3, #168	; 0xa8
 8000de8:	58d3      	ldr	r3, [r2, r3]
 8000dea:	4929      	ldr	r1, [pc, #164]	; (8000e90 <HAL_TIM_Base_MspInit+0x11c>)
 8000dec:	4a29      	ldr	r2, [pc, #164]	; (8000e94 <HAL_TIM_Base_MspInit+0x120>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	22a8      	movs	r2, #168	; 0xa8
 8000df2:	508b      	str	r3, [r1, r2]
 8000df4:	4a26      	ldr	r2, [pc, #152]	; (8000e90 <HAL_TIM_Base_MspInit+0x11c>)
 8000df6:	23a8      	movs	r3, #168	; 0xa8
 8000df8:	58d3      	ldr	r3, [r2, r3]
 8000dfa:	4925      	ldr	r1, [pc, #148]	; (8000e90 <HAL_TIM_Base_MspInit+0x11c>)
 8000dfc:	22a0      	movs	r2, #160	; 0xa0
 8000dfe:	01d2      	lsls	r2, r2, #7
 8000e00:	4313      	orrs	r3, r2
 8000e02:	22a8      	movs	r2, #168	; 0xa8
 8000e04:	508b      	str	r3, [r1, r2]

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC4],hdma_tim2_ch4);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a1f      	ldr	r2, [pc, #124]	; (8000e88 <HAL_TIM_Base_MspInit+0x114>)
 8000e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e0c:	4b1e      	ldr	r3, [pc, #120]	; (8000e88 <HAL_TIM_Base_MspInit+0x114>)
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8000e12:	e032      	b.n	8000e7a <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM3)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1f      	ldr	r2, [pc, #124]	; (8000e98 <HAL_TIM_Base_MspInit+0x124>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d114      	bne.n	8000e48 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e1e:	4b19      	ldr	r3, [pc, #100]	; (8000e84 <HAL_TIM_Base_MspInit+0x110>)
 8000e20:	69da      	ldr	r2, [r3, #28]
 8000e22:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <HAL_TIM_Base_MspInit+0x110>)
 8000e24:	2102      	movs	r1, #2
 8000e26:	430a      	orrs	r2, r1
 8000e28:	61da      	str	r2, [r3, #28]
 8000e2a:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <HAL_TIM_Base_MspInit+0x110>)
 8000e2c:	69db      	ldr	r3, [r3, #28]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2010      	movs	r0, #16
 8000e3c:	f000 fb6a 	bl	8001514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e40:	2010      	movs	r0, #16
 8000e42:	f000 fb7c 	bl	800153e <HAL_NVIC_EnableIRQ>
}
 8000e46:	e018      	b.n	8000e7a <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM7)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a13      	ldr	r2, [pc, #76]	; (8000e9c <HAL_TIM_Base_MspInit+0x128>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d113      	bne.n	8000e7a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8000e52:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <HAL_TIM_Base_MspInit+0x110>)
 8000e54:	69da      	ldr	r2, [r3, #28]
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_TIM_Base_MspInit+0x110>)
 8000e58:	2120      	movs	r1, #32
 8000e5a:	430a      	orrs	r2, r1
 8000e5c:	61da      	str	r2, [r3, #28]
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_TIM_Base_MspInit+0x110>)
 8000e60:	69db      	ldr	r3, [r3, #28]
 8000e62:	2220      	movs	r2, #32
 8000e64:	4013      	ands	r3, r2
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2012      	movs	r0, #18
 8000e70:	f000 fb50 	bl	8001514 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8000e74:	2012      	movs	r0, #18
 8000e76:	f000 fb62 	bl	800153e <HAL_NVIC_EnableIRQ>
}
 8000e7a:	46c0      	nop			; (mov r8, r8)
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	b006      	add	sp, #24
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	46c0      	nop			; (mov r8, r8)
 8000e84:	40021000 	.word	0x40021000
 8000e88:	200001e0 	.word	0x200001e0
 8000e8c:	40020044 	.word	0x40020044
 8000e90:	40020000 	.word	0x40020000
 8000e94:	ffff0fff 	.word	0xffff0fff
 8000e98:	40000400 	.word	0x40000400
 8000e9c:	40001400 	.word	0x40001400

08000ea0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000ea0:	b590      	push	{r4, r7, lr}
 8000ea2:	b089      	sub	sp, #36	; 0x24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea8:	240c      	movs	r4, #12
 8000eaa:	193b      	adds	r3, r7, r4
 8000eac:	0018      	movs	r0, r3
 8000eae:	2314      	movs	r3, #20
 8000eb0:	001a      	movs	r2, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	f003 fcb7 	bl	8004826 <memset>
  if(timHandle->Instance==TIM2)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2380      	movs	r3, #128	; 0x80
 8000ebe:	05db      	lsls	r3, r3, #23
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d124      	bne.n	8000f0e <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_TIM_MspPostInit+0x78>)
 8000ec6:	695a      	ldr	r2, [r3, #20]
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <HAL_TIM_MspPostInit+0x78>)
 8000eca:	2180      	movs	r1, #128	; 0x80
 8000ecc:	02c9      	lsls	r1, r1, #11
 8000ece:	430a      	orrs	r2, r1
 8000ed0:	615a      	str	r2, [r3, #20]
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_TIM_MspPostInit+0x78>)
 8000ed4:	695a      	ldr	r2, [r3, #20]
 8000ed6:	2380      	movs	r3, #128	; 0x80
 8000ed8:	02db      	lsls	r3, r3, #11
 8000eda:	4013      	ands	r3, r2
 8000edc:	60bb      	str	r3, [r7, #8]
 8000ede:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ee0:	193b      	adds	r3, r7, r4
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	0112      	lsls	r2, r2, #4
 8000ee6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	0021      	movs	r1, r4
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2202      	movs	r2, #2
 8000eee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	2202      	movs	r2, #2
 8000f00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f02:	187b      	adds	r3, r7, r1
 8000f04:	4a05      	ldr	r2, [pc, #20]	; (8000f1c <HAL_TIM_MspPostInit+0x7c>)
 8000f06:	0019      	movs	r1, r3
 8000f08:	0010      	movs	r0, r2
 8000f0a:	f000 fd31 	bl	8001970 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f0e:	46c0      	nop			; (mov r8, r8)
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b009      	add	sp, #36	; 0x24
 8000f14:	bd90      	pop	{r4, r7, pc}
 8000f16:	46c0      	nop			; (mov r8, r8)
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	48000400 	.word	0x48000400

08000f20 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f26:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <MX_USART1_UART_Init+0x5c>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f2c:	22e1      	movs	r2, #225	; 0xe1
 8000f2e:	0252      	lsls	r2, r2, #9
 8000f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f62:	4b05      	ldr	r3, [pc, #20]	; (8000f78 <MX_USART1_UART_Init+0x58>)
 8000f64:	0018      	movs	r0, r3
 8000f66:	f002 ff85 	bl	8003e74 <HAL_UART_Init>
 8000f6a:	1e03      	subs	r3, r0, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000f6e:	f7ff fd4a 	bl	8000a06 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f72:	46c0      	nop			; (mov r8, r8)
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000224 	.word	0x20000224
 8000f7c:	40013800 	.word	0x40013800

08000f80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b08b      	sub	sp, #44	; 0x2c
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	2414      	movs	r4, #20
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	2314      	movs	r3, #20
 8000f90:	001a      	movs	r2, r3
 8000f92:	2100      	movs	r1, #0
 8000f94:	f003 fc47 	bl	8004826 <memset>
  if(uartHandle->Instance==USART1)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a1d      	ldr	r2, [pc, #116]	; (8001014 <HAL_UART_MspInit+0x94>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d133      	bne.n	800100a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fa4:	699a      	ldr	r2, [r3, #24]
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fa8:	2180      	movs	r1, #128	; 0x80
 8000faa:	01c9      	lsls	r1, r1, #7
 8000fac:	430a      	orrs	r2, r1
 8000fae:	619a      	str	r2, [r3, #24]
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fb2:	699a      	ldr	r2, [r3, #24]
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	01db      	lsls	r3, r3, #7
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fc0:	695a      	ldr	r2, [r3, #20]
 8000fc2:	4b15      	ldr	r3, [pc, #84]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fc4:	2180      	movs	r1, #128	; 0x80
 8000fc6:	0289      	lsls	r1, r1, #10
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	615a      	str	r2, [r3, #20]
 8000fcc:	4b12      	ldr	r3, [pc, #72]	; (8001018 <HAL_UART_MspInit+0x98>)
 8000fce:	695a      	ldr	r2, [r3, #20]
 8000fd0:	2380      	movs	r3, #128	; 0x80
 8000fd2:	029b      	lsls	r3, r3, #10
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fda:	193b      	adds	r3, r7, r4
 8000fdc:	22c0      	movs	r2, #192	; 0xc0
 8000fde:	00d2      	lsls	r2, r2, #3
 8000fe0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	0021      	movs	r1, r4
 8000fe4:	187b      	adds	r3, r7, r1
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	187b      	adds	r3, r7, r1
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff0:	187b      	adds	r3, r7, r1
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000ff6:	187b      	adds	r3, r7, r1
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	187a      	adds	r2, r7, r1
 8000ffe:	2390      	movs	r3, #144	; 0x90
 8001000:	05db      	lsls	r3, r3, #23
 8001002:	0011      	movs	r1, r2
 8001004:	0018      	movs	r0, r3
 8001006:	f000 fcb3 	bl	8001970 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	46bd      	mov	sp, r7
 800100e:	b00b      	add	sp, #44	; 0x2c
 8001010:	bd90      	pop	{r4, r7, pc}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	40013800 	.word	0x40013800
 8001018:	40021000 	.word	0x40021000

0800101c <ws2812_init>:
					{16,17,18,19,20,21,22,23},
					{24,25,26,27,28,29,30,31},
					{32,33,34,35,36,37,38,39}};

void ws2812_init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
  int i;
  for(i=DELAY_LEN;i<ARRAY_LEN;i++) BUF_DMA[i] = LOW;
 8001022:	2330      	movs	r3, #48	; 0x30
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	e007      	b.n	8001038 <ws2812_init+0x1c>
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <ws2812_init+0x30>)
 800102a:	687a      	ldr	r2, [r7, #4]
 800102c:	0092      	lsls	r2, r2, #2
 800102e:	2113      	movs	r1, #19
 8001030:	50d1      	str	r1, [r2, r3]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3301      	adds	r3, #1
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	238a      	movs	r3, #138	; 0x8a
 800103c:	011b      	lsls	r3, r3, #4
 800103e:	429a      	cmp	r2, r3
 8001040:	dbf2      	blt.n	8001028 <ws2812_init+0xc>
}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	46c0      	nop			; (mov r8, r8)
 8001046:	46bd      	mov	sp, r7
 8001048:	b002      	add	sp, #8
 800104a:	bd80      	pop	{r7, pc}
 800104c:	200002a8 	.word	0x200002a8

08001050 <ws2812_pixel_rgb_to_buf_dma>:

void ws2812_pixel_rgb_to_buf_dma(uint8_t Rpixel , uint8_t Gpixel, uint8_t Bpixel, uint16_t posX)
{
 8001050:	b5b0      	push	{r4, r5, r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	0005      	movs	r5, r0
 8001058:	000c      	movs	r4, r1
 800105a:	0010      	movs	r0, r2
 800105c:	0019      	movs	r1, r3
 800105e:	1dfb      	adds	r3, r7, #7
 8001060:	1c2a      	adds	r2, r5, #0
 8001062:	701a      	strb	r2, [r3, #0]
 8001064:	1dbb      	adds	r3, r7, #6
 8001066:	1c22      	adds	r2, r4, #0
 8001068:	701a      	strb	r2, [r3, #0]
 800106a:	1d7b      	adds	r3, r7, #5
 800106c:	1c02      	adds	r2, r0, #0
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	1cbb      	adds	r3, r7, #2
 8001072:	1c0a      	adds	r2, r1, #0
 8001074:	801a      	strh	r2, [r3, #0]
  volatile uint16_t i;
  for(i=0;i<8;i++)
 8001076:	230e      	movs	r3, #14
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	2200      	movs	r2, #0
 800107c:	801a      	strh	r2, [r3, #0]
 800107e:	e099      	b.n	80011b4 <ws2812_pixel_rgb_to_buf_dma+0x164>
  {
    if (BitIsSet(Rpixel,(7-i)) == 1)
 8001080:	1dfb      	adds	r3, r7, #7
 8001082:	781a      	ldrb	r2, [r3, #0]
 8001084:	200e      	movs	r0, #14
 8001086:	183b      	adds	r3, r7, r0
 8001088:	881b      	ldrh	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	0019      	movs	r1, r3
 800108e:	2307      	movs	r3, #7
 8001090:	1a5b      	subs	r3, r3, r1
 8001092:	411a      	asrs	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	2201      	movs	r2, #1
 8001098:	4013      	ands	r3, r2
 800109a:	d011      	beq.n	80010c0 <ws2812_pixel_rgb_to_buf_dma+0x70>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = HIGH;
 800109c:	1cbb      	adds	r3, r7, #2
 800109e:	881a      	ldrh	r2, [r3, #0]
 80010a0:	0013      	movs	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	189b      	adds	r3, r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	3330      	adds	r3, #48	; 0x30
 80010aa:	183a      	adds	r2, r7, r0
 80010ac:	8812      	ldrh	r2, [r2, #0]
 80010ae:	b292      	uxth	r2, r2
 80010b0:	189b      	adds	r3, r3, r2
 80010b2:	3308      	adds	r3, #8
 80010b4:	001a      	movs	r2, r3
 80010b6:	4b45      	ldr	r3, [pc, #276]	; (80011cc <ws2812_pixel_rgb_to_buf_dma+0x17c>)
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	2129      	movs	r1, #41	; 0x29
 80010bc:	50d1      	str	r1, [r2, r3]
 80010be:	e011      	b.n	80010e4 <ws2812_pixel_rgb_to_buf_dma+0x94>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+8] = LOW;
 80010c0:	1cbb      	adds	r3, r7, #2
 80010c2:	881a      	ldrh	r2, [r3, #0]
 80010c4:	0013      	movs	r3, r2
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	189b      	adds	r3, r3, r2
 80010ca:	00db      	lsls	r3, r3, #3
 80010cc:	3330      	adds	r3, #48	; 0x30
 80010ce:	220e      	movs	r2, #14
 80010d0:	18ba      	adds	r2, r7, r2
 80010d2:	8812      	ldrh	r2, [r2, #0]
 80010d4:	b292      	uxth	r2, r2
 80010d6:	189b      	adds	r3, r3, r2
 80010d8:	3308      	adds	r3, #8
 80010da:	001a      	movs	r2, r3
 80010dc:	4b3b      	ldr	r3, [pc, #236]	; (80011cc <ws2812_pixel_rgb_to_buf_dma+0x17c>)
 80010de:	0092      	lsls	r2, r2, #2
 80010e0:	2113      	movs	r1, #19
 80010e2:	50d1      	str	r1, [r2, r3]
    }
    if (BitIsSet(Gpixel,(7-i)) == 1)
 80010e4:	1dbb      	adds	r3, r7, #6
 80010e6:	781a      	ldrb	r2, [r3, #0]
 80010e8:	200e      	movs	r0, #14
 80010ea:	183b      	adds	r3, r7, r0
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	0019      	movs	r1, r3
 80010f2:	2307      	movs	r3, #7
 80010f4:	1a5b      	subs	r3, r3, r1
 80010f6:	411a      	asrs	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	2201      	movs	r2, #1
 80010fc:	4013      	ands	r3, r2
 80010fe:	d00f      	beq.n	8001120 <ws2812_pixel_rgb_to_buf_dma+0xd0>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = HIGH;
 8001100:	1cbb      	adds	r3, r7, #2
 8001102:	881a      	ldrh	r2, [r3, #0]
 8001104:	0013      	movs	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	189b      	adds	r3, r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	3330      	adds	r3, #48	; 0x30
 800110e:	183a      	adds	r2, r7, r0
 8001110:	8812      	ldrh	r2, [r2, #0]
 8001112:	b292      	uxth	r2, r2
 8001114:	189a      	adds	r2, r3, r2
 8001116:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <ws2812_pixel_rgb_to_buf_dma+0x17c>)
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	2129      	movs	r1, #41	; 0x29
 800111c:	50d1      	str	r1, [r2, r3]
 800111e:	e00f      	b.n	8001140 <ws2812_pixel_rgb_to_buf_dma+0xf0>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+0] = LOW;
 8001120:	1cbb      	adds	r3, r7, #2
 8001122:	881a      	ldrh	r2, [r3, #0]
 8001124:	0013      	movs	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	189b      	adds	r3, r3, r2
 800112a:	00db      	lsls	r3, r3, #3
 800112c:	3330      	adds	r3, #48	; 0x30
 800112e:	220e      	movs	r2, #14
 8001130:	18ba      	adds	r2, r7, r2
 8001132:	8812      	ldrh	r2, [r2, #0]
 8001134:	b292      	uxth	r2, r2
 8001136:	189a      	adds	r2, r3, r2
 8001138:	4b24      	ldr	r3, [pc, #144]	; (80011cc <ws2812_pixel_rgb_to_buf_dma+0x17c>)
 800113a:	0092      	lsls	r2, r2, #2
 800113c:	2113      	movs	r1, #19
 800113e:	50d1      	str	r1, [r2, r3]
    }
    if (BitIsSet(Bpixel,(7-i)) == 1)
 8001140:	1d7b      	adds	r3, r7, #5
 8001142:	781a      	ldrb	r2, [r3, #0]
 8001144:	200e      	movs	r0, #14
 8001146:	183b      	adds	r3, r7, r0
 8001148:	881b      	ldrh	r3, [r3, #0]
 800114a:	b29b      	uxth	r3, r3
 800114c:	0019      	movs	r1, r3
 800114e:	2307      	movs	r3, #7
 8001150:	1a5b      	subs	r3, r3, r1
 8001152:	411a      	asrs	r2, r3
 8001154:	0013      	movs	r3, r2
 8001156:	2201      	movs	r2, #1
 8001158:	4013      	ands	r3, r2
 800115a:	d011      	beq.n	8001180 <ws2812_pixel_rgb_to_buf_dma+0x130>
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = HIGH;
 800115c:	1cbb      	adds	r3, r7, #2
 800115e:	881a      	ldrh	r2, [r3, #0]
 8001160:	0013      	movs	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	189b      	adds	r3, r3, r2
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	3330      	adds	r3, #48	; 0x30
 800116a:	183a      	adds	r2, r7, r0
 800116c:	8812      	ldrh	r2, [r2, #0]
 800116e:	b292      	uxth	r2, r2
 8001170:	189b      	adds	r3, r3, r2
 8001172:	3310      	adds	r3, #16
 8001174:	001a      	movs	r2, r3
 8001176:	4b15      	ldr	r3, [pc, #84]	; (80011cc <ws2812_pixel_rgb_to_buf_dma+0x17c>)
 8001178:	0092      	lsls	r2, r2, #2
 800117a:	2129      	movs	r1, #41	; 0x29
 800117c:	50d1      	str	r1, [r2, r3]
 800117e:	e011      	b.n	80011a4 <ws2812_pixel_rgb_to_buf_dma+0x154>
    }else
    {
      BUF_DMA[DELAY_LEN+posX*24+i+16] = LOW;
 8001180:	1cbb      	adds	r3, r7, #2
 8001182:	881a      	ldrh	r2, [r3, #0]
 8001184:	0013      	movs	r3, r2
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	189b      	adds	r3, r3, r2
 800118a:	00db      	lsls	r3, r3, #3
 800118c:	3330      	adds	r3, #48	; 0x30
 800118e:	220e      	movs	r2, #14
 8001190:	18ba      	adds	r2, r7, r2
 8001192:	8812      	ldrh	r2, [r2, #0]
 8001194:	b292      	uxth	r2, r2
 8001196:	189b      	adds	r3, r3, r2
 8001198:	3310      	adds	r3, #16
 800119a:	001a      	movs	r2, r3
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <ws2812_pixel_rgb_to_buf_dma+0x17c>)
 800119e:	0092      	lsls	r2, r2, #2
 80011a0:	2113      	movs	r1, #19
 80011a2:	50d1      	str	r1, [r2, r3]
  for(i=0;i<8;i++)
 80011a4:	210e      	movs	r1, #14
 80011a6:	187b      	adds	r3, r7, r1
 80011a8:	881b      	ldrh	r3, [r3, #0]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	3301      	adds	r3, #1
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	187b      	adds	r3, r7, r1
 80011b2:	801a      	strh	r2, [r3, #0]
 80011b4:	230e      	movs	r3, #14
 80011b6:	18fb      	adds	r3, r7, r3
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	2b07      	cmp	r3, #7
 80011be:	d800      	bhi.n	80011c2 <ws2812_pixel_rgb_to_buf_dma+0x172>
 80011c0:	e75e      	b.n	8001080 <ws2812_pixel_rgb_to_buf_dma+0x30>
    }

  }

}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46c0      	nop			; (mov r8, r8)
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b004      	add	sp, #16
 80011ca:	bdb0      	pop	{r4, r5, r7, pc}
 80011cc:	200002a8 	.word	0x200002a8

080011d0 <ws_num_led>:
			break;
	}
	return pos_ws;
}

uint16_t ws_num_led(uint8_t row_n, uint8_t col_n){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	0002      	movs	r2, r0
 80011d8:	1dfb      	adds	r3, r7, #7
 80011da:	701a      	strb	r2, [r3, #0]
 80011dc:	1dbb      	adds	r3, r7, #6
 80011de:	1c0a      	adds	r2, r1, #0
 80011e0:	701a      	strb	r2, [r3, #0]
	switch (row_n) {
 80011e2:	1dfb      	adds	r3, r7, #7
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2b04      	cmp	r3, #4
 80011e8:	d84d      	bhi.n	8001286 <ws_num_led+0xb6>
 80011ea:	009a      	lsls	r2, r3, #2
 80011ec:	4b29      	ldr	r3, [pc, #164]	; (8001294 <ws_num_led+0xc4>)
 80011ee:	18d3      	adds	r3, r2, r3
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	469f      	mov	pc, r3
		case 0:
			pos_ws = (5*8)-key[row_n][col_n];
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	1dbb      	adds	r3, r7, #6
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	4926      	ldr	r1, [pc, #152]	; (8001298 <ws_num_led+0xc8>)
 80011fe:	00d2      	lsls	r2, r2, #3
 8001200:	188a      	adds	r2, r1, r2
 8001202:	5cd3      	ldrb	r3, [r2, r3]
 8001204:	b29b      	uxth	r3, r3
 8001206:	2228      	movs	r2, #40	; 0x28
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b23      	ldr	r3, [pc, #140]	; (800129c <ws_num_led+0xcc>)
 800120e:	801a      	strh	r2, [r3, #0]
			break;
 8001210:	e03a      	b.n	8001288 <ws_num_led+0xb8>
		case 1:
		//	pos_ws = (4*8+1)-key[row_n][col_n];
			pos_ws = (2*8-1)+key[row_n][col_n];
 8001212:	1dfb      	adds	r3, r7, #7
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	1dbb      	adds	r3, r7, #6
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	491f      	ldr	r1, [pc, #124]	; (8001298 <ws_num_led+0xc8>)
 800121c:	00d2      	lsls	r2, r2, #3
 800121e:	188a      	adds	r2, r1, r2
 8001220:	5cd3      	ldrb	r3, [r2, r3]
 8001222:	b29b      	uxth	r3, r3
 8001224:	330f      	adds	r3, #15
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b1c      	ldr	r3, [pc, #112]	; (800129c <ws_num_led+0xcc>)
 800122a:	801a      	strh	r2, [r3, #0]
			break;
 800122c:	e02c      	b.n	8001288 <ws_num_led+0xb8>
		case 2:
		//	pos_ws = (3*8-1)-col_n;
			pos_ws = (5*8) - key[row_n][col_n];
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	781a      	ldrb	r2, [r3, #0]
 8001232:	1dbb      	adds	r3, r7, #6
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	4918      	ldr	r1, [pc, #96]	; (8001298 <ws_num_led+0xc8>)
 8001238:	00d2      	lsls	r2, r2, #3
 800123a:	188a      	adds	r2, r1, r2
 800123c:	5cd3      	ldrb	r3, [r2, r3]
 800123e:	b29b      	uxth	r3, r3
 8001240:	2228      	movs	r2, #40	; 0x28
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b15      	ldr	r3, [pc, #84]	; (800129c <ws_num_led+0xcc>)
 8001248:	801a      	strh	r2, [r3, #0]

			break;
 800124a:	e01d      	b.n	8001288 <ws_num_led+0xb8>
		case 3:
			pos_ws = key[row_n][col_n]-(2*8+1);
 800124c:	1dfb      	adds	r3, r7, #7
 800124e:	781a      	ldrb	r2, [r3, #0]
 8001250:	1dbb      	adds	r3, r7, #6
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	4910      	ldr	r1, [pc, #64]	; (8001298 <ws_num_led+0xc8>)
 8001256:	00d2      	lsls	r2, r2, #3
 8001258:	188a      	adds	r2, r1, r2
 800125a:	5cd3      	ldrb	r3, [r2, r3]
 800125c:	b29b      	uxth	r3, r3
 800125e:	3b11      	subs	r3, #17
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <ws_num_led+0xcc>)
 8001264:	801a      	strh	r2, [r3, #0]
			break;
 8001266:	e00f      	b.n	8001288 <ws_num_led+0xb8>
		case 4:
		//	pos_ws = (5*8)-col_n-key[row_n][col_n];
			pos_ws = (5*8)-key[row_n][col_n];
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	781a      	ldrb	r2, [r3, #0]
 800126c:	1dbb      	adds	r3, r7, #6
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4909      	ldr	r1, [pc, #36]	; (8001298 <ws_num_led+0xc8>)
 8001272:	00d2      	lsls	r2, r2, #3
 8001274:	188a      	adds	r2, r1, r2
 8001276:	5cd3      	ldrb	r3, [r2, r3]
 8001278:	b29b      	uxth	r3, r3
 800127a:	2228      	movs	r2, #40	; 0x28
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29a      	uxth	r2, r3
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <ws_num_led+0xcc>)
 8001282:	801a      	strh	r2, [r3, #0]
			break;
 8001284:	e000      	b.n	8001288 <ws_num_led+0xb8>
		default:
			break;
 8001286:	46c0      	nop			; (mov r8, r8)
	}
	return pos_ws;
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <ws_num_led+0xcc>)
 800128a:	881b      	ldrh	r3, [r3, #0]
}
 800128c:	0018      	movs	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	b002      	add	sp, #8
 8001292:	bd80      	pop	{r7, pc}
 8001294:	080051f4 	.word	0x080051f4
 8001298:	20000004 	.word	0x20000004
 800129c:	20002528 	.word	0x20002528

080012a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012a0:	480d      	ldr	r0, [pc, #52]	; (80012d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a4:	480d      	ldr	r0, [pc, #52]	; (80012dc <LoopForever+0x6>)
  ldr r1, =_edata
 80012a6:	490e      	ldr	r1, [pc, #56]	; (80012e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a8:	4a0e      	ldr	r2, [pc, #56]	; (80012e4 <LoopForever+0xe>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0b      	ldr	r2, [pc, #44]	; (80012e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012bc:	4c0b      	ldr	r4, [pc, #44]	; (80012ec <LoopForever+0x16>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80012ca:	f7ff fc3d 	bl	8000b48 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80012ce:	f003 fa7d 	bl	80047cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012d2:	f7ff facf 	bl	8000874 <main>

080012d6 <LoopForever>:

LoopForever:
    b LoopForever
 80012d6:	e7fe      	b.n	80012d6 <LoopForever>
  ldr   r0, =_estack
 80012d8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80012dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012e0:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 80012e4:	08005244 	.word	0x08005244
  ldr r2, =_sbss
 80012e8:	2000009c 	.word	0x2000009c
  ldr r4, =_ebss
 80012ec:	20002540 	.word	0x20002540

080012f0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012f0:	e7fe      	b.n	80012f0 <ADC1_COMP_IRQHandler>
	...

080012f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f8:	4b07      	ldr	r3, [pc, #28]	; (8001318 <HAL_Init+0x24>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <HAL_Init+0x24>)
 80012fe:	2110      	movs	r1, #16
 8001300:	430a      	orrs	r2, r1
 8001302:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001304:	2003      	movs	r0, #3
 8001306:	f000 f809 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130a:	f7ff fb81 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800130e:	2300      	movs	r3, #0
}
 8001310:	0018      	movs	r0, r3
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	46c0      	nop			; (mov r8, r8)
 8001318:	40022000 	.word	0x40022000

0800131c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b590      	push	{r4, r7, lr}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_InitTick+0x5c>)
 8001326:	681c      	ldr	r4, [r3, #0]
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <HAL_InitTick+0x60>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	0019      	movs	r1, r3
 800132e:	23fa      	movs	r3, #250	; 0xfa
 8001330:	0098      	lsls	r0, r3, #2
 8001332:	f7fe fef9 	bl	8000128 <__udivsi3>
 8001336:	0003      	movs	r3, r0
 8001338:	0019      	movs	r1, r3
 800133a:	0020      	movs	r0, r4
 800133c:	f7fe fef4 	bl	8000128 <__udivsi3>
 8001340:	0003      	movs	r3, r0
 8001342:	0018      	movs	r0, r3
 8001344:	f000 f90b 	bl	800155e <HAL_SYSTICK_Config>
 8001348:	1e03      	subs	r3, r0, #0
 800134a:	d001      	beq.n	8001350 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800134c:	2301      	movs	r3, #1
 800134e:	e00f      	b.n	8001370 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b03      	cmp	r3, #3
 8001354:	d80b      	bhi.n	800136e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	2301      	movs	r3, #1
 800135a:	425b      	negs	r3, r3
 800135c:	2200      	movs	r2, #0
 800135e:	0018      	movs	r0, r3
 8001360:	f000 f8d8 	bl	8001514 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001364:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_InitTick+0x64>)
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
}
 8001370:	0018      	movs	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	b003      	add	sp, #12
 8001376:	bd90      	pop	{r4, r7, pc}
 8001378:	2000002c 	.word	0x2000002c
 800137c:	20000034 	.word	0x20000034
 8001380:	20000030 	.word	0x20000030

08001384 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_IncTick+0x1c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	001a      	movs	r2, r3
 800138e:	4b05      	ldr	r3, [pc, #20]	; (80013a4 <HAL_IncTick+0x20>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	18d2      	adds	r2, r2, r3
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_IncTick+0x20>)
 8001396:	601a      	str	r2, [r3, #0]
}
 8001398:	46c0      	nop			; (mov r8, r8)
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	20000034 	.word	0x20000034
 80013a4:	2000252c 	.word	0x2000252c

080013a8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  return uwTick;
 80013ac:	4b02      	ldr	r3, [pc, #8]	; (80013b8 <HAL_GetTick+0x10>)
 80013ae:	681b      	ldr	r3, [r3, #0]
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	2000252c 	.word	0x2000252c

080013bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	0002      	movs	r2, r0
 80013c4:	1dfb      	adds	r3, r7, #7
 80013c6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013c8:	1dfb      	adds	r3, r7, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	2b7f      	cmp	r3, #127	; 0x7f
 80013ce:	d809      	bhi.n	80013e4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013d0:	1dfb      	adds	r3, r7, #7
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	001a      	movs	r2, r3
 80013d6:	231f      	movs	r3, #31
 80013d8:	401a      	ands	r2, r3
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <__NVIC_EnableIRQ+0x30>)
 80013dc:	2101      	movs	r1, #1
 80013de:	4091      	lsls	r1, r2
 80013e0:	000a      	movs	r2, r1
 80013e2:	601a      	str	r2, [r3, #0]
  }
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b002      	add	sp, #8
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b590      	push	{r4, r7, lr}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	0002      	movs	r2, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	1dfb      	adds	r3, r7, #7
 80013fc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	2b7f      	cmp	r3, #127	; 0x7f
 8001404:	d828      	bhi.n	8001458 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001406:	4a2f      	ldr	r2, [pc, #188]	; (80014c4 <__NVIC_SetPriority+0xd4>)
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	b25b      	sxtb	r3, r3
 800140e:	089b      	lsrs	r3, r3, #2
 8001410:	33c0      	adds	r3, #192	; 0xc0
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	589b      	ldr	r3, [r3, r2]
 8001416:	1dfa      	adds	r2, r7, #7
 8001418:	7812      	ldrb	r2, [r2, #0]
 800141a:	0011      	movs	r1, r2
 800141c:	2203      	movs	r2, #3
 800141e:	400a      	ands	r2, r1
 8001420:	00d2      	lsls	r2, r2, #3
 8001422:	21ff      	movs	r1, #255	; 0xff
 8001424:	4091      	lsls	r1, r2
 8001426:	000a      	movs	r2, r1
 8001428:	43d2      	mvns	r2, r2
 800142a:	401a      	ands	r2, r3
 800142c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	019b      	lsls	r3, r3, #6
 8001432:	22ff      	movs	r2, #255	; 0xff
 8001434:	401a      	ands	r2, r3
 8001436:	1dfb      	adds	r3, r7, #7
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	0018      	movs	r0, r3
 800143c:	2303      	movs	r3, #3
 800143e:	4003      	ands	r3, r0
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001444:	481f      	ldr	r0, [pc, #124]	; (80014c4 <__NVIC_SetPriority+0xd4>)
 8001446:	1dfb      	adds	r3, r7, #7
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b25b      	sxtb	r3, r3
 800144c:	089b      	lsrs	r3, r3, #2
 800144e:	430a      	orrs	r2, r1
 8001450:	33c0      	adds	r3, #192	; 0xc0
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001456:	e031      	b.n	80014bc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001458:	4a1b      	ldr	r2, [pc, #108]	; (80014c8 <__NVIC_SetPriority+0xd8>)
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	0019      	movs	r1, r3
 8001460:	230f      	movs	r3, #15
 8001462:	400b      	ands	r3, r1
 8001464:	3b08      	subs	r3, #8
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3306      	adds	r3, #6
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	18d3      	adds	r3, r2, r3
 800146e:	3304      	adds	r3, #4
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	1dfa      	adds	r2, r7, #7
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	0011      	movs	r1, r2
 8001478:	2203      	movs	r2, #3
 800147a:	400a      	ands	r2, r1
 800147c:	00d2      	lsls	r2, r2, #3
 800147e:	21ff      	movs	r1, #255	; 0xff
 8001480:	4091      	lsls	r1, r2
 8001482:	000a      	movs	r2, r1
 8001484:	43d2      	mvns	r2, r2
 8001486:	401a      	ands	r2, r3
 8001488:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	019b      	lsls	r3, r3, #6
 800148e:	22ff      	movs	r2, #255	; 0xff
 8001490:	401a      	ands	r2, r3
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	0018      	movs	r0, r3
 8001498:	2303      	movs	r3, #3
 800149a:	4003      	ands	r3, r0
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a0:	4809      	ldr	r0, [pc, #36]	; (80014c8 <__NVIC_SetPriority+0xd8>)
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	001c      	movs	r4, r3
 80014a8:	230f      	movs	r3, #15
 80014aa:	4023      	ands	r3, r4
 80014ac:	3b08      	subs	r3, #8
 80014ae:	089b      	lsrs	r3, r3, #2
 80014b0:	430a      	orrs	r2, r1
 80014b2:	3306      	adds	r3, #6
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	18c3      	adds	r3, r0, r3
 80014b8:	3304      	adds	r3, #4
 80014ba:	601a      	str	r2, [r3, #0]
}
 80014bc:	46c0      	nop			; (mov r8, r8)
 80014be:	46bd      	mov	sp, r7
 80014c0:	b003      	add	sp, #12
 80014c2:	bd90      	pop	{r4, r7, pc}
 80014c4:	e000e100 	.word	0xe000e100
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	1e5a      	subs	r2, r3, #1
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	045b      	lsls	r3, r3, #17
 80014dc:	429a      	cmp	r2, r3
 80014de:	d301      	bcc.n	80014e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e0:	2301      	movs	r3, #1
 80014e2:	e010      	b.n	8001506 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <SysTick_Config+0x44>)
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	3a01      	subs	r2, #1
 80014ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ec:	2301      	movs	r3, #1
 80014ee:	425b      	negs	r3, r3
 80014f0:	2103      	movs	r1, #3
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff ff7c 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <SysTick_Config+0x44>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	; (8001510 <SysTick_Config+0x44>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	0018      	movs	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	60b9      	str	r1, [r7, #8]
 800151c:	607a      	str	r2, [r7, #4]
 800151e:	210f      	movs	r1, #15
 8001520:	187b      	adds	r3, r7, r1
 8001522:	1c02      	adds	r2, r0, #0
 8001524:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	187b      	adds	r3, r7, r1
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	b25b      	sxtb	r3, r3
 800152e:	0011      	movs	r1, r2
 8001530:	0018      	movs	r0, r3
 8001532:	f7ff ff5d 	bl	80013f0 <__NVIC_SetPriority>
}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b004      	add	sp, #16
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	0002      	movs	r2, r0
 8001546:	1dfb      	adds	r3, r7, #7
 8001548:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	b25b      	sxtb	r3, r3
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff ff33 	bl	80013bc <__NVIC_EnableIRQ>
}
 8001556:	46c0      	nop			; (mov r8, r8)
 8001558:	46bd      	mov	sp, r7
 800155a:	b002      	add	sp, #8
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff ffaf 	bl	80014cc <SysTick_Config>
 800156e:	0003      	movs	r3, r0
}
 8001570:	0018      	movs	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	b002      	add	sp, #8
 8001576:	bd80      	pop	{r7, pc}

08001578 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d101      	bne.n	800158e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e036      	b.n	80015fc <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2221      	movs	r2, #33	; 0x21
 8001592:	2102      	movs	r1, #2
 8001594:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	4a18      	ldr	r2, [pc, #96]	; (8001604 <HAL_DMA_Init+0x8c>)
 80015a2:	4013      	ands	r3, r2
 80015a4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	69db      	ldr	r3, [r3, #28]
 80015cc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68fa      	ldr	r2, [r7, #12]
 80015da:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 f98c 	bl	80018fc <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2200      	movs	r2, #0
 80015e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2221      	movs	r2, #33	; 0x21
 80015ee:	2101      	movs	r1, #1
 80015f0:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2220      	movs	r2, #32
 80015f6:	2100      	movs	r1, #0
 80015f8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
}  
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b004      	add	sp, #16
 8001602:	bd80      	pop	{r7, pc}
 8001604:	ffffc00f 	.word	0xffffc00f

08001608 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001616:	2317      	movs	r3, #23
 8001618:	18fb      	adds	r3, r7, r3
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	2220      	movs	r2, #32
 8001622:	5c9b      	ldrb	r3, [r3, r2]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_DMA_Start_IT+0x24>
 8001628:	2302      	movs	r3, #2
 800162a:	e04f      	b.n	80016cc <HAL_DMA_Start_IT+0xc4>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2220      	movs	r2, #32
 8001630:	2101      	movs	r1, #1
 8001632:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2221      	movs	r2, #33	; 0x21
 8001638:	5c9b      	ldrb	r3, [r3, r2]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d13a      	bne.n	80016b6 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2221      	movs	r2, #33	; 0x21
 8001644:	2102      	movs	r1, #2
 8001646:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2101      	movs	r1, #1
 800165a:	438a      	bics	r2, r1
 800165c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 f91c 	bl	80018a2 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	210e      	movs	r1, #14
 800167e:	430a      	orrs	r2, r1
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e00f      	b.n	80016a4 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	210a      	movs	r1, #10
 8001690:	430a      	orrs	r2, r1
 8001692:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2104      	movs	r1, #4
 80016a0:	438a      	bics	r2, r1
 80016a2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2101      	movs	r1, #1
 80016b0:	430a      	orrs	r2, r1
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	e007      	b.n	80016c6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	2220      	movs	r2, #32
 80016ba:	2100      	movs	r1, #0
 80016bc:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80016be:	2317      	movs	r3, #23
 80016c0:	18fb      	adds	r3, r7, r3
 80016c2:	2202      	movs	r2, #2
 80016c4:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80016c6:	2317      	movs	r3, #23
 80016c8:	18fb      	adds	r3, r7, r3
 80016ca:	781b      	ldrb	r3, [r3, #0]
} 
 80016cc:	0018      	movs	r0, r3
 80016ce:	46bd      	mov	sp, r7
 80016d0:	b006      	add	sp, #24
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016dc:	210f      	movs	r1, #15
 80016de:	187b      	adds	r3, r7, r1
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2221      	movs	r2, #33	; 0x21
 80016e8:	5c9b      	ldrb	r3, [r3, r2]
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d006      	beq.n	80016fe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2204      	movs	r2, #4
 80016f4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016f6:	187b      	adds	r3, r7, r1
 80016f8:	2201      	movs	r2, #1
 80016fa:	701a      	strb	r2, [r3, #0]
 80016fc:	e028      	b.n	8001750 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	210e      	movs	r1, #14
 800170a:	438a      	bics	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2101      	movs	r1, #1
 800171a:	438a      	bics	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001726:	2101      	movs	r1, #1
 8001728:	4091      	lsls	r1, r2
 800172a:	000a      	movs	r2, r1
 800172c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2221      	movs	r2, #33	; 0x21
 8001732:	2101      	movs	r1, #1
 8001734:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2220      	movs	r2, #32
 800173a:	2100      	movs	r1, #0
 800173c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001742:	2b00      	cmp	r3, #0
 8001744:	d004      	beq.n	8001750 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	0010      	movs	r0, r2
 800174e:	4798      	blx	r3
    } 
  }
  return status;
 8001750:	230f      	movs	r3, #15
 8001752:	18fb      	adds	r3, r7, r3
 8001754:	781b      	ldrb	r3, [r3, #0]
}
 8001756:	0018      	movs	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	b004      	add	sp, #16
 800175c:	bd80      	pop	{r7, pc}

0800175e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800175e:	b580      	push	{r7, lr}
 8001760:	b084      	sub	sp, #16
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177a:	2204      	movs	r2, #4
 800177c:	409a      	lsls	r2, r3
 800177e:	0013      	movs	r3, r2
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	4013      	ands	r3, r2
 8001784:	d024      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x72>
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	2204      	movs	r2, #4
 800178a:	4013      	ands	r3, r2
 800178c:	d020      	beq.n	80017d0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2220      	movs	r2, #32
 8001796:	4013      	ands	r3, r2
 8001798:	d107      	bne.n	80017aa <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2104      	movs	r1, #4
 80017a6:	438a      	bics	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b2:	2104      	movs	r1, #4
 80017b4:	4091      	lsls	r1, r2
 80017b6:	000a      	movs	r2, r1
 80017b8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d100      	bne.n	80017c4 <HAL_DMA_IRQHandler+0x66>
 80017c2:	e06a      	b.n	800189a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	0010      	movs	r0, r2
 80017cc:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80017ce:	e064      	b.n	800189a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	2202      	movs	r2, #2
 80017d6:	409a      	lsls	r2, r3
 80017d8:	0013      	movs	r3, r2
 80017da:	68fa      	ldr	r2, [r7, #12]
 80017dc:	4013      	ands	r3, r2
 80017de:	d02b      	beq.n	8001838 <HAL_DMA_IRQHandler+0xda>
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	d027      	beq.n	8001838 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2220      	movs	r2, #32
 80017f0:	4013      	ands	r3, r2
 80017f2:	d10b      	bne.n	800180c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	210a      	movs	r1, #10
 8001800:	438a      	bics	r2, r1
 8001802:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2221      	movs	r2, #33	; 0x21
 8001808:	2101      	movs	r1, #1
 800180a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001814:	2102      	movs	r1, #2
 8001816:	4091      	lsls	r1, r2
 8001818:	000a      	movs	r2, r1
 800181a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2220      	movs	r2, #32
 8001820:	2100      	movs	r1, #0
 8001822:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	2b00      	cmp	r3, #0
 800182a:	d036      	beq.n	800189a <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	0010      	movs	r0, r2
 8001834:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001836:	e030      	b.n	800189a <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183c:	2208      	movs	r2, #8
 800183e:	409a      	lsls	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	68fa      	ldr	r2, [r7, #12]
 8001844:	4013      	ands	r3, r2
 8001846:	d028      	beq.n	800189a <HAL_DMA_IRQHandler+0x13c>
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2208      	movs	r2, #8
 800184c:	4013      	ands	r3, r2
 800184e:	d024      	beq.n	800189a <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	210e      	movs	r1, #14
 800185c:	438a      	bics	r2, r1
 800185e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001868:	2101      	movs	r1, #1
 800186a:	4091      	lsls	r1, r2
 800186c:	000a      	movs	r2, r1
 800186e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2221      	movs	r2, #33	; 0x21
 800187a:	2101      	movs	r1, #1
 800187c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2220      	movs	r2, #32
 8001882:	2100      	movs	r1, #0
 8001884:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	0010      	movs	r0, r2
 8001896:	4798      	blx	r3
    }
   }
}  
 8001898:	e7ff      	b.n	800189a <HAL_DMA_IRQHandler+0x13c>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	46bd      	mov	sp, r7
 800189e:	b004      	add	sp, #16
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018b8:	2101      	movs	r1, #1
 80018ba:	4091      	lsls	r1, r2
 80018bc:	000a      	movs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b10      	cmp	r3, #16
 80018ce:	d108      	bne.n	80018e2 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68ba      	ldr	r2, [r7, #8]
 80018de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018e0:	e007      	b.n	80018f2 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68ba      	ldr	r2, [r7, #8]
 80018e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	60da      	str	r2, [r3, #12]
}
 80018f2:	46c0      	nop			; (mov r8, r8)
 80018f4:	46bd      	mov	sp, r7
 80018f6:	b004      	add	sp, #16
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	001a      	movs	r2, r3
 800190a:	4b14      	ldr	r3, [pc, #80]	; (800195c <DMA_CalcBaseAndBitshift+0x60>)
 800190c:	429a      	cmp	r2, r3
 800190e:	d810      	bhi.n	8001932 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a12      	ldr	r2, [pc, #72]	; (8001960 <DMA_CalcBaseAndBitshift+0x64>)
 8001916:	4694      	mov	ip, r2
 8001918:	4463      	add	r3, ip
 800191a:	2114      	movs	r1, #20
 800191c:	0018      	movs	r0, r3
 800191e:	f7fe fc03 	bl	8000128 <__udivsi3>
 8001922:	0003      	movs	r3, r0
 8001924:	009a      	lsls	r2, r3, #2
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a0d      	ldr	r2, [pc, #52]	; (8001964 <DMA_CalcBaseAndBitshift+0x68>)
 800192e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001930:	e00f      	b.n	8001952 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a0c      	ldr	r2, [pc, #48]	; (8001968 <DMA_CalcBaseAndBitshift+0x6c>)
 8001938:	4694      	mov	ip, r2
 800193a:	4463      	add	r3, ip
 800193c:	2114      	movs	r1, #20
 800193e:	0018      	movs	r0, r3
 8001940:	f7fe fbf2 	bl	8000128 <__udivsi3>
 8001944:	0003      	movs	r3, r0
 8001946:	009a      	lsls	r2, r3, #2
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a07      	ldr	r2, [pc, #28]	; (800196c <DMA_CalcBaseAndBitshift+0x70>)
 8001950:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001952:	46c0      	nop			; (mov r8, r8)
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	40020407 	.word	0x40020407
 8001960:	bffdfff8 	.word	0xbffdfff8
 8001964:	40020000 	.word	0x40020000
 8001968:	bffdfbf8 	.word	0xbffdfbf8
 800196c:	40020400 	.word	0x40020400

08001970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800197a:	2300      	movs	r3, #0
 800197c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197e:	e155      	b.n	8001c2c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2101      	movs	r1, #1
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	4091      	lsls	r1, r2
 800198a:	000a      	movs	r2, r1
 800198c:	4013      	ands	r3, r2
 800198e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d100      	bne.n	8001998 <HAL_GPIO_Init+0x28>
 8001996:	e146      	b.n	8001c26 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	2203      	movs	r2, #3
 800199e:	4013      	ands	r3, r2
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d005      	beq.n	80019b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2203      	movs	r2, #3
 80019aa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d130      	bne.n	8001a12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	2203      	movs	r2, #3
 80019bc:	409a      	lsls	r2, r3
 80019be:	0013      	movs	r3, r2
 80019c0:	43da      	mvns	r2, r3
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	4013      	ands	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	68da      	ldr	r2, [r3, #12]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	409a      	lsls	r2, r3
 80019d2:	0013      	movs	r3, r2
 80019d4:	693a      	ldr	r2, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019e6:	2201      	movs	r2, #1
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	409a      	lsls	r2, r3
 80019ec:	0013      	movs	r3, r2
 80019ee:	43da      	mvns	r2, r3
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	091b      	lsrs	r3, r3, #4
 80019fc:	2201      	movs	r2, #1
 80019fe:	401a      	ands	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	409a      	lsls	r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2203      	movs	r2, #3
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d017      	beq.n	8001a4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	409a      	lsls	r2, r3
 8001a2c:	0013      	movs	r3, r2
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	689a      	ldr	r2, [r3, #8]
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	0013      	movs	r3, r2
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2203      	movs	r2, #3
 8001a54:	4013      	ands	r3, r2
 8001a56:	2b02      	cmp	r3, #2
 8001a58:	d123      	bne.n	8001aa2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	08da      	lsrs	r2, r3, #3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	3208      	adds	r2, #8
 8001a62:	0092      	lsls	r2, r2, #2
 8001a64:	58d3      	ldr	r3, [r2, r3]
 8001a66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	2207      	movs	r2, #7
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	220f      	movs	r2, #15
 8001a72:	409a      	lsls	r2, r3
 8001a74:	0013      	movs	r3, r2
 8001a76:	43da      	mvns	r2, r3
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	691a      	ldr	r2, [r3, #16]
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	2107      	movs	r1, #7
 8001a86:	400b      	ands	r3, r1
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	409a      	lsls	r2, r3
 8001a8c:	0013      	movs	r3, r2
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	08da      	lsrs	r2, r3, #3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3208      	adds	r2, #8
 8001a9c:	0092      	lsls	r2, r2, #2
 8001a9e:	6939      	ldr	r1, [r7, #16]
 8001aa0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	2203      	movs	r2, #3
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	2203      	movs	r2, #3
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	409a      	lsls	r2, r3
 8001ac8:	0013      	movs	r3, r2
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685a      	ldr	r2, [r3, #4]
 8001ada:	23c0      	movs	r3, #192	; 0xc0
 8001adc:	029b      	lsls	r3, r3, #10
 8001ade:	4013      	ands	r3, r2
 8001ae0:	d100      	bne.n	8001ae4 <HAL_GPIO_Init+0x174>
 8001ae2:	e0a0      	b.n	8001c26 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ae4:	4b57      	ldr	r3, [pc, #348]	; (8001c44 <HAL_GPIO_Init+0x2d4>)
 8001ae6:	699a      	ldr	r2, [r3, #24]
 8001ae8:	4b56      	ldr	r3, [pc, #344]	; (8001c44 <HAL_GPIO_Init+0x2d4>)
 8001aea:	2101      	movs	r1, #1
 8001aec:	430a      	orrs	r2, r1
 8001aee:	619a      	str	r2, [r3, #24]
 8001af0:	4b54      	ldr	r3, [pc, #336]	; (8001c44 <HAL_GPIO_Init+0x2d4>)
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2201      	movs	r2, #1
 8001af6:	4013      	ands	r3, r2
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_GPIO_Init+0x2d8>)
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	589b      	ldr	r3, [r3, r2]
 8001b08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	4013      	ands	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	220f      	movs	r2, #15
 8001b14:	409a      	lsls	r2, r3
 8001b16:	0013      	movs	r3, r2
 8001b18:	43da      	mvns	r2, r3
 8001b1a:	693b      	ldr	r3, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	2390      	movs	r3, #144	; 0x90
 8001b24:	05db      	lsls	r3, r3, #23
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d019      	beq.n	8001b5e <HAL_GPIO_Init+0x1ee>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a47      	ldr	r2, [pc, #284]	; (8001c4c <HAL_GPIO_Init+0x2dc>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x1ea>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a46      	ldr	r2, [pc, #280]	; (8001c50 <HAL_GPIO_Init+0x2e0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x1e6>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a45      	ldr	r2, [pc, #276]	; (8001c54 <HAL_GPIO_Init+0x2e4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x1e2>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a44      	ldr	r2, [pc, #272]	; (8001c58 <HAL_GPIO_Init+0x2e8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x1de>
 8001b4a:	2304      	movs	r3, #4
 8001b4c:	e008      	b.n	8001b60 <HAL_GPIO_Init+0x1f0>
 8001b4e:	2305      	movs	r3, #5
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x1f0>
 8001b52:	2303      	movs	r3, #3
 8001b54:	e004      	b.n	8001b60 <HAL_GPIO_Init+0x1f0>
 8001b56:	2302      	movs	r3, #2
 8001b58:	e002      	b.n	8001b60 <HAL_GPIO_Init+0x1f0>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_GPIO_Init+0x1f0>
 8001b5e:	2300      	movs	r3, #0
 8001b60:	697a      	ldr	r2, [r7, #20]
 8001b62:	2103      	movs	r1, #3
 8001b64:	400a      	ands	r2, r1
 8001b66:	0092      	lsls	r2, r2, #2
 8001b68:	4093      	lsls	r3, r2
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b70:	4935      	ldr	r1, [pc, #212]	; (8001c48 <HAL_GPIO_Init+0x2d8>)
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	089b      	lsrs	r3, r3, #2
 8001b76:	3302      	adds	r3, #2
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	43da      	mvns	r2, r3
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	2380      	movs	r3, #128	; 0x80
 8001b94:	025b      	lsls	r3, r3, #9
 8001b96:	4013      	ands	r3, r2
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ba2:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001ba8:	4b2c      	ldr	r3, [pc, #176]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	43da      	mvns	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	029b      	lsls	r3, r3, #10
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d003      	beq.n	8001bcc <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bcc:	4b23      	ldr	r3, [pc, #140]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001bce:	693a      	ldr	r2, [r7, #16]
 8001bd0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bd2:	4b22      	ldr	r3, [pc, #136]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	4013      	ands	r3, r2
 8001be0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	035b      	lsls	r3, r3, #13
 8001bea:	4013      	ands	r3, r2
 8001bec:	d003      	beq.n	8001bf6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	43da      	mvns	r2, r3
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685a      	ldr	r2, [r3, #4]
 8001c10:	2380      	movs	r3, #128	; 0x80
 8001c12:	039b      	lsls	r3, r3, #14
 8001c14:	4013      	ands	r3, r2
 8001c16:	d003      	beq.n	8001c20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <HAL_GPIO_Init+0x2ec>)
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	3301      	adds	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	40da      	lsrs	r2, r3
 8001c34:	1e13      	subs	r3, r2, #0
 8001c36:	d000      	beq.n	8001c3a <HAL_GPIO_Init+0x2ca>
 8001c38:	e6a2      	b.n	8001980 <HAL_GPIO_Init+0x10>
  } 
}
 8001c3a:	46c0      	nop			; (mov r8, r8)
 8001c3c:	46c0      	nop			; (mov r8, r8)
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	b006      	add	sp, #24
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010000 	.word	0x40010000
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	48000800 	.word	0x48000800
 8001c54:	48000c00 	.word	0x48000c00
 8001c58:	48001000 	.word	0x48001000
 8001c5c:	40010400 	.word	0x40010400

08001c60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	0008      	movs	r0, r1
 8001c6a:	0011      	movs	r1, r2
 8001c6c:	1cbb      	adds	r3, r7, #2
 8001c6e:	1c02      	adds	r2, r0, #0
 8001c70:	801a      	strh	r2, [r3, #0]
 8001c72:	1c7b      	adds	r3, r7, #1
 8001c74:	1c0a      	adds	r2, r1, #0
 8001c76:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c78:	1c7b      	adds	r3, r7, #1
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d004      	beq.n	8001c8a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c80:	1cbb      	adds	r3, r7, #2
 8001c82:	881a      	ldrh	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c88:	e003      	b.n	8001c92 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c8a:	1cbb      	adds	r3, r7, #2
 8001c8c:	881a      	ldrh	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	46bd      	mov	sp, r7
 8001c96:	b002      	add	sp, #8
 8001c98:	bd80      	pop	{r7, pc}
	...

08001c9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b088      	sub	sp, #32
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	f000 fb76 	bl	800239c <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d100      	bne.n	8001cbc <HAL_RCC_OscConfig+0x20>
 8001cba:	e08e      	b.n	8001dda <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cbc:	4bc5      	ldr	r3, [pc, #788]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	220c      	movs	r2, #12
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d00e      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cc8:	4bc2      	ldr	r3, [pc, #776]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	220c      	movs	r2, #12
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b08      	cmp	r3, #8
 8001cd2:	d117      	bne.n	8001d04 <HAL_RCC_OscConfig+0x68>
 8001cd4:	4bbf      	ldr	r3, [pc, #764]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	23c0      	movs	r3, #192	; 0xc0
 8001cda:	025b      	lsls	r3, r3, #9
 8001cdc:	401a      	ands	r2, r3
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	025b      	lsls	r3, r3, #9
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d10e      	bne.n	8001d04 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce6:	4bbb      	ldr	r3, [pc, #748]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	2380      	movs	r3, #128	; 0x80
 8001cec:	029b      	lsls	r3, r3, #10
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d100      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x58>
 8001cf2:	e071      	b.n	8001dd8 <HAL_RCC_OscConfig+0x13c>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d000      	beq.n	8001cfe <HAL_RCC_OscConfig+0x62>
 8001cfc:	e06c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	f000 fb4c 	bl	800239c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x80>
 8001d0c:	4bb1      	ldr	r3, [pc, #708]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4bb0      	ldr	r3, [pc, #704]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d12:	2180      	movs	r1, #128	; 0x80
 8001d14:	0249      	lsls	r1, r1, #9
 8001d16:	430a      	orrs	r2, r1
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	e02f      	b.n	8001d7c <HAL_RCC_OscConfig+0xe0>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10c      	bne.n	8001d3e <HAL_RCC_OscConfig+0xa2>
 8001d24:	4bab      	ldr	r3, [pc, #684]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	4baa      	ldr	r3, [pc, #680]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d2a:	49ab      	ldr	r1, [pc, #684]	; (8001fd8 <HAL_RCC_OscConfig+0x33c>)
 8001d2c:	400a      	ands	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	4ba8      	ldr	r3, [pc, #672]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	4ba7      	ldr	r3, [pc, #668]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d36:	49a9      	ldr	r1, [pc, #676]	; (8001fdc <HAL_RCC_OscConfig+0x340>)
 8001d38:	400a      	ands	r2, r1
 8001d3a:	601a      	str	r2, [r3, #0]
 8001d3c:	e01e      	b.n	8001d7c <HAL_RCC_OscConfig+0xe0>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d10e      	bne.n	8001d64 <HAL_RCC_OscConfig+0xc8>
 8001d46:	4ba3      	ldr	r3, [pc, #652]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	4ba2      	ldr	r3, [pc, #648]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d4c:	2180      	movs	r1, #128	; 0x80
 8001d4e:	02c9      	lsls	r1, r1, #11
 8001d50:	430a      	orrs	r2, r1
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	4b9f      	ldr	r3, [pc, #636]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	4b9e      	ldr	r3, [pc, #632]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d5a:	2180      	movs	r1, #128	; 0x80
 8001d5c:	0249      	lsls	r1, r1, #9
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e00b      	b.n	8001d7c <HAL_RCC_OscConfig+0xe0>
 8001d64:	4b9b      	ldr	r3, [pc, #620]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	4b9a      	ldr	r3, [pc, #616]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d6a:	499b      	ldr	r1, [pc, #620]	; (8001fd8 <HAL_RCC_OscConfig+0x33c>)
 8001d6c:	400a      	ands	r2, r1
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	4b98      	ldr	r3, [pc, #608]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b97      	ldr	r3, [pc, #604]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001d76:	4999      	ldr	r1, [pc, #612]	; (8001fdc <HAL_RCC_OscConfig+0x340>)
 8001d78:	400a      	ands	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d014      	beq.n	8001dae <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d84:	f7ff fb10 	bl	80013a8 <HAL_GetTick>
 8001d88:	0003      	movs	r3, r0
 8001d8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d8e:	f7ff fb0b 	bl	80013a8 <HAL_GetTick>
 8001d92:	0002      	movs	r2, r0
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b64      	cmp	r3, #100	; 0x64
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e2fd      	b.n	800239c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da0:	4b8c      	ldr	r3, [pc, #560]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	2380      	movs	r3, #128	; 0x80
 8001da6:	029b      	lsls	r3, r3, #10
 8001da8:	4013      	ands	r3, r2
 8001daa:	d0f0      	beq.n	8001d8e <HAL_RCC_OscConfig+0xf2>
 8001dac:	e015      	b.n	8001dda <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dae:	f7ff fafb 	bl	80013a8 <HAL_GetTick>
 8001db2:	0003      	movs	r3, r0
 8001db4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db8:	f7ff faf6 	bl	80013a8 <HAL_GetTick>
 8001dbc:	0002      	movs	r2, r0
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b64      	cmp	r3, #100	; 0x64
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e2e8      	b.n	800239c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dca:	4b82      	ldr	r3, [pc, #520]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	029b      	lsls	r3, r3, #10
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x11c>
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2202      	movs	r2, #2
 8001de0:	4013      	ands	r3, r2
 8001de2:	d100      	bne.n	8001de6 <HAL_RCC_OscConfig+0x14a>
 8001de4:	e06c      	b.n	8001ec0 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001de6:	4b7b      	ldr	r3, [pc, #492]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	220c      	movs	r2, #12
 8001dec:	4013      	ands	r3, r2
 8001dee:	d00e      	beq.n	8001e0e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001df0:	4b78      	ldr	r3, [pc, #480]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	220c      	movs	r2, #12
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b08      	cmp	r3, #8
 8001dfa:	d11f      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1a0>
 8001dfc:	4b75      	ldr	r3, [pc, #468]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001dfe:	685a      	ldr	r2, [r3, #4]
 8001e00:	23c0      	movs	r3, #192	; 0xc0
 8001e02:	025b      	lsls	r3, r3, #9
 8001e04:	401a      	ands	r2, r3
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	021b      	lsls	r3, r3, #8
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d116      	bne.n	8001e3c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0e:	4b71      	ldr	r3, [pc, #452]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2202      	movs	r2, #2
 8001e14:	4013      	ands	r3, r2
 8001e16:	d005      	beq.n	8001e24 <HAL_RCC_OscConfig+0x188>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e2bb      	b.n	800239c <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e24:	4b6b      	ldr	r3, [pc, #428]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	22f8      	movs	r2, #248	; 0xf8
 8001e2a:	4393      	bics	r3, r2
 8001e2c:	0019      	movs	r1, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	00da      	lsls	r2, r3, #3
 8001e34:	4b67      	ldr	r3, [pc, #412]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001e36:	430a      	orrs	r2, r1
 8001e38:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e3a:	e041      	b.n	8001ec0 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d024      	beq.n	8001e8e <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e44:	4b63      	ldr	r3, [pc, #396]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b62      	ldr	r3, [pc, #392]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	430a      	orrs	r2, r1
 8001e4e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff faaa 	bl	80013a8 <HAL_GetTick>
 8001e54:	0003      	movs	r3, r0
 8001e56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e5a:	f7ff faa5 	bl	80013a8 <HAL_GetTick>
 8001e5e:	0002      	movs	r2, r0
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e297      	b.n	800239c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2202      	movs	r2, #2
 8001e72:	4013      	ands	r3, r2
 8001e74:	d0f1      	beq.n	8001e5a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e76:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	22f8      	movs	r2, #248	; 0xf8
 8001e7c:	4393      	bics	r3, r2
 8001e7e:	0019      	movs	r1, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	691b      	ldr	r3, [r3, #16]
 8001e84:	00da      	lsls	r2, r3, #3
 8001e86:	4b53      	ldr	r3, [pc, #332]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e018      	b.n	8001ec0 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e8e:	4b51      	ldr	r3, [pc, #324]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001e90:	681a      	ldr	r2, [r3, #0]
 8001e92:	4b50      	ldr	r3, [pc, #320]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001e94:	2101      	movs	r1, #1
 8001e96:	438a      	bics	r2, r1
 8001e98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff fa85 	bl	80013a8 <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ea4:	f7ff fa80 	bl	80013a8 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e272      	b.n	800239c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d1f1      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2208      	movs	r2, #8
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	d036      	beq.n	8001f38 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d019      	beq.n	8001f06 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed2:	4b40      	ldr	r3, [pc, #256]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ed6:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001ed8:	2101      	movs	r1, #1
 8001eda:	430a      	orrs	r2, r1
 8001edc:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fa63 	bl	80013a8 <HAL_GetTick>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ee8:	f7ff fa5e 	bl	80013a8 <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e250      	b.n	800239c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	4b36      	ldr	r3, [pc, #216]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001efe:	2202      	movs	r2, #2
 8001f00:	4013      	ands	r3, r2
 8001f02:	d0f1      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x24c>
 8001f04:	e018      	b.n	8001f38 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f06:	4b33      	ldr	r3, [pc, #204]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f0a:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	438a      	bics	r2, r1
 8001f10:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f12:	f7ff fa49 	bl	80013a8 <HAL_GetTick>
 8001f16:	0003      	movs	r3, r0
 8001f18:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1c:	f7ff fa44 	bl	80013a8 <HAL_GetTick>
 8001f20:	0002      	movs	r2, r0
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e236      	b.n	800239c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f2e:	4b29      	ldr	r3, [pc, #164]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f32:	2202      	movs	r2, #2
 8001f34:	4013      	ands	r3, r2
 8001f36:	d1f1      	bne.n	8001f1c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2204      	movs	r2, #4
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d100      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2a8>
 8001f42:	e0b5      	b.n	80020b0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f44:	201f      	movs	r0, #31
 8001f46:	183b      	adds	r3, r7, r0
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f4c:	4b21      	ldr	r3, [pc, #132]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001f4e:	69da      	ldr	r2, [r3, #28]
 8001f50:	2380      	movs	r3, #128	; 0x80
 8001f52:	055b      	lsls	r3, r3, #21
 8001f54:	4013      	ands	r3, r2
 8001f56:	d110      	bne.n	8001f7a <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001f5a:	69da      	ldr	r2, [r3, #28]
 8001f5c:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001f5e:	2180      	movs	r1, #128	; 0x80
 8001f60:	0549      	lsls	r1, r1, #21
 8001f62:	430a      	orrs	r2, r1
 8001f64:	61da      	str	r2, [r3, #28]
 8001f66:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001f68:	69da      	ldr	r2, [r3, #28]
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	055b      	lsls	r3, r3, #21
 8001f6e:	4013      	ands	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f74:	183b      	adds	r3, r7, r0
 8001f76:	2201      	movs	r2, #1
 8001f78:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f7a:	4b19      	ldr	r3, [pc, #100]	; (8001fe0 <HAL_RCC_OscConfig+0x344>)
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	d11a      	bne.n	8001fbc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_RCC_OscConfig+0x344>)
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	4b15      	ldr	r3, [pc, #84]	; (8001fe0 <HAL_RCC_OscConfig+0x344>)
 8001f8c:	2180      	movs	r1, #128	; 0x80
 8001f8e:	0049      	lsls	r1, r1, #1
 8001f90:	430a      	orrs	r2, r1
 8001f92:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f94:	f7ff fa08 	bl	80013a8 <HAL_GetTick>
 8001f98:	0003      	movs	r3, r0
 8001f9a:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f9e:	f7ff fa03 	bl	80013a8 <HAL_GetTick>
 8001fa2:	0002      	movs	r2, r0
 8001fa4:	69bb      	ldr	r3, [r7, #24]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b64      	cmp	r3, #100	; 0x64
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1f5      	b.n	800239c <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_RCC_OscConfig+0x344>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	2380      	movs	r3, #128	; 0x80
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4013      	ands	r3, r2
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d10f      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x348>
 8001fc4:	4b03      	ldr	r3, [pc, #12]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001fc6:	6a1a      	ldr	r2, [r3, #32]
 8001fc8:	4b02      	ldr	r3, [pc, #8]	; (8001fd4 <HAL_RCC_OscConfig+0x338>)
 8001fca:	2101      	movs	r1, #1
 8001fcc:	430a      	orrs	r2, r1
 8001fce:	621a      	str	r2, [r3, #32]
 8001fd0:	e036      	b.n	8002040 <HAL_RCC_OscConfig+0x3a4>
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	fffeffff 	.word	0xfffeffff
 8001fdc:	fffbffff 	.word	0xfffbffff
 8001fe0:	40007000 	.word	0x40007000
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10c      	bne.n	8002006 <HAL_RCC_OscConfig+0x36a>
 8001fec:	4bca      	ldr	r3, [pc, #808]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8001fee:	6a1a      	ldr	r2, [r3, #32]
 8001ff0:	4bc9      	ldr	r3, [pc, #804]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	621a      	str	r2, [r3, #32]
 8001ff8:	4bc7      	ldr	r3, [pc, #796]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8001ffa:	6a1a      	ldr	r2, [r3, #32]
 8001ffc:	4bc6      	ldr	r3, [pc, #792]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8001ffe:	2104      	movs	r1, #4
 8002000:	438a      	bics	r2, r1
 8002002:	621a      	str	r2, [r3, #32]
 8002004:	e01c      	b.n	8002040 <HAL_RCC_OscConfig+0x3a4>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	2b05      	cmp	r3, #5
 800200c:	d10c      	bne.n	8002028 <HAL_RCC_OscConfig+0x38c>
 800200e:	4bc2      	ldr	r3, [pc, #776]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002010:	6a1a      	ldr	r2, [r3, #32]
 8002012:	4bc1      	ldr	r3, [pc, #772]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002014:	2104      	movs	r1, #4
 8002016:	430a      	orrs	r2, r1
 8002018:	621a      	str	r2, [r3, #32]
 800201a:	4bbf      	ldr	r3, [pc, #764]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 800201c:	6a1a      	ldr	r2, [r3, #32]
 800201e:	4bbe      	ldr	r3, [pc, #760]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002020:	2101      	movs	r1, #1
 8002022:	430a      	orrs	r2, r1
 8002024:	621a      	str	r2, [r3, #32]
 8002026:	e00b      	b.n	8002040 <HAL_RCC_OscConfig+0x3a4>
 8002028:	4bbb      	ldr	r3, [pc, #748]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 800202a:	6a1a      	ldr	r2, [r3, #32]
 800202c:	4bba      	ldr	r3, [pc, #744]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 800202e:	2101      	movs	r1, #1
 8002030:	438a      	bics	r2, r1
 8002032:	621a      	str	r2, [r3, #32]
 8002034:	4bb8      	ldr	r3, [pc, #736]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002036:	6a1a      	ldr	r2, [r3, #32]
 8002038:	4bb7      	ldr	r3, [pc, #732]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 800203a:	2104      	movs	r1, #4
 800203c:	438a      	bics	r2, r1
 800203e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d014      	beq.n	8002072 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7ff f9ae 	bl	80013a8 <HAL_GetTick>
 800204c:	0003      	movs	r3, r0
 800204e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002050:	e009      	b.n	8002066 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002052:	f7ff f9a9 	bl	80013a8 <HAL_GetTick>
 8002056:	0002      	movs	r2, r0
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	4aaf      	ldr	r2, [pc, #700]	; (800231c <HAL_RCC_OscConfig+0x680>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e19a      	b.n	800239c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002066:	4bac      	ldr	r3, [pc, #688]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	2202      	movs	r2, #2
 800206c:	4013      	ands	r3, r2
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x3b6>
 8002070:	e013      	b.n	800209a <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002072:	f7ff f999 	bl	80013a8 <HAL_GetTick>
 8002076:	0003      	movs	r3, r0
 8002078:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800207a:	e009      	b.n	8002090 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207c:	f7ff f994 	bl	80013a8 <HAL_GetTick>
 8002080:	0002      	movs	r2, r0
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	4aa5      	ldr	r2, [pc, #660]	; (800231c <HAL_RCC_OscConfig+0x680>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e185      	b.n	800239c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002090:	4ba1      	ldr	r3, [pc, #644]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	2202      	movs	r2, #2
 8002096:	4013      	ands	r3, r2
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800209a:	231f      	movs	r3, #31
 800209c:	18fb      	adds	r3, r7, r3
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b01      	cmp	r3, #1
 80020a2:	d105      	bne.n	80020b0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a4:	4b9c      	ldr	r3, [pc, #624]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80020a6:	69da      	ldr	r2, [r3, #28]
 80020a8:	4b9b      	ldr	r3, [pc, #620]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80020aa:	499d      	ldr	r1, [pc, #628]	; (8002320 <HAL_RCC_OscConfig+0x684>)
 80020ac:	400a      	ands	r2, r1
 80020ae:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2210      	movs	r2, #16
 80020b6:	4013      	ands	r3, r2
 80020b8:	d063      	beq.n	8002182 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d12a      	bne.n	8002118 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020c2:	4b95      	ldr	r3, [pc, #596]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80020c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020c6:	4b94      	ldr	r3, [pc, #592]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80020c8:	2104      	movs	r1, #4
 80020ca:	430a      	orrs	r2, r1
 80020cc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020ce:	4b92      	ldr	r3, [pc, #584]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80020d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d2:	4b91      	ldr	r3, [pc, #580]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020da:	f7ff f965 	bl	80013a8 <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020e4:	f7ff f960 	bl	80013a8 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e152      	b.n	800239c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020f6:	4b88      	ldr	r3, [pc, #544]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80020f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fa:	2202      	movs	r2, #2
 80020fc:	4013      	ands	r3, r2
 80020fe:	d0f1      	beq.n	80020e4 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002100:	4b85      	ldr	r3, [pc, #532]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002104:	22f8      	movs	r2, #248	; 0xf8
 8002106:	4393      	bics	r3, r2
 8002108:	0019      	movs	r1, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	00da      	lsls	r2, r3, #3
 8002110:	4b81      	ldr	r3, [pc, #516]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002112:	430a      	orrs	r2, r1
 8002114:	635a      	str	r2, [r3, #52]	; 0x34
 8002116:	e034      	b.n	8002182 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	695b      	ldr	r3, [r3, #20]
 800211c:	3305      	adds	r3, #5
 800211e:	d111      	bne.n	8002144 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002120:	4b7d      	ldr	r3, [pc, #500]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002122:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002124:	4b7c      	ldr	r3, [pc, #496]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002126:	2104      	movs	r1, #4
 8002128:	438a      	bics	r2, r1
 800212a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800212c:	4b7a      	ldr	r3, [pc, #488]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 800212e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002130:	22f8      	movs	r2, #248	; 0xf8
 8002132:	4393      	bics	r3, r2
 8002134:	0019      	movs	r1, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	00da      	lsls	r2, r3, #3
 800213c:	4b76      	ldr	r3, [pc, #472]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 800213e:	430a      	orrs	r2, r1
 8002140:	635a      	str	r2, [r3, #52]	; 0x34
 8002142:	e01e      	b.n	8002182 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002144:	4b74      	ldr	r3, [pc, #464]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002148:	4b73      	ldr	r3, [pc, #460]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 800214a:	2104      	movs	r1, #4
 800214c:	430a      	orrs	r2, r1
 800214e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002150:	4b71      	ldr	r3, [pc, #452]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002152:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002154:	4b70      	ldr	r3, [pc, #448]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002156:	2101      	movs	r1, #1
 8002158:	438a      	bics	r2, r1
 800215a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215c:	f7ff f924 	bl	80013a8 <HAL_GetTick>
 8002160:	0003      	movs	r3, r0
 8002162:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002166:	f7ff f91f 	bl	80013a8 <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e111      	b.n	800239c <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002178:	4b67      	ldr	r3, [pc, #412]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 800217a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217c:	2202      	movs	r2, #2
 800217e:	4013      	ands	r3, r2
 8002180:	d1f1      	bne.n	8002166 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2220      	movs	r2, #32
 8002188:	4013      	ands	r3, r2
 800218a:	d05c      	beq.n	8002246 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800218c:	4b62      	ldr	r3, [pc, #392]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	220c      	movs	r2, #12
 8002192:	4013      	ands	r3, r2
 8002194:	2b0c      	cmp	r3, #12
 8002196:	d00e      	beq.n	80021b6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8002198:	4b5f      	ldr	r3, [pc, #380]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	220c      	movs	r2, #12
 800219e:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80021a0:	2b08      	cmp	r3, #8
 80021a2:	d114      	bne.n	80021ce <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80021a4:	4b5c      	ldr	r3, [pc, #368]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80021a6:	685a      	ldr	r2, [r3, #4]
 80021a8:	23c0      	movs	r3, #192	; 0xc0
 80021aa:	025b      	lsls	r3, r3, #9
 80021ac:	401a      	ands	r2, r3
 80021ae:	23c0      	movs	r3, #192	; 0xc0
 80021b0:	025b      	lsls	r3, r3, #9
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d10b      	bne.n	80021ce <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021b6:	4b58      	ldr	r3, [pc, #352]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80021b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	025b      	lsls	r3, r3, #9
 80021be:	4013      	ands	r3, r2
 80021c0:	d040      	beq.n	8002244 <HAL_RCC_OscConfig+0x5a8>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a1b      	ldr	r3, [r3, #32]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d03c      	beq.n	8002244 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e0e6      	b.n	800239c <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d01b      	beq.n	800220e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021d6:	4b50      	ldr	r3, [pc, #320]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80021d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021da:	4b4f      	ldr	r3, [pc, #316]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80021dc:	2180      	movs	r1, #128	; 0x80
 80021de:	0249      	lsls	r1, r1, #9
 80021e0:	430a      	orrs	r2, r1
 80021e2:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e4:	f7ff f8e0 	bl	80013a8 <HAL_GetTick>
 80021e8:	0003      	movs	r3, r0
 80021ea:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ee:	f7ff f8db 	bl	80013a8 <HAL_GetTick>
 80021f2:	0002      	movs	r2, r0
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e0cd      	b.n	800239c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002200:	4b45      	ldr	r3, [pc, #276]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002204:	2380      	movs	r3, #128	; 0x80
 8002206:	025b      	lsls	r3, r3, #9
 8002208:	4013      	ands	r3, r2
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x552>
 800220c:	e01b      	b.n	8002246 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800220e:	4b42      	ldr	r3, [pc, #264]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002212:	4b41      	ldr	r3, [pc, #260]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002214:	4943      	ldr	r1, [pc, #268]	; (8002324 <HAL_RCC_OscConfig+0x688>)
 8002216:	400a      	ands	r2, r1
 8002218:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221a:	f7ff f8c5 	bl	80013a8 <HAL_GetTick>
 800221e:	0003      	movs	r3, r0
 8002220:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002222:	e008      	b.n	8002236 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002224:	f7ff f8c0 	bl	80013a8 <HAL_GetTick>
 8002228:	0002      	movs	r2, r0
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e0b2      	b.n	800239c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002238:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	025b      	lsls	r3, r3, #9
 800223e:	4013      	ands	r3, r2
 8002240:	d1f0      	bne.n	8002224 <HAL_RCC_OscConfig+0x588>
 8002242:	e000      	b.n	8002246 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8002244:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224a:	2b00      	cmp	r3, #0
 800224c:	d100      	bne.n	8002250 <HAL_RCC_OscConfig+0x5b4>
 800224e:	e0a4      	b.n	800239a <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002250:	4b31      	ldr	r3, [pc, #196]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	220c      	movs	r2, #12
 8002256:	4013      	ands	r3, r2
 8002258:	2b08      	cmp	r3, #8
 800225a:	d100      	bne.n	800225e <HAL_RCC_OscConfig+0x5c2>
 800225c:	e078      	b.n	8002350 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	2b02      	cmp	r3, #2
 8002264:	d14c      	bne.n	8002300 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002266:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4b2b      	ldr	r3, [pc, #172]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 800226c:	492e      	ldr	r1, [pc, #184]	; (8002328 <HAL_RCC_OscConfig+0x68c>)
 800226e:	400a      	ands	r2, r1
 8002270:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7ff f899 	bl	80013a8 <HAL_GetTick>
 8002276:	0003      	movs	r3, r0
 8002278:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff f894 	bl	80013a8 <HAL_GetTick>
 8002280:	0002      	movs	r2, r0
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e086      	b.n	800239c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	2380      	movs	r3, #128	; 0x80
 8002294:	049b      	lsls	r3, r3, #18
 8002296:	4013      	ands	r3, r2
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 800229c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229e:	220f      	movs	r2, #15
 80022a0:	4393      	bics	r3, r2
 80022a2:	0019      	movs	r1, r3
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022a8:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80022aa:	430a      	orrs	r2, r1
 80022ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80022ae:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	4a1e      	ldr	r2, [pc, #120]	; (800232c <HAL_RCC_OscConfig+0x690>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	0019      	movs	r1, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c0:	431a      	orrs	r2, r3
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80022c4:	430a      	orrs	r2, r1
 80022c6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022c8:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80022ce:	2180      	movs	r1, #128	; 0x80
 80022d0:	0449      	lsls	r1, r1, #17
 80022d2:	430a      	orrs	r2, r1
 80022d4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d6:	f7ff f867 	bl	80013a8 <HAL_GetTick>
 80022da:	0003      	movs	r3, r0
 80022dc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e0:	f7ff f862 	bl	80013a8 <HAL_GetTick>
 80022e4:	0002      	movs	r2, r0
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e054      	b.n	800239c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	049b      	lsls	r3, r3, #18
 80022fa:	4013      	ands	r3, r2
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x644>
 80022fe:	e04c      	b.n	800239a <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002300:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <HAL_RCC_OscConfig+0x67c>)
 8002306:	4908      	ldr	r1, [pc, #32]	; (8002328 <HAL_RCC_OscConfig+0x68c>)
 8002308:	400a      	ands	r2, r1
 800230a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800230c:	f7ff f84c 	bl	80013a8 <HAL_GetTick>
 8002310:	0003      	movs	r3, r0
 8002312:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002314:	e015      	b.n	8002342 <HAL_RCC_OscConfig+0x6a6>
 8002316:	46c0      	nop			; (mov r8, r8)
 8002318:	40021000 	.word	0x40021000
 800231c:	00001388 	.word	0x00001388
 8002320:	efffffff 	.word	0xefffffff
 8002324:	fffeffff 	.word	0xfffeffff
 8002328:	feffffff 	.word	0xfeffffff
 800232c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002330:	f7ff f83a 	bl	80013a8 <HAL_GetTick>
 8002334:	0002      	movs	r2, r0
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e02c      	b.n	800239c <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002342:	4b18      	ldr	r3, [pc, #96]	; (80023a4 <HAL_RCC_OscConfig+0x708>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	2380      	movs	r3, #128	; 0x80
 8002348:	049b      	lsls	r3, r3, #18
 800234a:	4013      	ands	r3, r2
 800234c:	d1f0      	bne.n	8002330 <HAL_RCC_OscConfig+0x694>
 800234e:	e024      	b.n	800239a <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e01f      	b.n	800239c <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <HAL_RCC_OscConfig+0x708>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <HAL_RCC_OscConfig+0x708>)
 8002364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002366:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002368:	697a      	ldr	r2, [r7, #20]
 800236a:	23c0      	movs	r3, #192	; 0xc0
 800236c:	025b      	lsls	r3, r3, #9
 800236e:	401a      	ands	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002374:	429a      	cmp	r2, r3
 8002376:	d10e      	bne.n	8002396 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	220f      	movs	r2, #15
 800237c:	401a      	ands	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002382:	429a      	cmp	r2, r3
 8002384:	d107      	bne.n	8002396 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002386:	697a      	ldr	r2, [r7, #20]
 8002388:	23f0      	movs	r3, #240	; 0xf0
 800238a:	039b      	lsls	r3, r3, #14
 800238c:	401a      	ands	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002392:	429a      	cmp	r2, r3
 8002394:	d001      	beq.n	800239a <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b008      	add	sp, #32
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b084      	sub	sp, #16
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d101      	bne.n	80023bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0bf      	b.n	800253c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023bc:	4b61      	ldr	r3, [pc, #388]	; (8002544 <HAL_RCC_ClockConfig+0x19c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2201      	movs	r2, #1
 80023c2:	4013      	ands	r3, r2
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	429a      	cmp	r2, r3
 80023c8:	d911      	bls.n	80023ee <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ca:	4b5e      	ldr	r3, [pc, #376]	; (8002544 <HAL_RCC_ClockConfig+0x19c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	2201      	movs	r2, #1
 80023d0:	4393      	bics	r3, r2
 80023d2:	0019      	movs	r1, r3
 80023d4:	4b5b      	ldr	r3, [pc, #364]	; (8002544 <HAL_RCC_ClockConfig+0x19c>)
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	430a      	orrs	r2, r1
 80023da:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x19c>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2201      	movs	r2, #1
 80023e2:	4013      	ands	r3, r2
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0a6      	b.n	800253c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	2202      	movs	r2, #2
 80023f4:	4013      	ands	r3, r2
 80023f6:	d015      	beq.n	8002424 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2204      	movs	r2, #4
 80023fe:	4013      	ands	r3, r2
 8002400:	d006      	beq.n	8002410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002402:	4b51      	ldr	r3, [pc, #324]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002408:	21e0      	movs	r1, #224	; 0xe0
 800240a:	00c9      	lsls	r1, r1, #3
 800240c:	430a      	orrs	r2, r1
 800240e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002410:	4b4d      	ldr	r3, [pc, #308]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	22f0      	movs	r2, #240	; 0xf0
 8002416:	4393      	bics	r3, r2
 8002418:	0019      	movs	r1, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	689a      	ldr	r2, [r3, #8]
 800241e:	4b4a      	ldr	r3, [pc, #296]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2201      	movs	r2, #1
 800242a:	4013      	ands	r3, r2
 800242c:	d04c      	beq.n	80024c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d107      	bne.n	8002446 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002436:	4b44      	ldr	r3, [pc, #272]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	2380      	movs	r3, #128	; 0x80
 800243c:	029b      	lsls	r3, r3, #10
 800243e:	4013      	ands	r3, r2
 8002440:	d120      	bne.n	8002484 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e07a      	b.n	800253c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b02      	cmp	r3, #2
 800244c:	d107      	bne.n	800245e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244e:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	2380      	movs	r3, #128	; 0x80
 8002454:	049b      	lsls	r3, r3, #18
 8002456:	4013      	ands	r3, r2
 8002458:	d114      	bne.n	8002484 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e06e      	b.n	800253c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b03      	cmp	r3, #3
 8002464:	d107      	bne.n	8002476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002466:	4b38      	ldr	r3, [pc, #224]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002468:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800246a:	2380      	movs	r3, #128	; 0x80
 800246c:	025b      	lsls	r3, r3, #9
 800246e:	4013      	ands	r3, r2
 8002470:	d108      	bne.n	8002484 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e062      	b.n	800253c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002476:	4b34      	ldr	r3, [pc, #208]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2202      	movs	r2, #2
 800247c:	4013      	ands	r3, r2
 800247e:	d101      	bne.n	8002484 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e05b      	b.n	800253c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002484:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2203      	movs	r2, #3
 800248a:	4393      	bics	r3, r2
 800248c:	0019      	movs	r1, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002494:	430a      	orrs	r2, r1
 8002496:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002498:	f7fe ff86 	bl	80013a8 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a0:	e009      	b.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a2:	f7fe ff81 	bl	80013a8 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	4a27      	ldr	r2, [pc, #156]	; (800254c <HAL_RCC_ClockConfig+0x1a4>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e042      	b.n	800253c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	220c      	movs	r2, #12
 80024bc:	401a      	ands	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d1ec      	bne.n	80024a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_RCC_ClockConfig+0x19c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2201      	movs	r2, #1
 80024ce:	4013      	ands	r3, r2
 80024d0:	683a      	ldr	r2, [r7, #0]
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d211      	bcs.n	80024fa <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_RCC_ClockConfig+0x19c>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2201      	movs	r2, #1
 80024dc:	4393      	bics	r3, r2
 80024de:	0019      	movs	r1, r3
 80024e0:	4b18      	ldr	r3, [pc, #96]	; (8002544 <HAL_RCC_ClockConfig+0x19c>)
 80024e2:	683a      	ldr	r2, [r7, #0]
 80024e4:	430a      	orrs	r2, r1
 80024e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024e8:	4b16      	ldr	r3, [pc, #88]	; (8002544 <HAL_RCC_ClockConfig+0x19c>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2201      	movs	r2, #1
 80024ee:	4013      	ands	r3, r2
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d001      	beq.n	80024fa <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e020      	b.n	800253c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	d009      	beq.n	8002518 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002504:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a11      	ldr	r2, [pc, #68]	; (8002550 <HAL_RCC_ClockConfig+0x1a8>)
 800250a:	4013      	ands	r3, r2
 800250c:	0019      	movs	r1, r3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	68da      	ldr	r2, [r3, #12]
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002514:	430a      	orrs	r2, r1
 8002516:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002518:	f000 f820 	bl	800255c <HAL_RCC_GetSysClockFreq>
 800251c:	0001      	movs	r1, r0
 800251e:	4b0a      	ldr	r3, [pc, #40]	; (8002548 <HAL_RCC_ClockConfig+0x1a0>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	091b      	lsrs	r3, r3, #4
 8002524:	220f      	movs	r2, #15
 8002526:	4013      	ands	r3, r2
 8002528:	4a0a      	ldr	r2, [pc, #40]	; (8002554 <HAL_RCC_ClockConfig+0x1ac>)
 800252a:	5cd3      	ldrb	r3, [r2, r3]
 800252c:	000a      	movs	r2, r1
 800252e:	40da      	lsrs	r2, r3
 8002530:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_RCC_ClockConfig+0x1b0>)
 8002532:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002534:	2003      	movs	r0, #3
 8002536:	f7fe fef1 	bl	800131c <HAL_InitTick>
  
  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	0018      	movs	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	b004      	add	sp, #16
 8002542:	bd80      	pop	{r7, pc}
 8002544:	40022000 	.word	0x40022000
 8002548:	40021000 	.word	0x40021000
 800254c:	00001388 	.word	0x00001388
 8002550:	fffff8ff 	.word	0xfffff8ff
 8002554:	080051dc 	.word	0x080051dc
 8002558:	2000002c 	.word	0x2000002c

0800255c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b08f      	sub	sp, #60	; 0x3c
 8002560:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002562:	2314      	movs	r3, #20
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	4a38      	ldr	r2, [pc, #224]	; (8002648 <HAL_RCC_GetSysClockFreq+0xec>)
 8002568:	ca13      	ldmia	r2!, {r0, r1, r4}
 800256a:	c313      	stmia	r3!, {r0, r1, r4}
 800256c:	6812      	ldr	r2, [r2, #0]
 800256e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002570:	1d3b      	adds	r3, r7, #4
 8002572:	4a36      	ldr	r2, [pc, #216]	; (800264c <HAL_RCC_GetSysClockFreq+0xf0>)
 8002574:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002576:	c313      	stmia	r3!, {r0, r1, r4}
 8002578:	6812      	ldr	r2, [r2, #0]
 800257a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800257c:	2300      	movs	r3, #0
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002580:	2300      	movs	r3, #0
 8002582:	62bb      	str	r3, [r7, #40]	; 0x28
 8002584:	2300      	movs	r3, #0
 8002586:	637b      	str	r3, [r7, #52]	; 0x34
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002590:	4b2f      	ldr	r3, [pc, #188]	; (8002650 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002598:	220c      	movs	r2, #12
 800259a:	4013      	ands	r3, r2
 800259c:	2b0c      	cmp	r3, #12
 800259e:	d047      	beq.n	8002630 <HAL_RCC_GetSysClockFreq+0xd4>
 80025a0:	d849      	bhi.n	8002636 <HAL_RCC_GetSysClockFreq+0xda>
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d002      	beq.n	80025ac <HAL_RCC_GetSysClockFreq+0x50>
 80025a6:	2b08      	cmp	r3, #8
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_GetSysClockFreq+0x56>
 80025aa:	e044      	b.n	8002636 <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025ac:	4b29      	ldr	r3, [pc, #164]	; (8002654 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025b0:	e044      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	0c9b      	lsrs	r3, r3, #18
 80025b6:	220f      	movs	r2, #15
 80025b8:	4013      	ands	r3, r2
 80025ba:	2214      	movs	r2, #20
 80025bc:	18ba      	adds	r2, r7, r2
 80025be:	5cd3      	ldrb	r3, [r2, r3]
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025c2:	4b23      	ldr	r3, [pc, #140]	; (8002650 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c6:	220f      	movs	r2, #15
 80025c8:	4013      	ands	r3, r2
 80025ca:	1d3a      	adds	r2, r7, #4
 80025cc:	5cd3      	ldrb	r3, [r2, r3]
 80025ce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025d2:	23c0      	movs	r3, #192	; 0xc0
 80025d4:	025b      	lsls	r3, r3, #9
 80025d6:	401a      	ands	r2, r3
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	025b      	lsls	r3, r3, #9
 80025dc:	429a      	cmp	r2, r3
 80025de:	d109      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80025e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025e2:	481c      	ldr	r0, [pc, #112]	; (8002654 <HAL_RCC_GetSysClockFreq+0xf8>)
 80025e4:	f7fd fda0 	bl	8000128 <__udivsi3>
 80025e8:	0003      	movs	r3, r0
 80025ea:	001a      	movs	r2, r3
 80025ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ee:	4353      	muls	r3, r2
 80025f0:	637b      	str	r3, [r7, #52]	; 0x34
 80025f2:	e01a      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80025f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025f6:	23c0      	movs	r3, #192	; 0xc0
 80025f8:	025b      	lsls	r3, r3, #9
 80025fa:	401a      	ands	r2, r3
 80025fc:	23c0      	movs	r3, #192	; 0xc0
 80025fe:	025b      	lsls	r3, r3, #9
 8002600:	429a      	cmp	r2, r3
 8002602:	d109      	bne.n	8002618 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002606:	4814      	ldr	r0, [pc, #80]	; (8002658 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002608:	f7fd fd8e 	bl	8000128 <__udivsi3>
 800260c:	0003      	movs	r3, r0
 800260e:	001a      	movs	r2, r3
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	4353      	muls	r3, r2
 8002614:	637b      	str	r3, [r7, #52]	; 0x34
 8002616:	e008      	b.n	800262a <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002618:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800261a:	480e      	ldr	r0, [pc, #56]	; (8002654 <HAL_RCC_GetSysClockFreq+0xf8>)
 800261c:	f7fd fd84 	bl	8000128 <__udivsi3>
 8002620:	0003      	movs	r3, r0
 8002622:	001a      	movs	r2, r3
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	4353      	muls	r3, r2
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800262a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800262c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800262e:	e005      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002632:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002634:	e002      	b.n	800263c <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002638:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800263a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800263e:	0018      	movs	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	b00f      	add	sp, #60	; 0x3c
 8002644:	bd90      	pop	{r4, r7, pc}
 8002646:	46c0      	nop			; (mov r8, r8)
 8002648:	08005118 	.word	0x08005118
 800264c:	08005128 	.word	0x08005128
 8002650:	40021000 	.word	0x40021000
 8002654:	007a1200 	.word	0x007a1200
 8002658:	02dc6c00 	.word	0x02dc6c00

0800265c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002660:	4b02      	ldr	r3, [pc, #8]	; (800266c <HAL_RCC_GetHCLKFreq+0x10>)
 8002662:	681b      	ldr	r3, [r3, #0]
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	2000002c 	.word	0x2000002c

08002670 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002674:	f7ff fff2 	bl	800265c <HAL_RCC_GetHCLKFreq>
 8002678:	0001      	movs	r1, r0
 800267a:	4b06      	ldr	r3, [pc, #24]	; (8002694 <HAL_RCC_GetPCLK1Freq+0x24>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	2207      	movs	r2, #7
 8002682:	4013      	ands	r3, r2
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002686:	5cd3      	ldrb	r3, [r2, r3]
 8002688:	40d9      	lsrs	r1, r3
 800268a:	000b      	movs	r3, r1
}    
 800268c:	0018      	movs	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	46c0      	nop			; (mov r8, r8)
 8002694:	40021000 	.word	0x40021000
 8002698:	080051ec 	.word	0x080051ec

0800269c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80026a8:	2300      	movs	r3, #0
 80026aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	2380      	movs	r3, #128	; 0x80
 80026b2:	025b      	lsls	r3, r3, #9
 80026b4:	4013      	ands	r3, r2
 80026b6:	d100      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80026b8:	e08e      	b.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80026ba:	2017      	movs	r0, #23
 80026bc:	183b      	adds	r3, r7, r0
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c2:	4b6e      	ldr	r3, [pc, #440]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026c4:	69da      	ldr	r2, [r3, #28]
 80026c6:	2380      	movs	r3, #128	; 0x80
 80026c8:	055b      	lsls	r3, r3, #21
 80026ca:	4013      	ands	r3, r2
 80026cc:	d110      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026ce:	4b6b      	ldr	r3, [pc, #428]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	4b6a      	ldr	r3, [pc, #424]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026d4:	2180      	movs	r1, #128	; 0x80
 80026d6:	0549      	lsls	r1, r1, #21
 80026d8:	430a      	orrs	r2, r1
 80026da:	61da      	str	r2, [r3, #28]
 80026dc:	4b67      	ldr	r3, [pc, #412]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	2380      	movs	r3, #128	; 0x80
 80026e2:	055b      	lsls	r3, r3, #21
 80026e4:	4013      	ands	r3, r2
 80026e6:	60bb      	str	r3, [r7, #8]
 80026e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ea:	183b      	adds	r3, r7, r0
 80026ec:	2201      	movs	r2, #1
 80026ee:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f0:	4b63      	ldr	r3, [pc, #396]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4013      	ands	r3, r2
 80026fa:	d11a      	bne.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fc:	4b60      	ldr	r3, [pc, #384]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	4b5f      	ldr	r3, [pc, #380]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002702:	2180      	movs	r1, #128	; 0x80
 8002704:	0049      	lsls	r1, r1, #1
 8002706:	430a      	orrs	r2, r1
 8002708:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270a:	f7fe fe4d 	bl	80013a8 <HAL_GetTick>
 800270e:	0003      	movs	r3, r0
 8002710:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002712:	e008      	b.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002714:	f7fe fe48 	bl	80013a8 <HAL_GetTick>
 8002718:	0002      	movs	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e0a6      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002726:	4b56      	ldr	r3, [pc, #344]	; (8002880 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	2380      	movs	r3, #128	; 0x80
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	4013      	ands	r3, r2
 8002730:	d0f0      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002732:	4b52      	ldr	r3, [pc, #328]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002734:	6a1a      	ldr	r2, [r3, #32]
 8002736:	23c0      	movs	r3, #192	; 0xc0
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4013      	ands	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d034      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	23c0      	movs	r3, #192	; 0xc0
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4013      	ands	r3, r2
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	429a      	cmp	r2, r3
 8002752:	d02c      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002754:	4b49      	ldr	r3, [pc, #292]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4a4a      	ldr	r2, [pc, #296]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800275a:	4013      	ands	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800275e:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002760:	6a1a      	ldr	r2, [r3, #32]
 8002762:	4b46      	ldr	r3, [pc, #280]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002764:	2180      	movs	r1, #128	; 0x80
 8002766:	0249      	lsls	r1, r1, #9
 8002768:	430a      	orrs	r2, r1
 800276a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800276c:	4b43      	ldr	r3, [pc, #268]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800276e:	6a1a      	ldr	r2, [r3, #32]
 8002770:	4b42      	ldr	r3, [pc, #264]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002772:	4945      	ldr	r1, [pc, #276]	; (8002888 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002774:	400a      	ands	r2, r1
 8002776:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002778:	4b40      	ldr	r3, [pc, #256]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2201      	movs	r2, #1
 8002782:	4013      	ands	r3, r2
 8002784:	d013      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002786:	f7fe fe0f 	bl	80013a8 <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	e009      	b.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe fe0a 	bl	80013a8 <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	4a3c      	ldr	r2, [pc, #240]	; (800288c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d901      	bls.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e067      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a4:	4b35      	ldr	r3, [pc, #212]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	2202      	movs	r2, #2
 80027aa:	4013      	ands	r3, r2
 80027ac:	d0f0      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027ae:	4b33      	ldr	r3, [pc, #204]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027b0:	6a1b      	ldr	r3, [r3, #32]
 80027b2:	4a34      	ldr	r2, [pc, #208]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	0019      	movs	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	4b2f      	ldr	r3, [pc, #188]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027be:	430a      	orrs	r2, r1
 80027c0:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027c2:	2317      	movs	r3, #23
 80027c4:	18fb      	adds	r3, r7, r3
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d105      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027cc:	4b2b      	ldr	r3, [pc, #172]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027ce:	69da      	ldr	r2, [r3, #28]
 80027d0:	4b2a      	ldr	r3, [pc, #168]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027d2:	492f      	ldr	r1, [pc, #188]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2201      	movs	r2, #1
 80027de:	4013      	ands	r3, r2
 80027e0:	d009      	beq.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	2203      	movs	r2, #3
 80027e8:	4393      	bics	r3, r2
 80027ea:	0019      	movs	r1, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	4b22      	ldr	r3, [pc, #136]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80027f2:	430a      	orrs	r2, r1
 80027f4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2202      	movs	r2, #2
 80027fc:	4013      	ands	r3, r2
 80027fe:	d009      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002800:	4b1e      	ldr	r3, [pc, #120]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002804:	4a23      	ldr	r2, [pc, #140]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002806:	4013      	ands	r3, r2
 8002808:	0019      	movs	r1, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	4b1b      	ldr	r3, [pc, #108]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002810:	430a      	orrs	r2, r1
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	02db      	lsls	r3, r3, #11
 800281c:	4013      	ands	r3, r2
 800281e:	d009      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002820:	4b16      	ldr	r3, [pc, #88]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002826:	4013      	ands	r3, r2
 8002828:	0019      	movs	r1, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691a      	ldr	r2, [r3, #16]
 800282e:	4b13      	ldr	r3, [pc, #76]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002830:	430a      	orrs	r2, r1
 8002832:	631a      	str	r2, [r3, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2220      	movs	r2, #32
 800283a:	4013      	ands	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800283e:	4b0f      	ldr	r3, [pc, #60]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002842:	2210      	movs	r2, #16
 8002844:	4393      	bics	r3, r2
 8002846:	0019      	movs	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800284e:	430a      	orrs	r2, r1
 8002850:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	4013      	ands	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800285e:	4b07      	ldr	r3, [pc, #28]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002862:	2240      	movs	r2, #64	; 0x40
 8002864:	4393      	bics	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699a      	ldr	r2, [r3, #24]
 800286c:	4b03      	ldr	r3, [pc, #12]	; (800287c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800286e:	430a      	orrs	r2, r1
 8002870:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b006      	add	sp, #24
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	40007000 	.word	0x40007000
 8002884:	fffffcff 	.word	0xfffffcff
 8002888:	fffeffff 	.word	0xfffeffff
 800288c:	00001388 	.word	0x00001388
 8002890:	efffffff 	.word	0xefffffff
 8002894:	fffcffff 	.word	0xfffcffff
 8002898:	fff3ffff 	.word	0xfff3ffff

0800289c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e042      	b.n	8002934 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	223d      	movs	r2, #61	; 0x3d
 80028b2:	5c9b      	ldrb	r3, [r3, r2]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d107      	bne.n	80028ca <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	223c      	movs	r2, #60	; 0x3c
 80028be:	2100      	movs	r1, #0
 80028c0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	0018      	movs	r0, r3
 80028c6:	f7fe fa55 	bl	8000d74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	223d      	movs	r2, #61	; 0x3d
 80028ce:	2102      	movs	r1, #2
 80028d0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	3304      	adds	r3, #4
 80028da:	0019      	movs	r1, r3
 80028dc:	0010      	movs	r0, r2
 80028de:	f000 ff21 	bl	8003724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2246      	movs	r2, #70	; 0x46
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	223e      	movs	r2, #62	; 0x3e
 80028ee:	2101      	movs	r1, #1
 80028f0:	5499      	strb	r1, [r3, r2]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	223f      	movs	r2, #63	; 0x3f
 80028f6:	2101      	movs	r1, #1
 80028f8:	5499      	strb	r1, [r3, r2]
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	2101      	movs	r1, #1
 8002900:	5499      	strb	r1, [r3, r2]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2241      	movs	r2, #65	; 0x41
 8002906:	2101      	movs	r1, #1
 8002908:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2242      	movs	r2, #66	; 0x42
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2243      	movs	r2, #67	; 0x43
 8002916:	2101      	movs	r1, #1
 8002918:	5499      	strb	r1, [r3, r2]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2244      	movs	r2, #68	; 0x44
 800291e:	2101      	movs	r1, #1
 8002920:	5499      	strb	r1, [r3, r2]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2245      	movs	r2, #69	; 0x45
 8002926:	2101      	movs	r1, #1
 8002928:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	223d      	movs	r2, #61	; 0x3d
 800292e:	2101      	movs	r1, #1
 8002930:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	b002      	add	sp, #8
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	223d      	movs	r2, #61	; 0x3d
 8002948:	5c9b      	ldrb	r3, [r3, r2]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d001      	beq.n	8002954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e03b      	b.n	80029cc <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	223d      	movs	r2, #61	; 0x3d
 8002958:	2102      	movs	r1, #2
 800295a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	2101      	movs	r1, #1
 8002968:	430a      	orrs	r2, r1
 800296a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <HAL_TIM_Base_Start_IT+0x98>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00f      	beq.n	8002996 <HAL_TIM_Base_Start_IT+0x5a>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	05db      	lsls	r3, r3, #23
 800297e:	429a      	cmp	r2, r3
 8002980:	d009      	beq.n	8002996 <HAL_TIM_Base_Start_IT+0x5a>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d004      	beq.n	8002996 <HAL_TIM_Base_Start_IT+0x5a>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_TIM_Base_Start_IT+0xa0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d111      	bne.n	80029ba <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	2207      	movs	r2, #7
 800299e:	4013      	ands	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b06      	cmp	r3, #6
 80029a6:	d010      	beq.n	80029ca <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2101      	movs	r1, #1
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b8:	e007      	b.n	80029ca <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2101      	movs	r1, #1
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b004      	add	sp, #16
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40014000 	.word	0x40014000

080029e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e042      	b.n	8002a78 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	223d      	movs	r2, #61	; 0x3d
 80029f6:	5c9b      	ldrb	r3, [r3, r2]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d107      	bne.n	8002a0e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	223c      	movs	r2, #60	; 0x3c
 8002a02:	2100      	movs	r1, #0
 8002a04:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 f839 	bl	8002a80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	223d      	movs	r2, #61	; 0x3d
 8002a12:	2102      	movs	r1, #2
 8002a14:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	0019      	movs	r1, r3
 8002a20:	0010      	movs	r0, r2
 8002a22:	f000 fe7f 	bl	8003724 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2246      	movs	r2, #70	; 0x46
 8002a2a:	2101      	movs	r1, #1
 8002a2c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	223e      	movs	r2, #62	; 0x3e
 8002a32:	2101      	movs	r1, #1
 8002a34:	5499      	strb	r1, [r3, r2]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	223f      	movs	r2, #63	; 0x3f
 8002a3a:	2101      	movs	r1, #1
 8002a3c:	5499      	strb	r1, [r3, r2]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2240      	movs	r2, #64	; 0x40
 8002a42:	2101      	movs	r1, #1
 8002a44:	5499      	strb	r1, [r3, r2]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2241      	movs	r2, #65	; 0x41
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2242      	movs	r2, #66	; 0x42
 8002a52:	2101      	movs	r1, #1
 8002a54:	5499      	strb	r1, [r3, r2]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2243      	movs	r2, #67	; 0x43
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2244      	movs	r2, #68	; 0x44
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2245      	movs	r2, #69	; 0x45
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	223d      	movs	r2, #61	; 0x3d
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a76:	2300      	movs	r3, #0
}
 8002a78:	0018      	movs	r0, r3
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	b002      	add	sp, #8
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a88:	46c0      	nop			; (mov r8, r8)
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
 8002a9c:	001a      	movs	r2, r3
 8002a9e:	1cbb      	adds	r3, r7, #2
 8002aa0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002aa2:	2317      	movs	r3, #23
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d108      	bne.n	8002ac2 <HAL_TIM_PWM_Start_DMA+0x32>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	223e      	movs	r2, #62	; 0x3e
 8002ab4:	5c9b      	ldrb	r3, [r3, r2]
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	3b02      	subs	r3, #2
 8002aba:	425a      	negs	r2, r3
 8002abc:	4153      	adcs	r3, r2
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	e01f      	b.n	8002b02 <HAL_TIM_PWM_Start_DMA+0x72>
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d108      	bne.n	8002ada <HAL_TIM_PWM_Start_DMA+0x4a>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	223f      	movs	r2, #63	; 0x3f
 8002acc:	5c9b      	ldrb	r3, [r3, r2]
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	3b02      	subs	r3, #2
 8002ad2:	425a      	negs	r2, r3
 8002ad4:	4153      	adcs	r3, r2
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e013      	b.n	8002b02 <HAL_TIM_PWM_Start_DMA+0x72>
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	d108      	bne.n	8002af2 <HAL_TIM_PWM_Start_DMA+0x62>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2240      	movs	r2, #64	; 0x40
 8002ae4:	5c9b      	ldrb	r3, [r3, r2]
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	3b02      	subs	r3, #2
 8002aea:	425a      	negs	r2, r3
 8002aec:	4153      	adcs	r3, r2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	e007      	b.n	8002b02 <HAL_TIM_PWM_Start_DMA+0x72>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2241      	movs	r2, #65	; 0x41
 8002af6:	5c9b      	ldrb	r3, [r3, r2]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	3b02      	subs	r3, #2
 8002afc:	425a      	negs	r2, r3
 8002afe:	4153      	adcs	r3, r2
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8002b06:	2302      	movs	r3, #2
 8002b08:	e164      	b.n	8002dd4 <HAL_TIM_PWM_Start_DMA+0x344>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d108      	bne.n	8002b22 <HAL_TIM_PWM_Start_DMA+0x92>
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	223e      	movs	r2, #62	; 0x3e
 8002b14:	5c9b      	ldrb	r3, [r3, r2]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	425a      	negs	r2, r3
 8002b1c:	4153      	adcs	r3, r2
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	e01f      	b.n	8002b62 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d108      	bne.n	8002b3a <HAL_TIM_PWM_Start_DMA+0xaa>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	223f      	movs	r2, #63	; 0x3f
 8002b2c:	5c9b      	ldrb	r3, [r3, r2]
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	425a      	negs	r2, r3
 8002b34:	4153      	adcs	r3, r2
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	e013      	b.n	8002b62 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	2b08      	cmp	r3, #8
 8002b3e:	d108      	bne.n	8002b52 <HAL_TIM_PWM_Start_DMA+0xc2>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2240      	movs	r2, #64	; 0x40
 8002b44:	5c9b      	ldrb	r3, [r3, r2]
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	425a      	negs	r2, r3
 8002b4c:	4153      	adcs	r3, r2
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	e007      	b.n	8002b62 <HAL_TIM_PWM_Start_DMA+0xd2>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2241      	movs	r2, #65	; 0x41
 8002b56:	5c9b      	ldrb	r3, [r3, r2]
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	425a      	negs	r2, r3
 8002b5e:	4153      	adcs	r3, r2
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d025      	beq.n	8002bb2 <HAL_TIM_PWM_Start_DMA+0x122>
  {
    if ((pData == NULL) && (Length > 0U))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d105      	bne.n	8002b78 <HAL_TIM_PWM_Start_DMA+0xe8>
 8002b6c:	1cbb      	adds	r3, r7, #2
 8002b6e:	881b      	ldrh	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <HAL_TIM_PWM_Start_DMA+0xe8>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e12d      	b.n	8002dd4 <HAL_TIM_PWM_Start_DMA+0x344>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d104      	bne.n	8002b88 <HAL_TIM_PWM_Start_DMA+0xf8>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	223e      	movs	r2, #62	; 0x3e
 8002b82:	2102      	movs	r1, #2
 8002b84:	5499      	strb	r1, [r3, r2]
 8002b86:	e016      	b.n	8002bb6 <HAL_TIM_PWM_Start_DMA+0x126>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b04      	cmp	r3, #4
 8002b8c:	d104      	bne.n	8002b98 <HAL_TIM_PWM_Start_DMA+0x108>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	223f      	movs	r2, #63	; 0x3f
 8002b92:	2102      	movs	r1, #2
 8002b94:	5499      	strb	r1, [r3, r2]
 8002b96:	e00e      	b.n	8002bb6 <HAL_TIM_PWM_Start_DMA+0x126>
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b08      	cmp	r3, #8
 8002b9c:	d104      	bne.n	8002ba8 <HAL_TIM_PWM_Start_DMA+0x118>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2240      	movs	r2, #64	; 0x40
 8002ba2:	2102      	movs	r1, #2
 8002ba4:	5499      	strb	r1, [r3, r2]
 8002ba6:	e006      	b.n	8002bb6 <HAL_TIM_PWM_Start_DMA+0x126>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2241      	movs	r2, #65	; 0x41
 8002bac:	2102      	movs	r1, #2
 8002bae:	5499      	strb	r1, [r3, r2]
 8002bb0:	e001      	b.n	8002bb6 <HAL_TIM_PWM_Start_DMA+0x126>
    }
  }
  else
  {
    return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e10e      	b.n	8002dd4 <HAL_TIM_PWM_Start_DMA+0x344>
  }

  switch (Channel)
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	2b0c      	cmp	r3, #12
 8002bba:	d100      	bne.n	8002bbe <HAL_TIM_PWM_Start_DMA+0x12e>
 8002bbc:	e080      	b.n	8002cc0 <HAL_TIM_PWM_Start_DMA+0x230>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	2b0c      	cmp	r3, #12
 8002bc2:	d900      	bls.n	8002bc6 <HAL_TIM_PWM_Start_DMA+0x136>
 8002bc4:	e0a1      	b.n	8002d0a <HAL_TIM_PWM_Start_DMA+0x27a>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b08      	cmp	r3, #8
 8002bca:	d054      	beq.n	8002c76 <HAL_TIM_PWM_Start_DMA+0x1e6>
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d900      	bls.n	8002bd4 <HAL_TIM_PWM_Start_DMA+0x144>
 8002bd2:	e09a      	b.n	8002d0a <HAL_TIM_PWM_Start_DMA+0x27a>
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_PWM_Start_DMA+0x152>
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b04      	cmp	r3, #4
 8002bde:	d025      	beq.n	8002c2c <HAL_TIM_PWM_Start_DMA+0x19c>
 8002be0:	e093      	b.n	8002d0a <HAL_TIM_PWM_Start_DMA+0x27a>
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	4a7d      	ldr	r2, [pc, #500]	; (8002ddc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002be8:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	4a7c      	ldr	r2, [pc, #496]	; (8002de0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8002bf0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	4a7b      	ldr	r2, [pc, #492]	; (8002de4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002bf8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002bfe:	6879      	ldr	r1, [r7, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	3334      	adds	r3, #52	; 0x34
 8002c06:	001a      	movs	r2, r3
 8002c08:	1cbb      	adds	r3, r7, #2
 8002c0a:	881b      	ldrh	r3, [r3, #0]
 8002c0c:	f7fe fcfc 	bl	8001608 <HAL_DMA_Start_IT>
 8002c10:	1e03      	subs	r3, r0, #0
 8002c12:	d001      	beq.n	8002c18 <HAL_TIM_PWM_Start_DMA+0x188>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e0dd      	b.n	8002dd4 <HAL_TIM_PWM_Start_DMA+0x344>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2180      	movs	r1, #128	; 0x80
 8002c24:	0089      	lsls	r1, r1, #2
 8002c26:	430a      	orrs	r2, r1
 8002c28:	60da      	str	r2, [r3, #12]
      break;
 8002c2a:	e073      	b.n	8002d14 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	4a6a      	ldr	r2, [pc, #424]	; (8002ddc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002c32:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	4a69      	ldr	r2, [pc, #420]	; (8002de0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8002c3a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c40:	4a68      	ldr	r2, [pc, #416]	; (8002de4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002c42:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3338      	adds	r3, #56	; 0x38
 8002c50:	001a      	movs	r2, r3
 8002c52:	1cbb      	adds	r3, r7, #2
 8002c54:	881b      	ldrh	r3, [r3, #0]
 8002c56:	f7fe fcd7 	bl	8001608 <HAL_DMA_Start_IT>
 8002c5a:	1e03      	subs	r3, r0, #0
 8002c5c:	d001      	beq.n	8002c62 <HAL_TIM_PWM_Start_DMA+0x1d2>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0b8      	b.n	8002dd4 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68da      	ldr	r2, [r3, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	00c9      	lsls	r1, r1, #3
 8002c70:	430a      	orrs	r2, r1
 8002c72:	60da      	str	r2, [r3, #12]
      break;
 8002c74:	e04e      	b.n	8002d14 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	4a58      	ldr	r2, [pc, #352]	; (8002ddc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c82:	4a57      	ldr	r2, [pc, #348]	; (8002de0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8002c84:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	4a56      	ldr	r2, [pc, #344]	; (8002de4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002c8c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	333c      	adds	r3, #60	; 0x3c
 8002c9a:	001a      	movs	r2, r3
 8002c9c:	1cbb      	adds	r3, r7, #2
 8002c9e:	881b      	ldrh	r3, [r3, #0]
 8002ca0:	f7fe fcb2 	bl	8001608 <HAL_DMA_Start_IT>
 8002ca4:	1e03      	subs	r3, r0, #0
 8002ca6:	d001      	beq.n	8002cac <HAL_TIM_PWM_Start_DMA+0x21c>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e093      	b.n	8002dd4 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2180      	movs	r1, #128	; 0x80
 8002cb8:	0109      	lsls	r1, r1, #4
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	60da      	str	r2, [r3, #12]
      break;
 8002cbe:	e029      	b.n	8002d14 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc4:	4a45      	ldr	r2, [pc, #276]	; (8002ddc <HAL_TIM_PWM_Start_DMA+0x34c>)
 8002cc6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	4a44      	ldr	r2, [pc, #272]	; (8002de0 <HAL_TIM_PWM_Start_DMA+0x350>)
 8002cce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd4:	4a43      	ldr	r2, [pc, #268]	; (8002de4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	3340      	adds	r3, #64	; 0x40
 8002ce4:	001a      	movs	r2, r3
 8002ce6:	1cbb      	adds	r3, r7, #2
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	f7fe fc8d 	bl	8001608 <HAL_DMA_Start_IT>
 8002cee:	1e03      	subs	r3, r0, #0
 8002cf0:	d001      	beq.n	8002cf6 <HAL_TIM_PWM_Start_DMA+0x266>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e06e      	b.n	8002dd4 <HAL_TIM_PWM_Start_DMA+0x344>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	0149      	lsls	r1, r1, #5
 8002d04:	430a      	orrs	r2, r1
 8002d06:	60da      	str	r2, [r3, #12]
      break;
 8002d08:	e004      	b.n	8002d14 <HAL_TIM_PWM_Start_DMA+0x284>
    }

    default:
      status = HAL_ERROR;
 8002d0a:	2317      	movs	r3, #23
 8002d0c:	18fb      	adds	r3, r7, r3
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
      break;
 8002d12:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002d14:	2317      	movs	r3, #23
 8002d16:	18fb      	adds	r3, r7, r3
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d157      	bne.n	8002dce <HAL_TIM_PWM_Start_DMA+0x33e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68b9      	ldr	r1, [r7, #8]
 8002d24:	2201      	movs	r2, #1
 8002d26:	0018      	movs	r0, r3
 8002d28:	f001 f812 	bl	8003d50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2d      	ldr	r2, [pc, #180]	; (8002de8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00e      	beq.n	8002d54 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2c      	ldr	r2, [pc, #176]	; (8002dec <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d009      	beq.n	8002d54 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <HAL_TIM_PWM_Start_DMA+0x360>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d004      	beq.n	8002d54 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a29      	ldr	r2, [pc, #164]	; (8002df4 <HAL_TIM_PWM_Start_DMA+0x364>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_TIM_PWM_Start_DMA+0x2c8>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <HAL_TIM_PWM_Start_DMA+0x2ca>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d008      	beq.n	8002d70 <HAL_TIM_PWM_Start_DMA+0x2e0>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2180      	movs	r1, #128	; 0x80
 8002d6a:	0209      	lsls	r1, r1, #8
 8002d6c:	430a      	orrs	r2, r1
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a1c      	ldr	r2, [pc, #112]	; (8002de8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d00f      	beq.n	8002d9a <HAL_TIM_PWM_Start_DMA+0x30a>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	05db      	lsls	r3, r3, #23
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d009      	beq.n	8002d9a <HAL_TIM_PWM_Start_DMA+0x30a>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a1b      	ldr	r2, [pc, #108]	; (8002df8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_TIM_PWM_Start_DMA+0x30a>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a15      	ldr	r2, [pc, #84]	; (8002dec <HAL_TIM_PWM_Start_DMA+0x35c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d111      	bne.n	8002dbe <HAL_TIM_PWM_Start_DMA+0x32e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	2207      	movs	r2, #7
 8002da2:	4013      	ands	r3, r2
 8002da4:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b06      	cmp	r3, #6
 8002daa:	d010      	beq.n	8002dce <HAL_TIM_PWM_Start_DMA+0x33e>
      {
        __HAL_TIM_ENABLE(htim);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2101      	movs	r1, #1
 8002db8:	430a      	orrs	r2, r1
 8002dba:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dbc:	e007      	b.n	8002dce <HAL_TIM_PWM_Start_DMA+0x33e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002dce:	2317      	movs	r3, #23
 8002dd0:	18fb      	adds	r3, r7, r3
 8002dd2:	781b      	ldrb	r3, [r3, #0]
}
 8002dd4:	0018      	movs	r0, r3
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	b006      	add	sp, #24
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	08003611 	.word	0x08003611
 8002de0:	080036bb 	.word	0x080036bb
 8002de4:	0800357d 	.word	0x0800357d
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40014400 	.word	0x40014400
 8002df4:	40014800 	.word	0x40014800
 8002df8:	40000400 	.word	0x40000400

08002dfc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e06:	230f      	movs	r3, #15
 8002e08:	18fb      	adds	r3, r7, r3
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	d039      	beq.n	8002e88 <HAL_TIM_PWM_Stop_DMA+0x8c>
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b0c      	cmp	r3, #12
 8002e18:	d844      	bhi.n	8002ea4 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d025      	beq.n	8002e6c <HAL_TIM_PWM_Stop_DMA+0x70>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d83e      	bhi.n	8002ea4 <HAL_TIM_PWM_Stop_DMA+0xa8>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d003      	beq.n	8002e34 <HAL_TIM_PWM_Stop_DMA+0x38>
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d00e      	beq.n	8002e50 <HAL_TIM_PWM_Stop_DMA+0x54>
 8002e32:	e037      	b.n	8002ea4 <HAL_TIM_PWM_Stop_DMA+0xa8>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4954      	ldr	r1, [pc, #336]	; (8002f90 <HAL_TIM_PWM_Stop_DMA+0x194>)
 8002e40:	400a      	ands	r2, r1
 8002e42:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f7fe fc43 	bl	80016d4 <HAL_DMA_Abort_IT>
      break;
 8002e4e:	e02e      	b.n	8002eae <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	494e      	ldr	r1, [pc, #312]	; (8002f94 <HAL_TIM_PWM_Stop_DMA+0x198>)
 8002e5c:	400a      	ands	r2, r1
 8002e5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	0018      	movs	r0, r3
 8002e66:	f7fe fc35 	bl	80016d4 <HAL_DMA_Abort_IT>
      break;
 8002e6a:	e020      	b.n	8002eae <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68da      	ldr	r2, [r3, #12]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4948      	ldr	r1, [pc, #288]	; (8002f98 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8002e78:	400a      	ands	r2, r1
 8002e7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7fe fc27 	bl	80016d4 <HAL_DMA_Abort_IT>
      break;
 8002e86:	e012      	b.n	8002eae <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4942      	ldr	r1, [pc, #264]	; (8002f9c <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8002e94:	400a      	ands	r2, r1
 8002e96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	f7fe fc19 	bl	80016d4 <HAL_DMA_Abort_IT>
      break;
 8002ea2:	e004      	b.n	8002eae <HAL_TIM_PWM_Stop_DMA+0xb2>
    }

    default:
      status = HAL_ERROR;
 8002ea4:	230f      	movs	r3, #15
 8002ea6:	18fb      	adds	r3, r7, r3
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
      break;
 8002eac:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002eae:	230f      	movs	r3, #15
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d000      	beq.n	8002eba <HAL_TIM_PWM_Stop_DMA+0xbe>
 8002eb8:	e063      	b.n	8002f82 <HAL_TIM_PWM_Stop_DMA+0x186>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	6839      	ldr	r1, [r7, #0]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	0018      	movs	r0, r3
 8002ec4:	f000 ff44 	bl	8003d50 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a34      	ldr	r2, [pc, #208]	; (8002fa0 <HAL_TIM_PWM_Stop_DMA+0x1a4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a33      	ldr	r2, [pc, #204]	; (8002fa4 <HAL_TIM_PWM_Stop_DMA+0x1a8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a31      	ldr	r2, [pc, #196]	; (8002fa8 <HAL_TIM_PWM_Stop_DMA+0x1ac>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a30      	ldr	r2, [pc, #192]	; (8002fac <HAL_TIM_PWM_Stop_DMA+0x1b0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d101      	bne.n	8002ef4 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e000      	b.n	8002ef6 <HAL_TIM_PWM_Stop_DMA+0xfa>
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d013      	beq.n	8002f22 <HAL_TIM_PWM_Stop_DMA+0x126>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	4a2b      	ldr	r2, [pc, #172]	; (8002fb0 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8002f02:	4013      	ands	r3, r2
 8002f04:	d10d      	bne.n	8002f22 <HAL_TIM_PWM_Stop_DMA+0x126>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a29      	ldr	r2, [pc, #164]	; (8002fb4 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d107      	bne.n	8002f22 <HAL_TIM_PWM_Stop_DMA+0x126>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4926      	ldr	r1, [pc, #152]	; (8002fb8 <HAL_TIM_PWM_Stop_DMA+0x1bc>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	6a1b      	ldr	r3, [r3, #32]
 8002f28:	4a21      	ldr	r2, [pc, #132]	; (8002fb0 <HAL_TIM_PWM_Stop_DMA+0x1b4>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	d10d      	bne.n	8002f4a <HAL_TIM_PWM_Stop_DMA+0x14e>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	4a1f      	ldr	r2, [pc, #124]	; (8002fb4 <HAL_TIM_PWM_Stop_DMA+0x1b8>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	d107      	bne.n	8002f4a <HAL_TIM_PWM_Stop_DMA+0x14e>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2101      	movs	r1, #1
 8002f46:	438a      	bics	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d104      	bne.n	8002f5a <HAL_TIM_PWM_Stop_DMA+0x15e>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	223e      	movs	r2, #62	; 0x3e
 8002f54:	2101      	movs	r1, #1
 8002f56:	5499      	strb	r1, [r3, r2]
 8002f58:	e013      	b.n	8002f82 <HAL_TIM_PWM_Stop_DMA+0x186>
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d104      	bne.n	8002f6a <HAL_TIM_PWM_Stop_DMA+0x16e>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	223f      	movs	r2, #63	; 0x3f
 8002f64:	2101      	movs	r1, #1
 8002f66:	5499      	strb	r1, [r3, r2]
 8002f68:	e00b      	b.n	8002f82 <HAL_TIM_PWM_Stop_DMA+0x186>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_PWM_Stop_DMA+0x17e>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2240      	movs	r2, #64	; 0x40
 8002f74:	2101      	movs	r1, #1
 8002f76:	5499      	strb	r1, [r3, r2]
 8002f78:	e003      	b.n	8002f82 <HAL_TIM_PWM_Stop_DMA+0x186>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2241      	movs	r2, #65	; 0x41
 8002f7e:	2101      	movs	r1, #1
 8002f80:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002f82:	230f      	movs	r3, #15
 8002f84:	18fb      	adds	r3, r7, r3
 8002f86:	781b      	ldrb	r3, [r3, #0]
}
 8002f88:	0018      	movs	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b004      	add	sp, #16
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	fffffdff 	.word	0xfffffdff
 8002f94:	fffffbff 	.word	0xfffffbff
 8002f98:	fffff7ff 	.word	0xfffff7ff
 8002f9c:	ffffefff 	.word	0xffffefff
 8002fa0:	40012c00 	.word	0x40012c00
 8002fa4:	40014000 	.word	0x40014000
 8002fa8:	40014400 	.word	0x40014400
 8002fac:	40014800 	.word	0x40014800
 8002fb0:	00001111 	.word	0x00001111
 8002fb4:	00000444 	.word	0x00000444
 8002fb8:	ffff7fff 	.word	0xffff7fff

08002fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691b      	ldr	r3, [r3, #16]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	4013      	ands	r3, r2
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d124      	bne.n	800301c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	2202      	movs	r2, #2
 8002fda:	4013      	ands	r3, r2
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d11d      	bne.n	800301c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2203      	movs	r2, #3
 8002fe6:	4252      	negs	r2, r2
 8002fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2203      	movs	r2, #3
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	d004      	beq.n	8003006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	0018      	movs	r0, r3
 8003000:	f000 fa94 	bl	800352c <HAL_TIM_IC_CaptureCallback>
 8003004:	e007      	b.n	8003016 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	0018      	movs	r0, r3
 800300a:	f000 fa87 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	0018      	movs	r0, r3
 8003012:	f000 fa93 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2204      	movs	r2, #4
 8003024:	4013      	ands	r3, r2
 8003026:	2b04      	cmp	r3, #4
 8003028:	d125      	bne.n	8003076 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	2204      	movs	r2, #4
 8003032:	4013      	ands	r3, r2
 8003034:	2b04      	cmp	r3, #4
 8003036:	d11e      	bne.n	8003076 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2205      	movs	r2, #5
 800303e:	4252      	negs	r2, r2
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2202      	movs	r2, #2
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	23c0      	movs	r3, #192	; 0xc0
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4013      	ands	r3, r2
 8003054:	d004      	beq.n	8003060 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	0018      	movs	r0, r3
 800305a:	f000 fa67 	bl	800352c <HAL_TIM_IC_CaptureCallback>
 800305e:	e007      	b.n	8003070 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	0018      	movs	r0, r3
 8003064:	f000 fa5a 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	0018      	movs	r0, r3
 800306c:	f000 fa66 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2208      	movs	r2, #8
 800307e:	4013      	ands	r3, r2
 8003080:	2b08      	cmp	r3, #8
 8003082:	d124      	bne.n	80030ce <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	68db      	ldr	r3, [r3, #12]
 800308a:	2208      	movs	r2, #8
 800308c:	4013      	ands	r3, r2
 800308e:	2b08      	cmp	r3, #8
 8003090:	d11d      	bne.n	80030ce <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2209      	movs	r2, #9
 8003098:	4252      	negs	r2, r2
 800309a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2204      	movs	r2, #4
 80030a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2203      	movs	r2, #3
 80030aa:	4013      	ands	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 fa3b 	bl	800352c <HAL_TIM_IC_CaptureCallback>
 80030b6:	e007      	b.n	80030c8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 fa2e 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	0018      	movs	r0, r3
 80030c4:	f000 fa3a 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	2210      	movs	r2, #16
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d125      	bne.n	8003128 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	2210      	movs	r2, #16
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b10      	cmp	r3, #16
 80030e8:	d11e      	bne.n	8003128 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2211      	movs	r2, #17
 80030f0:	4252      	negs	r2, r2
 80030f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2208      	movs	r2, #8
 80030f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69da      	ldr	r2, [r3, #28]
 8003100:	23c0      	movs	r3, #192	; 0xc0
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4013      	ands	r3, r2
 8003106:	d004      	beq.n	8003112 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	0018      	movs	r0, r3
 800310c:	f000 fa0e 	bl	800352c <HAL_TIM_IC_CaptureCallback>
 8003110:	e007      	b.n	8003122 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	0018      	movs	r0, r3
 8003116:	f000 fa01 	bl	800351c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	0018      	movs	r0, r3
 800311e:	f000 fa0d 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	2201      	movs	r2, #1
 8003130:	4013      	ands	r3, r2
 8003132:	2b01      	cmp	r3, #1
 8003134:	d10f      	bne.n	8003156 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	4013      	ands	r3, r2
 8003140:	2b01      	cmp	r3, #1
 8003142:	d108      	bne.n	8003156 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2202      	movs	r2, #2
 800314a:	4252      	negs	r2, r2
 800314c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	0018      	movs	r0, r3
 8003152:	f7fd f95b 	bl	800040c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	4013      	ands	r3, r2
 8003160:	2b80      	cmp	r3, #128	; 0x80
 8003162:	d10f      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	2280      	movs	r2, #128	; 0x80
 800316c:	4013      	ands	r3, r2
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d108      	bne.n	8003184 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2281      	movs	r2, #129	; 0x81
 8003178:	4252      	negs	r2, r2
 800317a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	0018      	movs	r0, r3
 8003180:	f000 fe70 	bl	8003e64 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	691b      	ldr	r3, [r3, #16]
 800318a:	2240      	movs	r2, #64	; 0x40
 800318c:	4013      	ands	r3, r2
 800318e:	2b40      	cmp	r3, #64	; 0x40
 8003190:	d10f      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	2240      	movs	r2, #64	; 0x40
 800319a:	4013      	ands	r3, r2
 800319c:	2b40      	cmp	r3, #64	; 0x40
 800319e:	d108      	bne.n	80031b2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2241      	movs	r2, #65	; 0x41
 80031a6:	4252      	negs	r2, r2
 80031a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	0018      	movs	r0, r3
 80031ae:	f000 f9d5 	bl	800355c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	2220      	movs	r2, #32
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d10f      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	2220      	movs	r2, #32
 80031c8:	4013      	ands	r3, r2
 80031ca:	2b20      	cmp	r3, #32
 80031cc:	d108      	bne.n	80031e0 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2221      	movs	r2, #33	; 0x21
 80031d4:	4252      	negs	r2, r2
 80031d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 fe3a 	bl	8003e54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e0:	46c0      	nop			; (mov r8, r8)
 80031e2:	46bd      	mov	sp, r7
 80031e4:	b002      	add	sp, #8
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f4:	2317      	movs	r3, #23
 80031f6:	18fb      	adds	r3, r7, r3
 80031f8:	2200      	movs	r2, #0
 80031fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	223c      	movs	r2, #60	; 0x3c
 8003200:	5c9b      	ldrb	r3, [r3, r2]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_TIM_PWM_ConfigChannel+0x22>
 8003206:	2302      	movs	r3, #2
 8003208:	e0ad      	b.n	8003366 <HAL_TIM_PWM_ConfigChannel+0x17e>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	223c      	movs	r2, #60	; 0x3c
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2b0c      	cmp	r3, #12
 8003216:	d100      	bne.n	800321a <HAL_TIM_PWM_ConfigChannel+0x32>
 8003218:	e076      	b.n	8003308 <HAL_TIM_PWM_ConfigChannel+0x120>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b0c      	cmp	r3, #12
 800321e:	d900      	bls.n	8003222 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8003220:	e095      	b.n	800334e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2b08      	cmp	r3, #8
 8003226:	d04e      	beq.n	80032c6 <HAL_TIM_PWM_ConfigChannel+0xde>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b08      	cmp	r3, #8
 800322c:	d900      	bls.n	8003230 <HAL_TIM_PWM_ConfigChannel+0x48>
 800322e:	e08e      	b.n	800334e <HAL_TIM_PWM_ConfigChannel+0x166>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_TIM_PWM_ConfigChannel+0x56>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b04      	cmp	r3, #4
 800323a:	d021      	beq.n	8003280 <HAL_TIM_PWM_ConfigChannel+0x98>
 800323c:	e087      	b.n	800334e <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68ba      	ldr	r2, [r7, #8]
 8003244:	0011      	movs	r1, r2
 8003246:	0018      	movs	r0, r3
 8003248:	f000 faec 	bl	8003824 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2108      	movs	r1, #8
 8003258:	430a      	orrs	r2, r1
 800325a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2104      	movs	r1, #4
 8003268:	438a      	bics	r2, r1
 800326a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6999      	ldr	r1, [r3, #24]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	430a      	orrs	r2, r1
 800327c:	619a      	str	r2, [r3, #24]
      break;
 800327e:	e06b      	b.n	8003358 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68ba      	ldr	r2, [r7, #8]
 8003286:	0011      	movs	r1, r2
 8003288:	0018      	movs	r0, r3
 800328a:	f000 fb53 	bl	8003934 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699a      	ldr	r2, [r3, #24]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2180      	movs	r1, #128	; 0x80
 800329a:	0109      	lsls	r1, r1, #4
 800329c:	430a      	orrs	r2, r1
 800329e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699a      	ldr	r2, [r3, #24]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4931      	ldr	r1, [pc, #196]	; (8003370 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80032ac:	400a      	ands	r2, r1
 80032ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6999      	ldr	r1, [r3, #24]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	021a      	lsls	r2, r3, #8
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	619a      	str	r2, [r3, #24]
      break;
 80032c4:	e048      	b.n	8003358 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68ba      	ldr	r2, [r7, #8]
 80032cc:	0011      	movs	r1, r2
 80032ce:	0018      	movs	r0, r3
 80032d0:	f000 fbb4 	bl	8003a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69da      	ldr	r2, [r3, #28]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2108      	movs	r1, #8
 80032e0:	430a      	orrs	r2, r1
 80032e2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	69da      	ldr	r2, [r3, #28]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2104      	movs	r1, #4
 80032f0:	438a      	bics	r2, r1
 80032f2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	69d9      	ldr	r1, [r3, #28]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	61da      	str	r2, [r3, #28]
      break;
 8003306:	e027      	b.n	8003358 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68ba      	ldr	r2, [r7, #8]
 800330e:	0011      	movs	r1, r2
 8003310:	0018      	movs	r0, r3
 8003312:	f000 fc19 	bl	8003b48 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2180      	movs	r1, #128	; 0x80
 8003322:	0109      	lsls	r1, r1, #4
 8003324:	430a      	orrs	r2, r1
 8003326:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	69da      	ldr	r2, [r3, #28]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	490f      	ldr	r1, [pc, #60]	; (8003370 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8003334:	400a      	ands	r2, r1
 8003336:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	69d9      	ldr	r1, [r3, #28]
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	691b      	ldr	r3, [r3, #16]
 8003342:	021a      	lsls	r2, r3, #8
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	430a      	orrs	r2, r1
 800334a:	61da      	str	r2, [r3, #28]
      break;
 800334c:	e004      	b.n	8003358 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800334e:	2317      	movs	r3, #23
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	2201      	movs	r2, #1
 8003354:	701a      	strb	r2, [r3, #0]
      break;
 8003356:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	223c      	movs	r2, #60	; 0x3c
 800335c:	2100      	movs	r1, #0
 800335e:	5499      	strb	r1, [r3, r2]

  return status;
 8003360:	2317      	movs	r3, #23
 8003362:	18fb      	adds	r3, r7, r3
 8003364:	781b      	ldrb	r3, [r3, #0]
}
 8003366:	0018      	movs	r0, r3
 8003368:	46bd      	mov	sp, r7
 800336a:	b006      	add	sp, #24
 800336c:	bd80      	pop	{r7, pc}
 800336e:	46c0      	nop			; (mov r8, r8)
 8003370:	fffffbff 	.word	0xfffffbff

08003374 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800337e:	230f      	movs	r3, #15
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	2200      	movs	r2, #0
 8003384:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	223c      	movs	r2, #60	; 0x3c
 800338a:	5c9b      	ldrb	r3, [r3, r2]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_TIM_ConfigClockSource+0x20>
 8003390:	2302      	movs	r3, #2
 8003392:	e0bc      	b.n	800350e <HAL_TIM_ConfigClockSource+0x19a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	223c      	movs	r2, #60	; 0x3c
 8003398:	2101      	movs	r1, #1
 800339a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	223d      	movs	r2, #61	; 0x3d
 80033a0:	2102      	movs	r1, #2
 80033a2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2277      	movs	r2, #119	; 0x77
 80033b0:	4393      	bics	r3, r2
 80033b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4a58      	ldr	r2, [pc, #352]	; (8003518 <HAL_TIM_ConfigClockSource+0x1a4>)
 80033b8:	4013      	ands	r3, r2
 80033ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68ba      	ldr	r2, [r7, #8]
 80033c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2280      	movs	r2, #128	; 0x80
 80033ca:	0192      	lsls	r2, r2, #6
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d040      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0xde>
 80033d0:	2280      	movs	r2, #128	; 0x80
 80033d2:	0192      	lsls	r2, r2, #6
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d900      	bls.n	80033da <HAL_TIM_ConfigClockSource+0x66>
 80033d8:	e088      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x178>
 80033da:	2280      	movs	r2, #128	; 0x80
 80033dc:	0152      	lsls	r2, r2, #5
 80033de:	4293      	cmp	r3, r2
 80033e0:	d100      	bne.n	80033e4 <HAL_TIM_ConfigClockSource+0x70>
 80033e2:	e088      	b.n	80034f6 <HAL_TIM_ConfigClockSource+0x182>
 80033e4:	2280      	movs	r2, #128	; 0x80
 80033e6:	0152      	lsls	r2, r2, #5
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d900      	bls.n	80033ee <HAL_TIM_ConfigClockSource+0x7a>
 80033ec:	e07e      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x178>
 80033ee:	2b70      	cmp	r3, #112	; 0x70
 80033f0:	d018      	beq.n	8003424 <HAL_TIM_ConfigClockSource+0xb0>
 80033f2:	d900      	bls.n	80033f6 <HAL_TIM_ConfigClockSource+0x82>
 80033f4:	e07a      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x178>
 80033f6:	2b60      	cmp	r3, #96	; 0x60
 80033f8:	d04f      	beq.n	800349a <HAL_TIM_ConfigClockSource+0x126>
 80033fa:	d900      	bls.n	80033fe <HAL_TIM_ConfigClockSource+0x8a>
 80033fc:	e076      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x178>
 80033fe:	2b50      	cmp	r3, #80	; 0x50
 8003400:	d03b      	beq.n	800347a <HAL_TIM_ConfigClockSource+0x106>
 8003402:	d900      	bls.n	8003406 <HAL_TIM_ConfigClockSource+0x92>
 8003404:	e072      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x178>
 8003406:	2b40      	cmp	r3, #64	; 0x40
 8003408:	d057      	beq.n	80034ba <HAL_TIM_ConfigClockSource+0x146>
 800340a:	d900      	bls.n	800340e <HAL_TIM_ConfigClockSource+0x9a>
 800340c:	e06e      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x178>
 800340e:	2b30      	cmp	r3, #48	; 0x30
 8003410:	d063      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x166>
 8003412:	d86b      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x178>
 8003414:	2b20      	cmp	r3, #32
 8003416:	d060      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x166>
 8003418:	d868      	bhi.n	80034ec <HAL_TIM_ConfigClockSource+0x178>
 800341a:	2b00      	cmp	r3, #0
 800341c:	d05d      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x166>
 800341e:	2b10      	cmp	r3, #16
 8003420:	d05b      	beq.n	80034da <HAL_TIM_ConfigClockSource+0x166>
 8003422:	e063      	b.n	80034ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6818      	ldr	r0, [r3, #0]
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	6899      	ldr	r1, [r3, #8]
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	f000 fc6c 	bl	8003d10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	2277      	movs	r2, #119	; 0x77
 8003444:	4313      	orrs	r3, r2
 8003446:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	609a      	str	r2, [r3, #8]
      break;
 8003450:	e052      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	6899      	ldr	r1, [r3, #8]
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	f000 fc55 	bl	8003d10 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2180      	movs	r1, #128	; 0x80
 8003472:	01c9      	lsls	r1, r1, #7
 8003474:	430a      	orrs	r2, r1
 8003476:	609a      	str	r2, [r3, #8]
      break;
 8003478:	e03e      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6818      	ldr	r0, [r3, #0]
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	6859      	ldr	r1, [r3, #4]
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	001a      	movs	r2, r3
 8003488:	f000 fbc8 	bl	8003c1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2150      	movs	r1, #80	; 0x50
 8003492:	0018      	movs	r0, r3
 8003494:	f000 fc22 	bl	8003cdc <TIM_ITRx_SetConfig>
      break;
 8003498:	e02e      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6818      	ldr	r0, [r3, #0]
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	6859      	ldr	r1, [r3, #4]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	001a      	movs	r2, r3
 80034a8:	f000 fbe6 	bl	8003c78 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2160      	movs	r1, #96	; 0x60
 80034b2:	0018      	movs	r0, r3
 80034b4:	f000 fc12 	bl	8003cdc <TIM_ITRx_SetConfig>
      break;
 80034b8:	e01e      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6818      	ldr	r0, [r3, #0]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	6859      	ldr	r1, [r3, #4]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	001a      	movs	r2, r3
 80034c8:	f000 fba8 	bl	8003c1c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2140      	movs	r1, #64	; 0x40
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 fc02 	bl	8003cdc <TIM_ITRx_SetConfig>
      break;
 80034d8:	e00e      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	0019      	movs	r1, r3
 80034e4:	0010      	movs	r0, r2
 80034e6:	f000 fbf9 	bl	8003cdc <TIM_ITRx_SetConfig>
      break;
 80034ea:	e005      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80034ec:	230f      	movs	r3, #15
 80034ee:	18fb      	adds	r3, r7, r3
 80034f0:	2201      	movs	r2, #1
 80034f2:	701a      	strb	r2, [r3, #0]
      break;
 80034f4:	e000      	b.n	80034f8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80034f6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	223d      	movs	r2, #61	; 0x3d
 80034fc:	2101      	movs	r1, #1
 80034fe:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	223c      	movs	r2, #60	; 0x3c
 8003504:	2100      	movs	r1, #0
 8003506:	5499      	strb	r1, [r3, r2]

  return status;
 8003508:	230f      	movs	r3, #15
 800350a:	18fb      	adds	r3, r7, r3
 800350c:	781b      	ldrb	r3, [r3, #0]
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b004      	add	sp, #16
 8003514:	bd80      	pop	{r7, pc}
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	ffff00ff 	.word	0xffff00ff

0800351c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003524:	46c0      	nop			; (mov r8, r8)
 8003526:	46bd      	mov	sp, r7
 8003528:	b002      	add	sp, #8
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003534:	46c0      	nop			; (mov r8, r8)
 8003536:	46bd      	mov	sp, r7
 8003538:	b002      	add	sp, #8
 800353a:	bd80      	pop	{r7, pc}

0800353c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003544:	46c0      	nop			; (mov r8, r8)
 8003546:	46bd      	mov	sp, r7
 8003548:	b002      	add	sp, #8
 800354a:	bd80      	pop	{r7, pc}

0800354c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003554:	46c0      	nop			; (mov r8, r8)
 8003556:	46bd      	mov	sp, r7
 8003558:	b002      	add	sp, #8
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	46bd      	mov	sp, r7
 8003568:	b002      	add	sp, #8
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003574:	46c0      	nop			; (mov r8, r8)
 8003576:	46bd      	mov	sp, r7
 8003578:	b002      	add	sp, #8
 800357a:	bd80      	pop	{r7, pc}

0800357c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d107      	bne.n	80035a4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2201      	movs	r2, #1
 8003598:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	223e      	movs	r2, #62	; 0x3e
 800359e:	2101      	movs	r1, #1
 80035a0:	5499      	strb	r1, [r3, r2]
 80035a2:	e02a      	b.n	80035fa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d107      	bne.n	80035be <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2202      	movs	r2, #2
 80035b2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	223f      	movs	r2, #63	; 0x3f
 80035b8:	2101      	movs	r1, #1
 80035ba:	5499      	strb	r1, [r3, r2]
 80035bc:	e01d      	b.n	80035fa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d107      	bne.n	80035d8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2204      	movs	r2, #4
 80035cc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2240      	movs	r2, #64	; 0x40
 80035d2:	2101      	movs	r1, #1
 80035d4:	5499      	strb	r1, [r3, r2]
 80035d6:	e010      	b.n	80035fa <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d107      	bne.n	80035f2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2208      	movs	r2, #8
 80035e6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2241      	movs	r2, #65	; 0x41
 80035ec:	2101      	movs	r1, #1
 80035ee:	5499      	strb	r1, [r3, r2]
 80035f0:	e003      	b.n	80035fa <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	223d      	movs	r2, #61	; 0x3d
 80035f6:	2101      	movs	r1, #1
 80035f8:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f7ff ffb5 	bl	800356c <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2200      	movs	r2, #0
 8003606:	771a      	strb	r2, [r3, #28]
}
 8003608:	46c0      	nop			; (mov r8, r8)
 800360a:	46bd      	mov	sp, r7
 800360c:	b004      	add	sp, #16
 800360e:	bd80      	pop	{r7, pc}

08003610 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	429a      	cmp	r2, r3
 8003626:	d10b      	bne.n	8003640 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d136      	bne.n	80036a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	223e      	movs	r2, #62	; 0x3e
 800363a:	2101      	movs	r1, #1
 800363c:	5499      	strb	r1, [r3, r2]
 800363e:	e031      	b.n	80036a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	429a      	cmp	r2, r3
 8003648:	d10b      	bne.n	8003662 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2202      	movs	r2, #2
 800364e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d125      	bne.n	80036a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	223f      	movs	r2, #63	; 0x3f
 800365c:	2101      	movs	r1, #1
 800365e:	5499      	strb	r1, [r3, r2]
 8003660:	e020      	b.n	80036a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	429a      	cmp	r2, r3
 800366a:	d10b      	bne.n	8003684 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2204      	movs	r2, #4
 8003670:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d114      	bne.n	80036a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2240      	movs	r2, #64	; 0x40
 800367e:	2101      	movs	r1, #1
 8003680:	5499      	strb	r1, [r3, r2]
 8003682:	e00f      	b.n	80036a4 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003688:	687a      	ldr	r2, [r7, #4]
 800368a:	429a      	cmp	r2, r3
 800368c:	d10a      	bne.n	80036a4 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2208      	movs	r2, #8
 8003692:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	699b      	ldr	r3, [r3, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d103      	bne.n	80036a4 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2241      	movs	r2, #65	; 0x41
 80036a0:	2101      	movs	r1, #1
 80036a2:	5499      	strb	r1, [r3, r2]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	0018      	movs	r0, r3
 80036a8:	f7ff ff48 	bl	800353c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	771a      	strb	r2, [r3, #28]
}
 80036b2:	46c0      	nop			; (mov r8, r8)
 80036b4:	46bd      	mov	sp, r7
 80036b6:	b004      	add	sp, #16
 80036b8:	bd80      	pop	{r7, pc}

080036ba <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b084      	sub	sp, #16
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d103      	bne.n	80036da <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	771a      	strb	r2, [r3, #28]
 80036d8:	e019      	b.n	800370e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d103      	bne.n	80036ec <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2202      	movs	r2, #2
 80036e8:	771a      	strb	r2, [r3, #28]
 80036ea:	e010      	b.n	800370e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d103      	bne.n	80036fe <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	2204      	movs	r2, #4
 80036fa:	771a      	strb	r2, [r3, #28]
 80036fc:	e007      	b.n	800370e <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	d102      	bne.n	800370e <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2208      	movs	r2, #8
 800370c:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	0018      	movs	r0, r3
 8003712:	f7ff ff1b 	bl	800354c <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b004      	add	sp, #16
 8003722:	bd80      	pop	{r7, pc}

08003724 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a34      	ldr	r2, [pc, #208]	; (8003808 <TIM_Base_SetConfig+0xe4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d008      	beq.n	800374e <TIM_Base_SetConfig+0x2a>
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	2380      	movs	r3, #128	; 0x80
 8003740:	05db      	lsls	r3, r3, #23
 8003742:	429a      	cmp	r2, r3
 8003744:	d003      	beq.n	800374e <TIM_Base_SetConfig+0x2a>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4a30      	ldr	r2, [pc, #192]	; (800380c <TIM_Base_SetConfig+0xe8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d108      	bne.n	8003760 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2270      	movs	r2, #112	; 0x70
 8003752:	4393      	bics	r3, r2
 8003754:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	4313      	orrs	r3, r2
 800375e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a29      	ldr	r2, [pc, #164]	; (8003808 <TIM_Base_SetConfig+0xe4>)
 8003764:	4293      	cmp	r3, r2
 8003766:	d018      	beq.n	800379a <TIM_Base_SetConfig+0x76>
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	05db      	lsls	r3, r3, #23
 800376e:	429a      	cmp	r2, r3
 8003770:	d013      	beq.n	800379a <TIM_Base_SetConfig+0x76>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a25      	ldr	r2, [pc, #148]	; (800380c <TIM_Base_SetConfig+0xe8>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d00f      	beq.n	800379a <TIM_Base_SetConfig+0x76>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a24      	ldr	r2, [pc, #144]	; (8003810 <TIM_Base_SetConfig+0xec>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00b      	beq.n	800379a <TIM_Base_SetConfig+0x76>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a23      	ldr	r2, [pc, #140]	; (8003814 <TIM_Base_SetConfig+0xf0>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <TIM_Base_SetConfig+0x76>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a22      	ldr	r2, [pc, #136]	; (8003818 <TIM_Base_SetConfig+0xf4>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d003      	beq.n	800379a <TIM_Base_SetConfig+0x76>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a21      	ldr	r2, [pc, #132]	; (800381c <TIM_Base_SetConfig+0xf8>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d108      	bne.n	80037ac <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	4a20      	ldr	r2, [pc, #128]	; (8003820 <TIM_Base_SetConfig+0xfc>)
 800379e:	4013      	ands	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	4393      	bics	r3, r2
 80037b2:	001a      	movs	r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a0c      	ldr	r2, [pc, #48]	; (8003808 <TIM_Base_SetConfig+0xe4>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00b      	beq.n	80037f2 <TIM_Base_SetConfig+0xce>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <TIM_Base_SetConfig+0xf0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <TIM_Base_SetConfig+0xce>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a0c      	ldr	r2, [pc, #48]	; (8003818 <TIM_Base_SetConfig+0xf4>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d003      	beq.n	80037f2 <TIM_Base_SetConfig+0xce>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a0b      	ldr	r2, [pc, #44]	; (800381c <TIM_Base_SetConfig+0xf8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d103      	bne.n	80037fa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	691a      	ldr	r2, [r3, #16]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2201      	movs	r2, #1
 80037fe:	615a      	str	r2, [r3, #20]
}
 8003800:	46c0      	nop			; (mov r8, r8)
 8003802:	46bd      	mov	sp, r7
 8003804:	b004      	add	sp, #16
 8003806:	bd80      	pop	{r7, pc}
 8003808:	40012c00 	.word	0x40012c00
 800380c:	40000400 	.word	0x40000400
 8003810:	40002000 	.word	0x40002000
 8003814:	40014000 	.word	0x40014000
 8003818:	40014400 	.word	0x40014400
 800381c:	40014800 	.word	0x40014800
 8003820:	fffffcff 	.word	0xfffffcff

08003824 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b086      	sub	sp, #24
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
 8003832:	2201      	movs	r2, #1
 8003834:	4393      	bics	r3, r2
 8003836:	001a      	movs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a1b      	ldr	r3, [r3, #32]
 8003840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2270      	movs	r2, #112	; 0x70
 8003852:	4393      	bics	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2203      	movs	r2, #3
 800385a:	4393      	bics	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68fa      	ldr	r2, [r7, #12]
 8003864:	4313      	orrs	r3, r2
 8003866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2202      	movs	r2, #2
 800386c:	4393      	bics	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	4313      	orrs	r3, r2
 8003878:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a27      	ldr	r2, [pc, #156]	; (800391c <TIM_OC1_SetConfig+0xf8>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d00b      	beq.n	800389a <TIM_OC1_SetConfig+0x76>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a26      	ldr	r2, [pc, #152]	; (8003920 <TIM_OC1_SetConfig+0xfc>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d007      	beq.n	800389a <TIM_OC1_SetConfig+0x76>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a25      	ldr	r2, [pc, #148]	; (8003924 <TIM_OC1_SetConfig+0x100>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d003      	beq.n	800389a <TIM_OC1_SetConfig+0x76>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a24      	ldr	r2, [pc, #144]	; (8003928 <TIM_OC1_SetConfig+0x104>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d10c      	bne.n	80038b4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2208      	movs	r2, #8
 800389e:	4393      	bics	r3, r2
 80038a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2204      	movs	r2, #4
 80038b0:	4393      	bics	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a19      	ldr	r2, [pc, #100]	; (800391c <TIM_OC1_SetConfig+0xf8>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d00b      	beq.n	80038d4 <TIM_OC1_SetConfig+0xb0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a18      	ldr	r2, [pc, #96]	; (8003920 <TIM_OC1_SetConfig+0xfc>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d007      	beq.n	80038d4 <TIM_OC1_SetConfig+0xb0>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a17      	ldr	r2, [pc, #92]	; (8003924 <TIM_OC1_SetConfig+0x100>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d003      	beq.n	80038d4 <TIM_OC1_SetConfig+0xb0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a16      	ldr	r2, [pc, #88]	; (8003928 <TIM_OC1_SetConfig+0x104>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d111      	bne.n	80038f8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	4a15      	ldr	r2, [pc, #84]	; (800392c <TIM_OC1_SetConfig+0x108>)
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4a14      	ldr	r2, [pc, #80]	; (8003930 <TIM_OC1_SetConfig+0x10c>)
 80038e0:	4013      	ands	r3, r2
 80038e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	695b      	ldr	r3, [r3, #20]
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	4313      	orrs	r3, r2
 80038f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68fa      	ldr	r2, [r7, #12]
 8003902:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685a      	ldr	r2, [r3, #4]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	697a      	ldr	r2, [r7, #20]
 8003910:	621a      	str	r2, [r3, #32]
}
 8003912:	46c0      	nop			; (mov r8, r8)
 8003914:	46bd      	mov	sp, r7
 8003916:	b006      	add	sp, #24
 8003918:	bd80      	pop	{r7, pc}
 800391a:	46c0      	nop			; (mov r8, r8)
 800391c:	40012c00 	.word	0x40012c00
 8003920:	40014000 	.word	0x40014000
 8003924:	40014400 	.word	0x40014400
 8003928:	40014800 	.word	0x40014800
 800392c:	fffffeff 	.word	0xfffffeff
 8003930:	fffffdff 	.word	0xfffffdff

08003934 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
 800393c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	2210      	movs	r2, #16
 8003944:	4393      	bics	r3, r2
 8003946:	001a      	movs	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	699b      	ldr	r3, [r3, #24]
 800395c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	4a2e      	ldr	r2, [pc, #184]	; (8003a1c <TIM_OC2_SetConfig+0xe8>)
 8003962:	4013      	ands	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	4a2d      	ldr	r2, [pc, #180]	; (8003a20 <TIM_OC2_SetConfig+0xec>)
 800396a:	4013      	ands	r3, r2
 800396c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2220      	movs	r2, #32
 800397e:	4393      	bics	r3, r2
 8003980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	697a      	ldr	r2, [r7, #20]
 800398a:	4313      	orrs	r3, r2
 800398c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a24      	ldr	r2, [pc, #144]	; (8003a24 <TIM_OC2_SetConfig+0xf0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d10d      	bne.n	80039b2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2280      	movs	r2, #128	; 0x80
 800399a:	4393      	bics	r3, r2
 800399c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	011b      	lsls	r3, r3, #4
 80039a4:	697a      	ldr	r2, [r7, #20]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	2240      	movs	r2, #64	; 0x40
 80039ae:	4393      	bics	r3, r2
 80039b0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a1b      	ldr	r2, [pc, #108]	; (8003a24 <TIM_OC2_SetConfig+0xf0>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <TIM_OC2_SetConfig+0x9e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a1a      	ldr	r2, [pc, #104]	; (8003a28 <TIM_OC2_SetConfig+0xf4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <TIM_OC2_SetConfig+0x9e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a19      	ldr	r2, [pc, #100]	; (8003a2c <TIM_OC2_SetConfig+0xf8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_OC2_SetConfig+0x9e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a18      	ldr	r2, [pc, #96]	; (8003a30 <TIM_OC2_SetConfig+0xfc>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d113      	bne.n	80039fa <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4a17      	ldr	r2, [pc, #92]	; (8003a34 <TIM_OC2_SetConfig+0x100>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4a16      	ldr	r2, [pc, #88]	; (8003a38 <TIM_OC2_SetConfig+0x104>)
 80039de:	4013      	ands	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	699b      	ldr	r3, [r3, #24]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	685a      	ldr	r2, [r3, #4]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	621a      	str	r2, [r3, #32]
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b006      	add	sp, #24
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	ffff8fff 	.word	0xffff8fff
 8003a20:	fffffcff 	.word	0xfffffcff
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40014000 	.word	0x40014000
 8003a2c:	40014400 	.word	0x40014400
 8003a30:	40014800 	.word	0x40014800
 8003a34:	fffffbff 	.word	0xfffffbff
 8003a38:	fffff7ff 	.word	0xfffff7ff

08003a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	4a35      	ldr	r2, [pc, #212]	; (8003b20 <TIM_OC3_SetConfig+0xe4>)
 8003a4c:	401a      	ands	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69db      	ldr	r3, [r3, #28]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2270      	movs	r2, #112	; 0x70
 8003a68:	4393      	bics	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2203      	movs	r2, #3
 8003a70:	4393      	bics	r3, r2
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	4a28      	ldr	r2, [pc, #160]	; (8003b24 <TIM_OC3_SetConfig+0xe8>)
 8003a82:	4013      	ands	r3, r2
 8003a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	021b      	lsls	r3, r3, #8
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	4a24      	ldr	r2, [pc, #144]	; (8003b28 <TIM_OC3_SetConfig+0xec>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d10d      	bne.n	8003ab6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	4a23      	ldr	r2, [pc, #140]	; (8003b2c <TIM_OC3_SetConfig+0xf0>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	68db      	ldr	r3, [r3, #12]
 8003aa6:	021b      	lsls	r3, r3, #8
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <TIM_OC3_SetConfig+0xf4>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a1b      	ldr	r2, [pc, #108]	; (8003b28 <TIM_OC3_SetConfig+0xec>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00b      	beq.n	8003ad6 <TIM_OC3_SetConfig+0x9a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1c      	ldr	r2, [pc, #112]	; (8003b34 <TIM_OC3_SetConfig+0xf8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d007      	beq.n	8003ad6 <TIM_OC3_SetConfig+0x9a>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	; (8003b38 <TIM_OC3_SetConfig+0xfc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d003      	beq.n	8003ad6 <TIM_OC3_SetConfig+0x9a>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1a      	ldr	r2, [pc, #104]	; (8003b3c <TIM_OC3_SetConfig+0x100>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d113      	bne.n	8003afe <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <TIM_OC3_SetConfig+0x104>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4a18      	ldr	r2, [pc, #96]	; (8003b44 <TIM_OC3_SetConfig+0x108>)
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	011b      	lsls	r3, r3, #4
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	693a      	ldr	r2, [r7, #16]
 8003b02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	621a      	str	r2, [r3, #32]
}
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	b006      	add	sp, #24
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	fffffeff 	.word	0xfffffeff
 8003b24:	fffffdff 	.word	0xfffffdff
 8003b28:	40012c00 	.word	0x40012c00
 8003b2c:	fffff7ff 	.word	0xfffff7ff
 8003b30:	fffffbff 	.word	0xfffffbff
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40014400 	.word	0x40014400
 8003b3c:	40014800 	.word	0x40014800
 8003b40:	ffffefff 	.word	0xffffefff
 8003b44:	ffffdfff 	.word	0xffffdfff

08003b48 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	4a28      	ldr	r2, [pc, #160]	; (8003bf8 <TIM_OC4_SetConfig+0xb0>)
 8003b58:	401a      	ands	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69db      	ldr	r3, [r3, #28]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <TIM_OC4_SetConfig+0xb4>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <TIM_OC4_SetConfig+0xb8>)
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <TIM_OC4_SetConfig+0xbc>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	031b      	lsls	r3, r3, #12
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a19      	ldr	r2, [pc, #100]	; (8003c08 <TIM_OC4_SetConfig+0xc0>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d00b      	beq.n	8003bc0 <TIM_OC4_SetConfig+0x78>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a18      	ldr	r2, [pc, #96]	; (8003c0c <TIM_OC4_SetConfig+0xc4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d007      	beq.n	8003bc0 <TIM_OC4_SetConfig+0x78>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a17      	ldr	r2, [pc, #92]	; (8003c10 <TIM_OC4_SetConfig+0xc8>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d003      	beq.n	8003bc0 <TIM_OC4_SetConfig+0x78>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a16      	ldr	r2, [pc, #88]	; (8003c14 <TIM_OC4_SetConfig+0xcc>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d109      	bne.n	8003bd4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	4a15      	ldr	r2, [pc, #84]	; (8003c18 <TIM_OC4_SetConfig+0xd0>)
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	019b      	lsls	r3, r3, #6
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685a      	ldr	r2, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b006      	add	sp, #24
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	ffffefff 	.word	0xffffefff
 8003bfc:	ffff8fff 	.word	0xffff8fff
 8003c00:	fffffcff 	.word	0xfffffcff
 8003c04:	ffffdfff 	.word	0xffffdfff
 8003c08:	40012c00 	.word	0x40012c00
 8003c0c:	40014000 	.word	0x40014000
 8003c10:	40014400 	.word	0x40014400
 8003c14:	40014800 	.word	0x40014800
 8003c18:	ffffbfff 	.word	0xffffbfff

08003c1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a1b      	ldr	r3, [r3, #32]
 8003c32:	2201      	movs	r2, #1
 8003c34:	4393      	bics	r3, r2
 8003c36:	001a      	movs	r2, r3
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	22f0      	movs	r2, #240	; 0xf0
 8003c46:	4393      	bics	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	220a      	movs	r2, #10
 8003c58:	4393      	bics	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	621a      	str	r2, [r3, #32]
}
 8003c70:	46c0      	nop			; (mov r8, r8)
 8003c72:	46bd      	mov	sp, r7
 8003c74:	b006      	add	sp, #24
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a1b      	ldr	r3, [r3, #32]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	4393      	bics	r3, r2
 8003c8c:	001a      	movs	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	4a0d      	ldr	r2, [pc, #52]	; (8003cd8 <TIM_TI2_ConfigInputStage+0x60>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	031b      	lsls	r3, r3, #12
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	22a0      	movs	r2, #160	; 0xa0
 8003cb4:	4393      	bics	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	011b      	lsls	r3, r3, #4
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	621a      	str	r2, [r3, #32]
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b006      	add	sp, #24
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	46c0      	nop			; (mov r8, r8)
 8003cd8:	ffff0fff 	.word	0xffff0fff

08003cdc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2270      	movs	r2, #112	; 0x70
 8003cf0:	4393      	bics	r3, r2
 8003cf2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	2207      	movs	r2, #7
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	68fa      	ldr	r2, [r7, #12]
 8003d04:	609a      	str	r2, [r3, #8]
}
 8003d06:	46c0      	nop			; (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b004      	add	sp, #16
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
 8003d1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	4a09      	ldr	r2, [pc, #36]	; (8003d4c <TIM_ETR_SetConfig+0x3c>)
 8003d28:	4013      	ands	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	021a      	lsls	r2, r3, #8
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	431a      	orrs	r2, r3
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	609a      	str	r2, [r3, #8]
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	46bd      	mov	sp, r7
 8003d48:	b006      	add	sp, #24
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	ffff00ff 	.word	0xffff00ff

08003d50 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	221f      	movs	r2, #31
 8003d60:	4013      	ands	r3, r2
 8003d62:	2201      	movs	r2, #1
 8003d64:	409a      	lsls	r2, r3
 8003d66:	0013      	movs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	43d2      	mvns	r2, r2
 8003d72:	401a      	ands	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6a1a      	ldr	r2, [r3, #32]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	211f      	movs	r1, #31
 8003d80:	400b      	ands	r3, r1
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4099      	lsls	r1, r3
 8003d86:	000b      	movs	r3, r1
 8003d88:	431a      	orrs	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b006      	add	sp, #24
 8003d94:	bd80      	pop	{r7, pc}
	...

08003d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	223c      	movs	r2, #60	; 0x3c
 8003da6:	5c9b      	ldrb	r3, [r3, r2]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d101      	bne.n	8003db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dac:	2302      	movs	r3, #2
 8003dae:	e047      	b.n	8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	223c      	movs	r2, #60	; 0x3c
 8003db4:	2101      	movs	r1, #1
 8003db6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	223d      	movs	r2, #61	; 0x3d
 8003dbc:	2102      	movs	r1, #2
 8003dbe:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2270      	movs	r2, #112	; 0x70
 8003dd4:	4393      	bics	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d00f      	beq.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	2380      	movs	r3, #128	; 0x80
 8003dfa:	05db      	lsls	r3, r3, #23
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d009      	beq.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a11      	ldr	r2, [pc, #68]	; (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d004      	beq.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a10      	ldr	r2, [pc, #64]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d10c      	bne.n	8003e2e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2280      	movs	r2, #128	; 0x80
 8003e18:	4393      	bics	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	223d      	movs	r2, #61	; 0x3d
 8003e32:	2101      	movs	r1, #1
 8003e34:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	223c      	movs	r2, #60	; 0x3c
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b004      	add	sp, #16
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	40012c00 	.word	0x40012c00
 8003e4c:	40000400 	.word	0x40000400
 8003e50:	40014000 	.word	0x40014000

08003e54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e5c:	46c0      	nop			; (mov r8, r8)
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	b002      	add	sp, #8
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b002      	add	sp, #8
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e044      	b.n	8003f10 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d107      	bne.n	8003e9e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2274      	movs	r2, #116	; 0x74
 8003e92:	2100      	movs	r1, #0
 8003e94:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	0018      	movs	r0, r3
 8003e9a:	f7fd f871 	bl	8000f80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2224      	movs	r2, #36	; 0x24
 8003ea2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681a      	ldr	r2, [r3, #0]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2101      	movs	r1, #1
 8003eb0:	438a      	bics	r2, r1
 8003eb2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f000 f8da 	bl	8004070 <UART_SetConfig>
 8003ebc:	0003      	movs	r3, r0
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e024      	b.n	8003f10 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 fab5 	bl	8004440 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	490d      	ldr	r1, [pc, #52]	; (8003f18 <HAL_UART_Init+0xa4>)
 8003ee2:	400a      	ands	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	689a      	ldr	r2, [r3, #8]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	212a      	movs	r1, #42	; 0x2a
 8003ef2:	438a      	bics	r2, r1
 8003ef4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2101      	movs	r1, #1
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	0018      	movs	r0, r3
 8003f0a:	f000 fb4d 	bl	80045a8 <UART_CheckIdleState>
 8003f0e:	0003      	movs	r3, r0
}
 8003f10:	0018      	movs	r0, r3
 8003f12:	46bd      	mov	sp, r7
 8003f14:	b002      	add	sp, #8
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	ffffb7ff 	.word	0xffffb7ff

08003f1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08a      	sub	sp, #40	; 0x28
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	603b      	str	r3, [r7, #0]
 8003f28:	1dbb      	adds	r3, r7, #6
 8003f2a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d000      	beq.n	8003f36 <HAL_UART_Transmit+0x1a>
 8003f34:	e096      	b.n	8004064 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_UART_Transmit+0x28>
 8003f3c:	1dbb      	adds	r3, r7, #6
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e08e      	b.n	8004066 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	2380      	movs	r3, #128	; 0x80
 8003f4e:	015b      	lsls	r3, r3, #5
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d109      	bne.n	8003f68 <HAL_UART_Transmit+0x4c>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	691b      	ldr	r3, [r3, #16]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d105      	bne.n	8003f68 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	4013      	ands	r3, r2
 8003f62:	d001      	beq.n	8003f68 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e07e      	b.n	8004066 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2274      	movs	r2, #116	; 0x74
 8003f6c:	5c9b      	ldrb	r3, [r3, r2]
 8003f6e:	2b01      	cmp	r3, #1
 8003f70:	d101      	bne.n	8003f76 <HAL_UART_Transmit+0x5a>
 8003f72:	2302      	movs	r3, #2
 8003f74:	e077      	b.n	8004066 <HAL_UART_Transmit+0x14a>
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2274      	movs	r2, #116	; 0x74
 8003f7a:	2101      	movs	r1, #1
 8003f7c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2280      	movs	r2, #128	; 0x80
 8003f82:	2100      	movs	r1, #0
 8003f84:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2221      	movs	r2, #33	; 0x21
 8003f8a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f8c:	f7fd fa0c 	bl	80013a8 <HAL_GetTick>
 8003f90:	0003      	movs	r3, r0
 8003f92:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1dba      	adds	r2, r7, #6
 8003f98:	2150      	movs	r1, #80	; 0x50
 8003f9a:	8812      	ldrh	r2, [r2, #0]
 8003f9c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1dba      	adds	r2, r7, #6
 8003fa2:	2152      	movs	r1, #82	; 0x52
 8003fa4:	8812      	ldrh	r2, [r2, #0]
 8003fa6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	689a      	ldr	r2, [r3, #8]
 8003fac:	2380      	movs	r3, #128	; 0x80
 8003fae:	015b      	lsls	r3, r3, #5
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d108      	bne.n	8003fc6 <HAL_UART_Transmit+0xaa>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d104      	bne.n	8003fc6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	61bb      	str	r3, [r7, #24]
 8003fc4:	e003      	b.n	8003fce <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2274      	movs	r2, #116	; 0x74
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003fd6:	e02d      	b.n	8004034 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fd8:	697a      	ldr	r2, [r7, #20]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	0013      	movs	r3, r2
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	2180      	movs	r1, #128	; 0x80
 8003fe6:	f000 fb27 	bl	8004638 <UART_WaitOnFlagUntilTimeout>
 8003fea:	1e03      	subs	r3, r0, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003fee:	2303      	movs	r3, #3
 8003ff0:	e039      	b.n	8004066 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10b      	bne.n	8004010 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	881a      	ldrh	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	05d2      	lsls	r2, r2, #23
 8004002:	0dd2      	lsrs	r2, r2, #23
 8004004:	b292      	uxth	r2, r2
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	3302      	adds	r3, #2
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	e008      	b.n	8004022 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	b292      	uxth	r2, r2
 800401a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	3301      	adds	r3, #1
 8004020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2252      	movs	r2, #82	; 0x52
 8004026:	5a9b      	ldrh	r3, [r3, r2]
 8004028:	b29b      	uxth	r3, r3
 800402a:	3b01      	subs	r3, #1
 800402c:	b299      	uxth	r1, r3
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2252      	movs	r2, #82	; 0x52
 8004032:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	2252      	movs	r2, #82	; 0x52
 8004038:	5a9b      	ldrh	r3, [r3, r2]
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1cb      	bne.n	8003fd8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	0013      	movs	r3, r2
 800404a:	2200      	movs	r2, #0
 800404c:	2140      	movs	r1, #64	; 0x40
 800404e:	f000 faf3 	bl	8004638 <UART_WaitOnFlagUntilTimeout>
 8004052:	1e03      	subs	r3, r0, #0
 8004054:	d001      	beq.n	800405a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e005      	b.n	8004066 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2220      	movs	r2, #32
 800405e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004060:	2300      	movs	r3, #0
 8004062:	e000      	b.n	8004066 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004064:	2302      	movs	r3, #2
  }
}
 8004066:	0018      	movs	r0, r3
 8004068:	46bd      	mov	sp, r7
 800406a:	b008      	add	sp, #32
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004078:	231e      	movs	r3, #30
 800407a:	18fb      	adds	r3, r7, r3
 800407c:	2200      	movs	r2, #0
 800407e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	691b      	ldr	r3, [r3, #16]
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4abe      	ldr	r2, [pc, #760]	; (8004398 <UART_SetConfig+0x328>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	0019      	movs	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	4ab9      	ldr	r2, [pc, #740]	; (800439c <UART_SetConfig+0x32c>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	0019      	movs	r1, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	697a      	ldr	r2, [r7, #20]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	4ab0      	ldr	r2, [pc, #704]	; (80043a0 <UART_SetConfig+0x330>)
 80040de:	4013      	ands	r3, r2
 80040e0:	0019      	movs	r1, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4aac      	ldr	r2, [pc, #688]	; (80043a4 <UART_SetConfig+0x334>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d127      	bne.n	8004146 <UART_SetConfig+0xd6>
 80040f6:	4bac      	ldr	r3, [pc, #688]	; (80043a8 <UART_SetConfig+0x338>)
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	2203      	movs	r2, #3
 80040fc:	4013      	ands	r3, r2
 80040fe:	2b03      	cmp	r3, #3
 8004100:	d00d      	beq.n	800411e <UART_SetConfig+0xae>
 8004102:	d81b      	bhi.n	800413c <UART_SetConfig+0xcc>
 8004104:	2b02      	cmp	r3, #2
 8004106:	d014      	beq.n	8004132 <UART_SetConfig+0xc2>
 8004108:	d818      	bhi.n	800413c <UART_SetConfig+0xcc>
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <UART_SetConfig+0xa4>
 800410e:	2b01      	cmp	r3, #1
 8004110:	d00a      	beq.n	8004128 <UART_SetConfig+0xb8>
 8004112:	e013      	b.n	800413c <UART_SetConfig+0xcc>
 8004114:	231f      	movs	r3, #31
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	2200      	movs	r2, #0
 800411a:	701a      	strb	r2, [r3, #0]
 800411c:	e0bd      	b.n	800429a <UART_SetConfig+0x22a>
 800411e:	231f      	movs	r3, #31
 8004120:	18fb      	adds	r3, r7, r3
 8004122:	2202      	movs	r2, #2
 8004124:	701a      	strb	r2, [r3, #0]
 8004126:	e0b8      	b.n	800429a <UART_SetConfig+0x22a>
 8004128:	231f      	movs	r3, #31
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	2204      	movs	r2, #4
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e0b3      	b.n	800429a <UART_SetConfig+0x22a>
 8004132:	231f      	movs	r3, #31
 8004134:	18fb      	adds	r3, r7, r3
 8004136:	2208      	movs	r2, #8
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	e0ae      	b.n	800429a <UART_SetConfig+0x22a>
 800413c:	231f      	movs	r3, #31
 800413e:	18fb      	adds	r3, r7, r3
 8004140:	2210      	movs	r2, #16
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	e0a9      	b.n	800429a <UART_SetConfig+0x22a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a98      	ldr	r2, [pc, #608]	; (80043ac <UART_SetConfig+0x33c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d134      	bne.n	80041ba <UART_SetConfig+0x14a>
 8004150:	4b95      	ldr	r3, [pc, #596]	; (80043a8 <UART_SetConfig+0x338>)
 8004152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004154:	23c0      	movs	r3, #192	; 0xc0
 8004156:	029b      	lsls	r3, r3, #10
 8004158:	4013      	ands	r3, r2
 800415a:	22c0      	movs	r2, #192	; 0xc0
 800415c:	0292      	lsls	r2, r2, #10
 800415e:	4293      	cmp	r3, r2
 8004160:	d017      	beq.n	8004192 <UART_SetConfig+0x122>
 8004162:	22c0      	movs	r2, #192	; 0xc0
 8004164:	0292      	lsls	r2, r2, #10
 8004166:	4293      	cmp	r3, r2
 8004168:	d822      	bhi.n	80041b0 <UART_SetConfig+0x140>
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	0292      	lsls	r2, r2, #10
 800416e:	4293      	cmp	r3, r2
 8004170:	d019      	beq.n	80041a6 <UART_SetConfig+0x136>
 8004172:	2280      	movs	r2, #128	; 0x80
 8004174:	0292      	lsls	r2, r2, #10
 8004176:	4293      	cmp	r3, r2
 8004178:	d81a      	bhi.n	80041b0 <UART_SetConfig+0x140>
 800417a:	2b00      	cmp	r3, #0
 800417c:	d004      	beq.n	8004188 <UART_SetConfig+0x118>
 800417e:	2280      	movs	r2, #128	; 0x80
 8004180:	0252      	lsls	r2, r2, #9
 8004182:	4293      	cmp	r3, r2
 8004184:	d00a      	beq.n	800419c <UART_SetConfig+0x12c>
 8004186:	e013      	b.n	80041b0 <UART_SetConfig+0x140>
 8004188:	231f      	movs	r3, #31
 800418a:	18fb      	adds	r3, r7, r3
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e083      	b.n	800429a <UART_SetConfig+0x22a>
 8004192:	231f      	movs	r3, #31
 8004194:	18fb      	adds	r3, r7, r3
 8004196:	2202      	movs	r2, #2
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	e07e      	b.n	800429a <UART_SetConfig+0x22a>
 800419c:	231f      	movs	r3, #31
 800419e:	18fb      	adds	r3, r7, r3
 80041a0:	2204      	movs	r2, #4
 80041a2:	701a      	strb	r2, [r3, #0]
 80041a4:	e079      	b.n	800429a <UART_SetConfig+0x22a>
 80041a6:	231f      	movs	r3, #31
 80041a8:	18fb      	adds	r3, r7, r3
 80041aa:	2208      	movs	r2, #8
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	e074      	b.n	800429a <UART_SetConfig+0x22a>
 80041b0:	231f      	movs	r3, #31
 80041b2:	18fb      	adds	r3, r7, r3
 80041b4:	2210      	movs	r2, #16
 80041b6:	701a      	strb	r2, [r3, #0]
 80041b8:	e06f      	b.n	800429a <UART_SetConfig+0x22a>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a7c      	ldr	r2, [pc, #496]	; (80043b0 <UART_SetConfig+0x340>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d134      	bne.n	800422e <UART_SetConfig+0x1be>
 80041c4:	4b78      	ldr	r3, [pc, #480]	; (80043a8 <UART_SetConfig+0x338>)
 80041c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c8:	23c0      	movs	r3, #192	; 0xc0
 80041ca:	031b      	lsls	r3, r3, #12
 80041cc:	4013      	ands	r3, r2
 80041ce:	22c0      	movs	r2, #192	; 0xc0
 80041d0:	0312      	lsls	r2, r2, #12
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d017      	beq.n	8004206 <UART_SetConfig+0x196>
 80041d6:	22c0      	movs	r2, #192	; 0xc0
 80041d8:	0312      	lsls	r2, r2, #12
 80041da:	4293      	cmp	r3, r2
 80041dc:	d822      	bhi.n	8004224 <UART_SetConfig+0x1b4>
 80041de:	2280      	movs	r2, #128	; 0x80
 80041e0:	0312      	lsls	r2, r2, #12
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d019      	beq.n	800421a <UART_SetConfig+0x1aa>
 80041e6:	2280      	movs	r2, #128	; 0x80
 80041e8:	0312      	lsls	r2, r2, #12
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d81a      	bhi.n	8004224 <UART_SetConfig+0x1b4>
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d004      	beq.n	80041fc <UART_SetConfig+0x18c>
 80041f2:	2280      	movs	r2, #128	; 0x80
 80041f4:	02d2      	lsls	r2, r2, #11
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d00a      	beq.n	8004210 <UART_SetConfig+0x1a0>
 80041fa:	e013      	b.n	8004224 <UART_SetConfig+0x1b4>
 80041fc:	231f      	movs	r3, #31
 80041fe:	18fb      	adds	r3, r7, r3
 8004200:	2200      	movs	r2, #0
 8004202:	701a      	strb	r2, [r3, #0]
 8004204:	e049      	b.n	800429a <UART_SetConfig+0x22a>
 8004206:	231f      	movs	r3, #31
 8004208:	18fb      	adds	r3, r7, r3
 800420a:	2202      	movs	r2, #2
 800420c:	701a      	strb	r2, [r3, #0]
 800420e:	e044      	b.n	800429a <UART_SetConfig+0x22a>
 8004210:	231f      	movs	r3, #31
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	2204      	movs	r2, #4
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e03f      	b.n	800429a <UART_SetConfig+0x22a>
 800421a:	231f      	movs	r3, #31
 800421c:	18fb      	adds	r3, r7, r3
 800421e:	2208      	movs	r2, #8
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	e03a      	b.n	800429a <UART_SetConfig+0x22a>
 8004224:	231f      	movs	r3, #31
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	2210      	movs	r2, #16
 800422a:	701a      	strb	r2, [r3, #0]
 800422c:	e035      	b.n	800429a <UART_SetConfig+0x22a>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a60      	ldr	r2, [pc, #384]	; (80043b4 <UART_SetConfig+0x344>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d104      	bne.n	8004242 <UART_SetConfig+0x1d2>
 8004238:	231f      	movs	r3, #31
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
 8004240:	e02b      	b.n	800429a <UART_SetConfig+0x22a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a5c      	ldr	r2, [pc, #368]	; (80043b8 <UART_SetConfig+0x348>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d104      	bne.n	8004256 <UART_SetConfig+0x1e6>
 800424c:	231f      	movs	r3, #31
 800424e:	18fb      	adds	r3, r7, r3
 8004250:	2200      	movs	r2, #0
 8004252:	701a      	strb	r2, [r3, #0]
 8004254:	e021      	b.n	800429a <UART_SetConfig+0x22a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a58      	ldr	r2, [pc, #352]	; (80043bc <UART_SetConfig+0x34c>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d104      	bne.n	800426a <UART_SetConfig+0x1fa>
 8004260:	231f      	movs	r3, #31
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	2200      	movs	r2, #0
 8004266:	701a      	strb	r2, [r3, #0]
 8004268:	e017      	b.n	800429a <UART_SetConfig+0x22a>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a54      	ldr	r2, [pc, #336]	; (80043c0 <UART_SetConfig+0x350>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d104      	bne.n	800427e <UART_SetConfig+0x20e>
 8004274:	231f      	movs	r3, #31
 8004276:	18fb      	adds	r3, r7, r3
 8004278:	2200      	movs	r2, #0
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	e00d      	b.n	800429a <UART_SetConfig+0x22a>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a50      	ldr	r2, [pc, #320]	; (80043c4 <UART_SetConfig+0x354>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d104      	bne.n	8004292 <UART_SetConfig+0x222>
 8004288:	231f      	movs	r3, #31
 800428a:	18fb      	adds	r3, r7, r3
 800428c:	2200      	movs	r2, #0
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	e003      	b.n	800429a <UART_SetConfig+0x22a>
 8004292:	231f      	movs	r3, #31
 8004294:	18fb      	adds	r3, r7, r3
 8004296:	2210      	movs	r2, #16
 8004298:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69da      	ldr	r2, [r3, #28]
 800429e:	2380      	movs	r3, #128	; 0x80
 80042a0:	021b      	lsls	r3, r3, #8
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d15d      	bne.n	8004362 <UART_SetConfig+0x2f2>
  {
    switch (clocksource)
 80042a6:	231f      	movs	r3, #31
 80042a8:	18fb      	adds	r3, r7, r3
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d015      	beq.n	80042dc <UART_SetConfig+0x26c>
 80042b0:	dc18      	bgt.n	80042e4 <UART_SetConfig+0x274>
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d00d      	beq.n	80042d2 <UART_SetConfig+0x262>
 80042b6:	dc15      	bgt.n	80042e4 <UART_SetConfig+0x274>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <UART_SetConfig+0x252>
 80042bc:	2b02      	cmp	r3, #2
 80042be:	d005      	beq.n	80042cc <UART_SetConfig+0x25c>
 80042c0:	e010      	b.n	80042e4 <UART_SetConfig+0x274>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c2:	f7fe f9d5 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 80042c6:	0003      	movs	r3, r0
 80042c8:	61bb      	str	r3, [r7, #24]
        break;
 80042ca:	e012      	b.n	80042f2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042cc:	4b3e      	ldr	r3, [pc, #248]	; (80043c8 <UART_SetConfig+0x358>)
 80042ce:	61bb      	str	r3, [r7, #24]
        break;
 80042d0:	e00f      	b.n	80042f2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d2:	f7fe f943 	bl	800255c <HAL_RCC_GetSysClockFreq>
 80042d6:	0003      	movs	r3, r0
 80042d8:	61bb      	str	r3, [r7, #24]
        break;
 80042da:	e00a      	b.n	80042f2 <UART_SetConfig+0x282>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042dc:	2380      	movs	r3, #128	; 0x80
 80042de:	021b      	lsls	r3, r3, #8
 80042e0:	61bb      	str	r3, [r7, #24]
        break;
 80042e2:	e006      	b.n	80042f2 <UART_SetConfig+0x282>
      default:
        pclk = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042e8:	231e      	movs	r3, #30
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	2201      	movs	r2, #1
 80042ee:	701a      	strb	r2, [r3, #0]
        break;
 80042f0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d100      	bne.n	80042fa <UART_SetConfig+0x28a>
 80042f8:	e095      	b.n	8004426 <UART_SetConfig+0x3b6>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	005a      	lsls	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	085b      	lsrs	r3, r3, #1
 8004304:	18d2      	adds	r2, r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	0019      	movs	r1, r3
 800430c:	0010      	movs	r0, r2
 800430e:	f7fb ff0b 	bl	8000128 <__udivsi3>
 8004312:	0003      	movs	r3, r0
 8004314:	b29b      	uxth	r3, r3
 8004316:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	2b0f      	cmp	r3, #15
 800431c:	d91c      	bls.n	8004358 <UART_SetConfig+0x2e8>
 800431e:	693a      	ldr	r2, [r7, #16]
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	025b      	lsls	r3, r3, #9
 8004324:	429a      	cmp	r2, r3
 8004326:	d217      	bcs.n	8004358 <UART_SetConfig+0x2e8>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	b29a      	uxth	r2, r3
 800432c:	200e      	movs	r0, #14
 800432e:	183b      	adds	r3, r7, r0
 8004330:	210f      	movs	r1, #15
 8004332:	438a      	bics	r2, r1
 8004334:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	085b      	lsrs	r3, r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	2207      	movs	r2, #7
 800433e:	4013      	ands	r3, r2
 8004340:	b299      	uxth	r1, r3
 8004342:	183b      	adds	r3, r7, r0
 8004344:	183a      	adds	r2, r7, r0
 8004346:	8812      	ldrh	r2, [r2, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	183a      	adds	r2, r7, r0
 8004352:	8812      	ldrh	r2, [r2, #0]
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	e066      	b.n	8004426 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 8004358:	231e      	movs	r3, #30
 800435a:	18fb      	adds	r3, r7, r3
 800435c:	2201      	movs	r2, #1
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e061      	b.n	8004426 <UART_SetConfig+0x3b6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004362:	231f      	movs	r3, #31
 8004364:	18fb      	adds	r3, r7, r3
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d02f      	beq.n	80043cc <UART_SetConfig+0x35c>
 800436c:	dc32      	bgt.n	80043d4 <UART_SetConfig+0x364>
 800436e:	2b04      	cmp	r3, #4
 8004370:	d00d      	beq.n	800438e <UART_SetConfig+0x31e>
 8004372:	dc2f      	bgt.n	80043d4 <UART_SetConfig+0x364>
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <UART_SetConfig+0x30e>
 8004378:	2b02      	cmp	r3, #2
 800437a:	d005      	beq.n	8004388 <UART_SetConfig+0x318>
 800437c:	e02a      	b.n	80043d4 <UART_SetConfig+0x364>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800437e:	f7fe f977 	bl	8002670 <HAL_RCC_GetPCLK1Freq>
 8004382:	0003      	movs	r3, r0
 8004384:	61bb      	str	r3, [r7, #24]
        break;
 8004386:	e02c      	b.n	80043e2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004388:	4b0f      	ldr	r3, [pc, #60]	; (80043c8 <UART_SetConfig+0x358>)
 800438a:	61bb      	str	r3, [r7, #24]
        break;
 800438c:	e029      	b.n	80043e2 <UART_SetConfig+0x372>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438e:	f7fe f8e5 	bl	800255c <HAL_RCC_GetSysClockFreq>
 8004392:	0003      	movs	r3, r0
 8004394:	61bb      	str	r3, [r7, #24]
        break;
 8004396:	e024      	b.n	80043e2 <UART_SetConfig+0x372>
 8004398:	efff69f3 	.word	0xefff69f3
 800439c:	ffffcfff 	.word	0xffffcfff
 80043a0:	fffff4ff 	.word	0xfffff4ff
 80043a4:	40013800 	.word	0x40013800
 80043a8:	40021000 	.word	0x40021000
 80043ac:	40004400 	.word	0x40004400
 80043b0:	40004800 	.word	0x40004800
 80043b4:	40004c00 	.word	0x40004c00
 80043b8:	40005000 	.word	0x40005000
 80043bc:	40011400 	.word	0x40011400
 80043c0:	40011800 	.word	0x40011800
 80043c4:	40011c00 	.word	0x40011c00
 80043c8:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043cc:	2380      	movs	r3, #128	; 0x80
 80043ce:	021b      	lsls	r3, r3, #8
 80043d0:	61bb      	str	r3, [r7, #24]
        break;
 80043d2:	e006      	b.n	80043e2 <UART_SetConfig+0x372>
      default:
        pclk = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043d8:	231e      	movs	r3, #30
 80043da:	18fb      	adds	r3, r7, r3
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
        break;
 80043e0:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d01e      	beq.n	8004426 <UART_SetConfig+0x3b6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	085a      	lsrs	r2, r3, #1
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	18d2      	adds	r2, r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	0019      	movs	r1, r3
 80043f8:	0010      	movs	r0, r2
 80043fa:	f7fb fe95 	bl	8000128 <__udivsi3>
 80043fe:	0003      	movs	r3, r0
 8004400:	b29b      	uxth	r3, r3
 8004402:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	2b0f      	cmp	r3, #15
 8004408:	d909      	bls.n	800441e <UART_SetConfig+0x3ae>
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	025b      	lsls	r3, r3, #9
 8004410:	429a      	cmp	r2, r3
 8004412:	d204      	bcs.n	800441e <UART_SetConfig+0x3ae>
      {
        huart->Instance->BRR = usartdiv;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	60da      	str	r2, [r3, #12]
 800441c:	e003      	b.n	8004426 <UART_SetConfig+0x3b6>
      }
      else
      {
        ret = HAL_ERROR;
 800441e:	231e      	movs	r3, #30
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	2201      	movs	r2, #1
 8004424:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2200      	movs	r2, #0
 800442a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004432:	231e      	movs	r3, #30
 8004434:	18fb      	adds	r3, r7, r3
 8004436:	781b      	ldrb	r3, [r3, #0]
}
 8004438:	0018      	movs	r0, r3
 800443a:	46bd      	mov	sp, r7
 800443c:	b008      	add	sp, #32
 800443e:	bd80      	pop	{r7, pc}

08004440 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	2201      	movs	r2, #1
 800444e:	4013      	ands	r3, r2
 8004450:	d00b      	beq.n	800446a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	4a4a      	ldr	r2, [pc, #296]	; (8004584 <UART_AdvFeatureConfig+0x144>)
 800445a:	4013      	ands	r3, r2
 800445c:	0019      	movs	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	430a      	orrs	r2, r1
 8004468:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446e:	2202      	movs	r2, #2
 8004470:	4013      	ands	r3, r2
 8004472:	d00b      	beq.n	800448c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	4a43      	ldr	r2, [pc, #268]	; (8004588 <UART_AdvFeatureConfig+0x148>)
 800447c:	4013      	ands	r3, r2
 800447e:	0019      	movs	r1, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	2204      	movs	r2, #4
 8004492:	4013      	ands	r3, r2
 8004494:	d00b      	beq.n	80044ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	4a3b      	ldr	r2, [pc, #236]	; (800458c <UART_AdvFeatureConfig+0x14c>)
 800449e:	4013      	ands	r3, r2
 80044a0:	0019      	movs	r1, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	430a      	orrs	r2, r1
 80044ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2208      	movs	r2, #8
 80044b4:	4013      	ands	r3, r2
 80044b6:	d00b      	beq.n	80044d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	4a34      	ldr	r2, [pc, #208]	; (8004590 <UART_AdvFeatureConfig+0x150>)
 80044c0:	4013      	ands	r3, r2
 80044c2:	0019      	movs	r1, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	430a      	orrs	r2, r1
 80044ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d4:	2210      	movs	r2, #16
 80044d6:	4013      	ands	r3, r2
 80044d8:	d00b      	beq.n	80044f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4a2c      	ldr	r2, [pc, #176]	; (8004594 <UART_AdvFeatureConfig+0x154>)
 80044e2:	4013      	ands	r3, r2
 80044e4:	0019      	movs	r1, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	2220      	movs	r2, #32
 80044f8:	4013      	ands	r3, r2
 80044fa:	d00b      	beq.n	8004514 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	4a25      	ldr	r2, [pc, #148]	; (8004598 <UART_AdvFeatureConfig+0x158>)
 8004504:	4013      	ands	r3, r2
 8004506:	0019      	movs	r1, r3
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	430a      	orrs	r2, r1
 8004512:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004518:	2240      	movs	r2, #64	; 0x40
 800451a:	4013      	ands	r3, r2
 800451c:	d01d      	beq.n	800455a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <UART_AdvFeatureConfig+0x15c>)
 8004526:	4013      	ands	r3, r2
 8004528:	0019      	movs	r1, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	430a      	orrs	r2, r1
 8004534:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800453a:	2380      	movs	r3, #128	; 0x80
 800453c:	035b      	lsls	r3, r3, #13
 800453e:	429a      	cmp	r2, r3
 8004540:	d10b      	bne.n	800455a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	4a15      	ldr	r2, [pc, #84]	; (80045a0 <UART_AdvFeatureConfig+0x160>)
 800454a:	4013      	ands	r3, r2
 800454c:	0019      	movs	r1, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	430a      	orrs	r2, r1
 8004558:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2280      	movs	r2, #128	; 0x80
 8004560:	4013      	ands	r3, r2
 8004562:	d00b      	beq.n	800457c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	4a0e      	ldr	r2, [pc, #56]	; (80045a4 <UART_AdvFeatureConfig+0x164>)
 800456c:	4013      	ands	r3, r2
 800456e:	0019      	movs	r1, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]
  }
}
 800457c:	46c0      	nop			; (mov r8, r8)
 800457e:	46bd      	mov	sp, r7
 8004580:	b002      	add	sp, #8
 8004582:	bd80      	pop	{r7, pc}
 8004584:	fffdffff 	.word	0xfffdffff
 8004588:	fffeffff 	.word	0xfffeffff
 800458c:	fffbffff 	.word	0xfffbffff
 8004590:	ffff7fff 	.word	0xffff7fff
 8004594:	ffffefff 	.word	0xffffefff
 8004598:	ffffdfff 	.word	0xffffdfff
 800459c:	ffefffff 	.word	0xffefffff
 80045a0:	ff9fffff 	.word	0xff9fffff
 80045a4:	fff7ffff 	.word	0xfff7ffff

080045a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2280      	movs	r2, #128	; 0x80
 80045b4:	2100      	movs	r1, #0
 80045b6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045b8:	f7fc fef6 	bl	80013a8 <HAL_GetTick>
 80045bc:	0003      	movs	r3, r0
 80045be:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	2208      	movs	r2, #8
 80045c8:	4013      	ands	r3, r2
 80045ca:	2b08      	cmp	r3, #8
 80045cc:	d10c      	bne.n	80045e8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2280      	movs	r2, #128	; 0x80
 80045d2:	0391      	lsls	r1, r2, #14
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	4a17      	ldr	r2, [pc, #92]	; (8004634 <UART_CheckIdleState+0x8c>)
 80045d8:	9200      	str	r2, [sp, #0]
 80045da:	2200      	movs	r2, #0
 80045dc:	f000 f82c 	bl	8004638 <UART_WaitOnFlagUntilTimeout>
 80045e0:	1e03      	subs	r3, r0, #0
 80045e2:	d001      	beq.n	80045e8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e021      	b.n	800462c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2204      	movs	r2, #4
 80045f0:	4013      	ands	r3, r2
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d10c      	bne.n	8004610 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2280      	movs	r2, #128	; 0x80
 80045fa:	03d1      	lsls	r1, r2, #15
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	4a0d      	ldr	r2, [pc, #52]	; (8004634 <UART_CheckIdleState+0x8c>)
 8004600:	9200      	str	r2, [sp, #0]
 8004602:	2200      	movs	r2, #0
 8004604:	f000 f818 	bl	8004638 <UART_WaitOnFlagUntilTimeout>
 8004608:	1e03      	subs	r3, r0, #0
 800460a:	d001      	beq.n	8004610 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e00d      	b.n	800462c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2220      	movs	r2, #32
 8004614:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2274      	movs	r2, #116	; 0x74
 8004626:	2100      	movs	r1, #0
 8004628:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	0018      	movs	r0, r3
 800462e:	46bd      	mov	sp, r7
 8004630:	b004      	add	sp, #16
 8004632:	bd80      	pop	{r7, pc}
 8004634:	01ffffff 	.word	0x01ffffff

08004638 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b094      	sub	sp, #80	; 0x50
 800463c:	af00      	add	r7, sp, #0
 800463e:	60f8      	str	r0, [r7, #12]
 8004640:	60b9      	str	r1, [r7, #8]
 8004642:	603b      	str	r3, [r7, #0]
 8004644:	1dfb      	adds	r3, r7, #7
 8004646:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004648:	e0a3      	b.n	8004792 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800464c:	3301      	adds	r3, #1
 800464e:	d100      	bne.n	8004652 <UART_WaitOnFlagUntilTimeout+0x1a>
 8004650:	e09f      	b.n	8004792 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004652:	f7fc fea9 	bl	80013a8 <HAL_GetTick>
 8004656:	0002      	movs	r2, r0
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800465e:	429a      	cmp	r2, r3
 8004660:	d302      	bcc.n	8004668 <UART_WaitOnFlagUntilTimeout+0x30>
 8004662:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004664:	2b00      	cmp	r3, #0
 8004666:	d13d      	bne.n	80046e4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004668:	f3ef 8310 	mrs	r3, PRIMASK
 800466c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004670:	647b      	str	r3, [r7, #68]	; 0x44
 8004672:	2301      	movs	r3, #1
 8004674:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	f383 8810 	msr	PRIMASK, r3
}
 800467c:	46c0      	nop			; (mov r8, r8)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	494c      	ldr	r1, [pc, #304]	; (80047bc <UART_WaitOnFlagUntilTimeout+0x184>)
 800468a:	400a      	ands	r2, r1
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004690:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004694:	f383 8810 	msr	PRIMASK, r3
}
 8004698:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800469a:	f3ef 8310 	mrs	r3, PRIMASK
 800469e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80046a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a2:	643b      	str	r3, [r7, #64]	; 0x40
 80046a4:	2301      	movs	r3, #1
 80046a6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	f383 8810 	msr	PRIMASK, r3
}
 80046ae:	46c0      	nop			; (mov r8, r8)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689a      	ldr	r2, [r3, #8]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2101      	movs	r1, #1
 80046bc:	438a      	bics	r2, r1
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046c6:	f383 8810 	msr	PRIMASK, r3
}
 80046ca:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2220      	movs	r2, #32
 80046d6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2274      	movs	r2, #116	; 0x74
 80046dc:	2100      	movs	r1, #0
 80046de:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e067      	b.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	2204      	movs	r2, #4
 80046ec:	4013      	ands	r3, r2
 80046ee:	d050      	beq.n	8004792 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69da      	ldr	r2, [r3, #28]
 80046f6:	2380      	movs	r3, #128	; 0x80
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	401a      	ands	r2, r3
 80046fc:	2380      	movs	r3, #128	; 0x80
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	429a      	cmp	r2, r3
 8004702:	d146      	bne.n	8004792 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2280      	movs	r2, #128	; 0x80
 800470a:	0112      	lsls	r2, r2, #4
 800470c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800470e:	f3ef 8310 	mrs	r3, PRIMASK
 8004712:	613b      	str	r3, [r7, #16]
  return(result);
 8004714:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004716:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004718:	2301      	movs	r3, #1
 800471a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f383 8810 	msr	PRIMASK, r3
}
 8004722:	46c0      	nop			; (mov r8, r8)
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4923      	ldr	r1, [pc, #140]	; (80047bc <UART_WaitOnFlagUntilTimeout+0x184>)
 8004730:	400a      	ands	r2, r1
 8004732:	601a      	str	r2, [r3, #0]
 8004734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004736:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	f383 8810 	msr	PRIMASK, r3
}
 800473e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004740:	f3ef 8310 	mrs	r3, PRIMASK
 8004744:	61fb      	str	r3, [r7, #28]
  return(result);
 8004746:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004748:	64bb      	str	r3, [r7, #72]	; 0x48
 800474a:	2301      	movs	r3, #1
 800474c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			; (mov r8, r8)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2101      	movs	r1, #1
 8004762:	438a      	bics	r2, r1
 8004764:	609a      	str	r2, [r3, #8]
 8004766:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476c:	f383 8810 	msr	PRIMASK, r3
}
 8004770:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2280      	movs	r2, #128	; 0x80
 8004782:	2120      	movs	r1, #32
 8004784:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2274      	movs	r2, #116	; 0x74
 800478a:	2100      	movs	r1, #0
 800478c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800478e:	2303      	movs	r3, #3
 8004790:	e010      	b.n	80047b4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	4013      	ands	r3, r2
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	1ad3      	subs	r3, r2, r3
 80047a0:	425a      	negs	r2, r3
 80047a2:	4153      	adcs	r3, r2
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	001a      	movs	r2, r3
 80047a8:	1dfb      	adds	r3, r7, #7
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d100      	bne.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80047b0:	e74b      	b.n	800464a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	0018      	movs	r0, r3
 80047b6:	46bd      	mov	sp, r7
 80047b8:	b014      	add	sp, #80	; 0x50
 80047ba:	bd80      	pop	{r7, pc}
 80047bc:	fffffe5f 	.word	0xfffffe5f

080047c0 <__errno>:
 80047c0:	4b01      	ldr	r3, [pc, #4]	; (80047c8 <__errno+0x8>)
 80047c2:	6818      	ldr	r0, [r3, #0]
 80047c4:	4770      	bx	lr
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	20000038 	.word	0x20000038

080047cc <__libc_init_array>:
 80047cc:	b570      	push	{r4, r5, r6, lr}
 80047ce:	2600      	movs	r6, #0
 80047d0:	4d0c      	ldr	r5, [pc, #48]	; (8004804 <__libc_init_array+0x38>)
 80047d2:	4c0d      	ldr	r4, [pc, #52]	; (8004808 <__libc_init_array+0x3c>)
 80047d4:	1b64      	subs	r4, r4, r5
 80047d6:	10a4      	asrs	r4, r4, #2
 80047d8:	42a6      	cmp	r6, r4
 80047da:	d109      	bne.n	80047f0 <__libc_init_array+0x24>
 80047dc:	2600      	movs	r6, #0
 80047de:	f000 fc8b 	bl	80050f8 <_init>
 80047e2:	4d0a      	ldr	r5, [pc, #40]	; (800480c <__libc_init_array+0x40>)
 80047e4:	4c0a      	ldr	r4, [pc, #40]	; (8004810 <__libc_init_array+0x44>)
 80047e6:	1b64      	subs	r4, r4, r5
 80047e8:	10a4      	asrs	r4, r4, #2
 80047ea:	42a6      	cmp	r6, r4
 80047ec:	d105      	bne.n	80047fa <__libc_init_array+0x2e>
 80047ee:	bd70      	pop	{r4, r5, r6, pc}
 80047f0:	00b3      	lsls	r3, r6, #2
 80047f2:	58eb      	ldr	r3, [r5, r3]
 80047f4:	4798      	blx	r3
 80047f6:	3601      	adds	r6, #1
 80047f8:	e7ee      	b.n	80047d8 <__libc_init_array+0xc>
 80047fa:	00b3      	lsls	r3, r6, #2
 80047fc:	58eb      	ldr	r3, [r5, r3]
 80047fe:	4798      	blx	r3
 8004800:	3601      	adds	r6, #1
 8004802:	e7f2      	b.n	80047ea <__libc_init_array+0x1e>
 8004804:	0800523c 	.word	0x0800523c
 8004808:	0800523c 	.word	0x0800523c
 800480c:	0800523c 	.word	0x0800523c
 8004810:	08005240 	.word	0x08005240

08004814 <memcpy>:
 8004814:	2300      	movs	r3, #0
 8004816:	b510      	push	{r4, lr}
 8004818:	429a      	cmp	r2, r3
 800481a:	d100      	bne.n	800481e <memcpy+0xa>
 800481c:	bd10      	pop	{r4, pc}
 800481e:	5ccc      	ldrb	r4, [r1, r3]
 8004820:	54c4      	strb	r4, [r0, r3]
 8004822:	3301      	adds	r3, #1
 8004824:	e7f8      	b.n	8004818 <memcpy+0x4>

08004826 <memset>:
 8004826:	0003      	movs	r3, r0
 8004828:	1882      	adds	r2, r0, r2
 800482a:	4293      	cmp	r3, r2
 800482c:	d100      	bne.n	8004830 <memset+0xa>
 800482e:	4770      	bx	lr
 8004830:	7019      	strb	r1, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	e7f9      	b.n	800482a <memset+0x4>
	...

08004838 <siprintf>:
 8004838:	b40e      	push	{r1, r2, r3}
 800483a:	b500      	push	{lr}
 800483c:	490b      	ldr	r1, [pc, #44]	; (800486c <siprintf+0x34>)
 800483e:	b09c      	sub	sp, #112	; 0x70
 8004840:	ab1d      	add	r3, sp, #116	; 0x74
 8004842:	9002      	str	r0, [sp, #8]
 8004844:	9006      	str	r0, [sp, #24]
 8004846:	9107      	str	r1, [sp, #28]
 8004848:	9104      	str	r1, [sp, #16]
 800484a:	4809      	ldr	r0, [pc, #36]	; (8004870 <siprintf+0x38>)
 800484c:	4909      	ldr	r1, [pc, #36]	; (8004874 <siprintf+0x3c>)
 800484e:	cb04      	ldmia	r3!, {r2}
 8004850:	9105      	str	r1, [sp, #20]
 8004852:	6800      	ldr	r0, [r0, #0]
 8004854:	a902      	add	r1, sp, #8
 8004856:	9301      	str	r3, [sp, #4]
 8004858:	f000 f870 	bl	800493c <_svfiprintf_r>
 800485c:	2300      	movs	r3, #0
 800485e:	9a02      	ldr	r2, [sp, #8]
 8004860:	7013      	strb	r3, [r2, #0]
 8004862:	b01c      	add	sp, #112	; 0x70
 8004864:	bc08      	pop	{r3}
 8004866:	b003      	add	sp, #12
 8004868:	4718      	bx	r3
 800486a:	46c0      	nop			; (mov r8, r8)
 800486c:	7fffffff 	.word	0x7fffffff
 8004870:	20000038 	.word	0x20000038
 8004874:	ffff0208 	.word	0xffff0208

08004878 <__ssputs_r>:
 8004878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800487a:	688e      	ldr	r6, [r1, #8]
 800487c:	b085      	sub	sp, #20
 800487e:	0007      	movs	r7, r0
 8004880:	000c      	movs	r4, r1
 8004882:	9203      	str	r2, [sp, #12]
 8004884:	9301      	str	r3, [sp, #4]
 8004886:	429e      	cmp	r6, r3
 8004888:	d83c      	bhi.n	8004904 <__ssputs_r+0x8c>
 800488a:	2390      	movs	r3, #144	; 0x90
 800488c:	898a      	ldrh	r2, [r1, #12]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	421a      	tst	r2, r3
 8004892:	d034      	beq.n	80048fe <__ssputs_r+0x86>
 8004894:	6909      	ldr	r1, [r1, #16]
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	6960      	ldr	r0, [r4, #20]
 800489a:	1a5b      	subs	r3, r3, r1
 800489c:	9302      	str	r3, [sp, #8]
 800489e:	2303      	movs	r3, #3
 80048a0:	4343      	muls	r3, r0
 80048a2:	0fdd      	lsrs	r5, r3, #31
 80048a4:	18ed      	adds	r5, r5, r3
 80048a6:	9b01      	ldr	r3, [sp, #4]
 80048a8:	9802      	ldr	r0, [sp, #8]
 80048aa:	3301      	adds	r3, #1
 80048ac:	181b      	adds	r3, r3, r0
 80048ae:	106d      	asrs	r5, r5, #1
 80048b0:	42ab      	cmp	r3, r5
 80048b2:	d900      	bls.n	80048b6 <__ssputs_r+0x3e>
 80048b4:	001d      	movs	r5, r3
 80048b6:	0553      	lsls	r3, r2, #21
 80048b8:	d532      	bpl.n	8004920 <__ssputs_r+0xa8>
 80048ba:	0029      	movs	r1, r5
 80048bc:	0038      	movs	r0, r7
 80048be:	f000 fb49 	bl	8004f54 <_malloc_r>
 80048c2:	1e06      	subs	r6, r0, #0
 80048c4:	d109      	bne.n	80048da <__ssputs_r+0x62>
 80048c6:	230c      	movs	r3, #12
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	2340      	movs	r3, #64	; 0x40
 80048cc:	2001      	movs	r0, #1
 80048ce:	89a2      	ldrh	r2, [r4, #12]
 80048d0:	4240      	negs	r0, r0
 80048d2:	4313      	orrs	r3, r2
 80048d4:	81a3      	strh	r3, [r4, #12]
 80048d6:	b005      	add	sp, #20
 80048d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048da:	9a02      	ldr	r2, [sp, #8]
 80048dc:	6921      	ldr	r1, [r4, #16]
 80048de:	f7ff ff99 	bl	8004814 <memcpy>
 80048e2:	89a3      	ldrh	r3, [r4, #12]
 80048e4:	4a14      	ldr	r2, [pc, #80]	; (8004938 <__ssputs_r+0xc0>)
 80048e6:	401a      	ands	r2, r3
 80048e8:	2380      	movs	r3, #128	; 0x80
 80048ea:	4313      	orrs	r3, r2
 80048ec:	81a3      	strh	r3, [r4, #12]
 80048ee:	9b02      	ldr	r3, [sp, #8]
 80048f0:	6126      	str	r6, [r4, #16]
 80048f2:	18f6      	adds	r6, r6, r3
 80048f4:	6026      	str	r6, [r4, #0]
 80048f6:	6165      	str	r5, [r4, #20]
 80048f8:	9e01      	ldr	r6, [sp, #4]
 80048fa:	1aed      	subs	r5, r5, r3
 80048fc:	60a5      	str	r5, [r4, #8]
 80048fe:	9b01      	ldr	r3, [sp, #4]
 8004900:	429e      	cmp	r6, r3
 8004902:	d900      	bls.n	8004906 <__ssputs_r+0x8e>
 8004904:	9e01      	ldr	r6, [sp, #4]
 8004906:	0032      	movs	r2, r6
 8004908:	9903      	ldr	r1, [sp, #12]
 800490a:	6820      	ldr	r0, [r4, #0]
 800490c:	f000 faa3 	bl	8004e56 <memmove>
 8004910:	68a3      	ldr	r3, [r4, #8]
 8004912:	2000      	movs	r0, #0
 8004914:	1b9b      	subs	r3, r3, r6
 8004916:	60a3      	str	r3, [r4, #8]
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	199e      	adds	r6, r3, r6
 800491c:	6026      	str	r6, [r4, #0]
 800491e:	e7da      	b.n	80048d6 <__ssputs_r+0x5e>
 8004920:	002a      	movs	r2, r5
 8004922:	0038      	movs	r0, r7
 8004924:	f000 fb8c 	bl	8005040 <_realloc_r>
 8004928:	1e06      	subs	r6, r0, #0
 800492a:	d1e0      	bne.n	80048ee <__ssputs_r+0x76>
 800492c:	0038      	movs	r0, r7
 800492e:	6921      	ldr	r1, [r4, #16]
 8004930:	f000 faa4 	bl	8004e7c <_free_r>
 8004934:	e7c7      	b.n	80048c6 <__ssputs_r+0x4e>
 8004936:	46c0      	nop			; (mov r8, r8)
 8004938:	fffffb7f 	.word	0xfffffb7f

0800493c <_svfiprintf_r>:
 800493c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800493e:	b0a1      	sub	sp, #132	; 0x84
 8004940:	9003      	str	r0, [sp, #12]
 8004942:	001d      	movs	r5, r3
 8004944:	898b      	ldrh	r3, [r1, #12]
 8004946:	000f      	movs	r7, r1
 8004948:	0016      	movs	r6, r2
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	d511      	bpl.n	8004972 <_svfiprintf_r+0x36>
 800494e:	690b      	ldr	r3, [r1, #16]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10e      	bne.n	8004972 <_svfiprintf_r+0x36>
 8004954:	2140      	movs	r1, #64	; 0x40
 8004956:	f000 fafd 	bl	8004f54 <_malloc_r>
 800495a:	6038      	str	r0, [r7, #0]
 800495c:	6138      	str	r0, [r7, #16]
 800495e:	2800      	cmp	r0, #0
 8004960:	d105      	bne.n	800496e <_svfiprintf_r+0x32>
 8004962:	230c      	movs	r3, #12
 8004964:	9a03      	ldr	r2, [sp, #12]
 8004966:	3801      	subs	r0, #1
 8004968:	6013      	str	r3, [r2, #0]
 800496a:	b021      	add	sp, #132	; 0x84
 800496c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800496e:	2340      	movs	r3, #64	; 0x40
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	2300      	movs	r3, #0
 8004974:	ac08      	add	r4, sp, #32
 8004976:	6163      	str	r3, [r4, #20]
 8004978:	3320      	adds	r3, #32
 800497a:	7663      	strb	r3, [r4, #25]
 800497c:	3310      	adds	r3, #16
 800497e:	76a3      	strb	r3, [r4, #26]
 8004980:	9507      	str	r5, [sp, #28]
 8004982:	0035      	movs	r5, r6
 8004984:	782b      	ldrb	r3, [r5, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <_svfiprintf_r+0x52>
 800498a:	2b25      	cmp	r3, #37	; 0x25
 800498c:	d147      	bne.n	8004a1e <_svfiprintf_r+0xe2>
 800498e:	1bab      	subs	r3, r5, r6
 8004990:	9305      	str	r3, [sp, #20]
 8004992:	42b5      	cmp	r5, r6
 8004994:	d00c      	beq.n	80049b0 <_svfiprintf_r+0x74>
 8004996:	0032      	movs	r2, r6
 8004998:	0039      	movs	r1, r7
 800499a:	9803      	ldr	r0, [sp, #12]
 800499c:	f7ff ff6c 	bl	8004878 <__ssputs_r>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d100      	bne.n	80049a6 <_svfiprintf_r+0x6a>
 80049a4:	e0ae      	b.n	8004b04 <_svfiprintf_r+0x1c8>
 80049a6:	6962      	ldr	r2, [r4, #20]
 80049a8:	9b05      	ldr	r3, [sp, #20]
 80049aa:	4694      	mov	ip, r2
 80049ac:	4463      	add	r3, ip
 80049ae:	6163      	str	r3, [r4, #20]
 80049b0:	782b      	ldrb	r3, [r5, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d100      	bne.n	80049b8 <_svfiprintf_r+0x7c>
 80049b6:	e0a5      	b.n	8004b04 <_svfiprintf_r+0x1c8>
 80049b8:	2201      	movs	r2, #1
 80049ba:	2300      	movs	r3, #0
 80049bc:	4252      	negs	r2, r2
 80049be:	6062      	str	r2, [r4, #4]
 80049c0:	a904      	add	r1, sp, #16
 80049c2:	3254      	adds	r2, #84	; 0x54
 80049c4:	1852      	adds	r2, r2, r1
 80049c6:	1c6e      	adds	r6, r5, #1
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	60e3      	str	r3, [r4, #12]
 80049cc:	60a3      	str	r3, [r4, #8]
 80049ce:	7013      	strb	r3, [r2, #0]
 80049d0:	65a3      	str	r3, [r4, #88]	; 0x58
 80049d2:	2205      	movs	r2, #5
 80049d4:	7831      	ldrb	r1, [r6, #0]
 80049d6:	4854      	ldr	r0, [pc, #336]	; (8004b28 <_svfiprintf_r+0x1ec>)
 80049d8:	f000 fa32 	bl	8004e40 <memchr>
 80049dc:	1c75      	adds	r5, r6, #1
 80049de:	2800      	cmp	r0, #0
 80049e0:	d11f      	bne.n	8004a22 <_svfiprintf_r+0xe6>
 80049e2:	6822      	ldr	r2, [r4, #0]
 80049e4:	06d3      	lsls	r3, r2, #27
 80049e6:	d504      	bpl.n	80049f2 <_svfiprintf_r+0xb6>
 80049e8:	2353      	movs	r3, #83	; 0x53
 80049ea:	a904      	add	r1, sp, #16
 80049ec:	185b      	adds	r3, r3, r1
 80049ee:	2120      	movs	r1, #32
 80049f0:	7019      	strb	r1, [r3, #0]
 80049f2:	0713      	lsls	r3, r2, #28
 80049f4:	d504      	bpl.n	8004a00 <_svfiprintf_r+0xc4>
 80049f6:	2353      	movs	r3, #83	; 0x53
 80049f8:	a904      	add	r1, sp, #16
 80049fa:	185b      	adds	r3, r3, r1
 80049fc:	212b      	movs	r1, #43	; 0x2b
 80049fe:	7019      	strb	r1, [r3, #0]
 8004a00:	7833      	ldrb	r3, [r6, #0]
 8004a02:	2b2a      	cmp	r3, #42	; 0x2a
 8004a04:	d016      	beq.n	8004a34 <_svfiprintf_r+0xf8>
 8004a06:	0035      	movs	r5, r6
 8004a08:	2100      	movs	r1, #0
 8004a0a:	200a      	movs	r0, #10
 8004a0c:	68e3      	ldr	r3, [r4, #12]
 8004a0e:	782a      	ldrb	r2, [r5, #0]
 8004a10:	1c6e      	adds	r6, r5, #1
 8004a12:	3a30      	subs	r2, #48	; 0x30
 8004a14:	2a09      	cmp	r2, #9
 8004a16:	d94e      	bls.n	8004ab6 <_svfiprintf_r+0x17a>
 8004a18:	2900      	cmp	r1, #0
 8004a1a:	d111      	bne.n	8004a40 <_svfiprintf_r+0x104>
 8004a1c:	e017      	b.n	8004a4e <_svfiprintf_r+0x112>
 8004a1e:	3501      	adds	r5, #1
 8004a20:	e7b0      	b.n	8004984 <_svfiprintf_r+0x48>
 8004a22:	4b41      	ldr	r3, [pc, #260]	; (8004b28 <_svfiprintf_r+0x1ec>)
 8004a24:	6822      	ldr	r2, [r4, #0]
 8004a26:	1ac0      	subs	r0, r0, r3
 8004a28:	2301      	movs	r3, #1
 8004a2a:	4083      	lsls	r3, r0
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	002e      	movs	r6, r5
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	e7ce      	b.n	80049d2 <_svfiprintf_r+0x96>
 8004a34:	9b07      	ldr	r3, [sp, #28]
 8004a36:	1d19      	adds	r1, r3, #4
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	9107      	str	r1, [sp, #28]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	db01      	blt.n	8004a44 <_svfiprintf_r+0x108>
 8004a40:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a42:	e004      	b.n	8004a4e <_svfiprintf_r+0x112>
 8004a44:	425b      	negs	r3, r3
 8004a46:	60e3      	str	r3, [r4, #12]
 8004a48:	2302      	movs	r3, #2
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	6023      	str	r3, [r4, #0]
 8004a4e:	782b      	ldrb	r3, [r5, #0]
 8004a50:	2b2e      	cmp	r3, #46	; 0x2e
 8004a52:	d10a      	bne.n	8004a6a <_svfiprintf_r+0x12e>
 8004a54:	786b      	ldrb	r3, [r5, #1]
 8004a56:	2b2a      	cmp	r3, #42	; 0x2a
 8004a58:	d135      	bne.n	8004ac6 <_svfiprintf_r+0x18a>
 8004a5a:	9b07      	ldr	r3, [sp, #28]
 8004a5c:	3502      	adds	r5, #2
 8004a5e:	1d1a      	adds	r2, r3, #4
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	9207      	str	r2, [sp, #28]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	db2b      	blt.n	8004ac0 <_svfiprintf_r+0x184>
 8004a68:	9309      	str	r3, [sp, #36]	; 0x24
 8004a6a:	4e30      	ldr	r6, [pc, #192]	; (8004b2c <_svfiprintf_r+0x1f0>)
 8004a6c:	2203      	movs	r2, #3
 8004a6e:	0030      	movs	r0, r6
 8004a70:	7829      	ldrb	r1, [r5, #0]
 8004a72:	f000 f9e5 	bl	8004e40 <memchr>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d006      	beq.n	8004a88 <_svfiprintf_r+0x14c>
 8004a7a:	2340      	movs	r3, #64	; 0x40
 8004a7c:	1b80      	subs	r0, r0, r6
 8004a7e:	4083      	lsls	r3, r0
 8004a80:	6822      	ldr	r2, [r4, #0]
 8004a82:	3501      	adds	r5, #1
 8004a84:	4313      	orrs	r3, r2
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	7829      	ldrb	r1, [r5, #0]
 8004a8a:	2206      	movs	r2, #6
 8004a8c:	4828      	ldr	r0, [pc, #160]	; (8004b30 <_svfiprintf_r+0x1f4>)
 8004a8e:	1c6e      	adds	r6, r5, #1
 8004a90:	7621      	strb	r1, [r4, #24]
 8004a92:	f000 f9d5 	bl	8004e40 <memchr>
 8004a96:	2800      	cmp	r0, #0
 8004a98:	d03c      	beq.n	8004b14 <_svfiprintf_r+0x1d8>
 8004a9a:	4b26      	ldr	r3, [pc, #152]	; (8004b34 <_svfiprintf_r+0x1f8>)
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d125      	bne.n	8004aec <_svfiprintf_r+0x1b0>
 8004aa0:	2207      	movs	r2, #7
 8004aa2:	9b07      	ldr	r3, [sp, #28]
 8004aa4:	3307      	adds	r3, #7
 8004aa6:	4393      	bics	r3, r2
 8004aa8:	3308      	adds	r3, #8
 8004aaa:	9307      	str	r3, [sp, #28]
 8004aac:	6963      	ldr	r3, [r4, #20]
 8004aae:	9a04      	ldr	r2, [sp, #16]
 8004ab0:	189b      	adds	r3, r3, r2
 8004ab2:	6163      	str	r3, [r4, #20]
 8004ab4:	e765      	b.n	8004982 <_svfiprintf_r+0x46>
 8004ab6:	4343      	muls	r3, r0
 8004ab8:	0035      	movs	r5, r6
 8004aba:	2101      	movs	r1, #1
 8004abc:	189b      	adds	r3, r3, r2
 8004abe:	e7a6      	b.n	8004a0e <_svfiprintf_r+0xd2>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	425b      	negs	r3, r3
 8004ac4:	e7d0      	b.n	8004a68 <_svfiprintf_r+0x12c>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	200a      	movs	r0, #10
 8004aca:	001a      	movs	r2, r3
 8004acc:	3501      	adds	r5, #1
 8004ace:	6063      	str	r3, [r4, #4]
 8004ad0:	7829      	ldrb	r1, [r5, #0]
 8004ad2:	1c6e      	adds	r6, r5, #1
 8004ad4:	3930      	subs	r1, #48	; 0x30
 8004ad6:	2909      	cmp	r1, #9
 8004ad8:	d903      	bls.n	8004ae2 <_svfiprintf_r+0x1a6>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0c5      	beq.n	8004a6a <_svfiprintf_r+0x12e>
 8004ade:	9209      	str	r2, [sp, #36]	; 0x24
 8004ae0:	e7c3      	b.n	8004a6a <_svfiprintf_r+0x12e>
 8004ae2:	4342      	muls	r2, r0
 8004ae4:	0035      	movs	r5, r6
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	1852      	adds	r2, r2, r1
 8004aea:	e7f1      	b.n	8004ad0 <_svfiprintf_r+0x194>
 8004aec:	ab07      	add	r3, sp, #28
 8004aee:	9300      	str	r3, [sp, #0]
 8004af0:	003a      	movs	r2, r7
 8004af2:	0021      	movs	r1, r4
 8004af4:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <_svfiprintf_r+0x1fc>)
 8004af6:	9803      	ldr	r0, [sp, #12]
 8004af8:	e000      	b.n	8004afc <_svfiprintf_r+0x1c0>
 8004afa:	bf00      	nop
 8004afc:	9004      	str	r0, [sp, #16]
 8004afe:	9b04      	ldr	r3, [sp, #16]
 8004b00:	3301      	adds	r3, #1
 8004b02:	d1d3      	bne.n	8004aac <_svfiprintf_r+0x170>
 8004b04:	89bb      	ldrh	r3, [r7, #12]
 8004b06:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004b08:	065b      	lsls	r3, r3, #25
 8004b0a:	d400      	bmi.n	8004b0e <_svfiprintf_r+0x1d2>
 8004b0c:	e72d      	b.n	800496a <_svfiprintf_r+0x2e>
 8004b0e:	2001      	movs	r0, #1
 8004b10:	4240      	negs	r0, r0
 8004b12:	e72a      	b.n	800496a <_svfiprintf_r+0x2e>
 8004b14:	ab07      	add	r3, sp, #28
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	003a      	movs	r2, r7
 8004b1a:	0021      	movs	r1, r4
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <_svfiprintf_r+0x1fc>)
 8004b1e:	9803      	ldr	r0, [sp, #12]
 8004b20:	f000 f87c 	bl	8004c1c <_printf_i>
 8004b24:	e7ea      	b.n	8004afc <_svfiprintf_r+0x1c0>
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	08005208 	.word	0x08005208
 8004b2c:	0800520e 	.word	0x0800520e
 8004b30:	08005212 	.word	0x08005212
 8004b34:	00000000 	.word	0x00000000
 8004b38:	08004879 	.word	0x08004879

08004b3c <_printf_common>:
 8004b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b3e:	0015      	movs	r5, r2
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	688a      	ldr	r2, [r1, #8]
 8004b44:	690b      	ldr	r3, [r1, #16]
 8004b46:	000c      	movs	r4, r1
 8004b48:	9000      	str	r0, [sp, #0]
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	da00      	bge.n	8004b50 <_printf_common+0x14>
 8004b4e:	0013      	movs	r3, r2
 8004b50:	0022      	movs	r2, r4
 8004b52:	602b      	str	r3, [r5, #0]
 8004b54:	3243      	adds	r2, #67	; 0x43
 8004b56:	7812      	ldrb	r2, [r2, #0]
 8004b58:	2a00      	cmp	r2, #0
 8004b5a:	d001      	beq.n	8004b60 <_printf_common+0x24>
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	602b      	str	r3, [r5, #0]
 8004b60:	6823      	ldr	r3, [r4, #0]
 8004b62:	069b      	lsls	r3, r3, #26
 8004b64:	d502      	bpl.n	8004b6c <_printf_common+0x30>
 8004b66:	682b      	ldr	r3, [r5, #0]
 8004b68:	3302      	adds	r3, #2
 8004b6a:	602b      	str	r3, [r5, #0]
 8004b6c:	6822      	ldr	r2, [r4, #0]
 8004b6e:	2306      	movs	r3, #6
 8004b70:	0017      	movs	r7, r2
 8004b72:	401f      	ands	r7, r3
 8004b74:	421a      	tst	r2, r3
 8004b76:	d027      	beq.n	8004bc8 <_printf_common+0x8c>
 8004b78:	0023      	movs	r3, r4
 8004b7a:	3343      	adds	r3, #67	; 0x43
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	1e5a      	subs	r2, r3, #1
 8004b80:	4193      	sbcs	r3, r2
 8004b82:	6822      	ldr	r2, [r4, #0]
 8004b84:	0692      	lsls	r2, r2, #26
 8004b86:	d430      	bmi.n	8004bea <_printf_common+0xae>
 8004b88:	0022      	movs	r2, r4
 8004b8a:	9901      	ldr	r1, [sp, #4]
 8004b8c:	9800      	ldr	r0, [sp, #0]
 8004b8e:	9e08      	ldr	r6, [sp, #32]
 8004b90:	3243      	adds	r2, #67	; 0x43
 8004b92:	47b0      	blx	r6
 8004b94:	1c43      	adds	r3, r0, #1
 8004b96:	d025      	beq.n	8004be4 <_printf_common+0xa8>
 8004b98:	2306      	movs	r3, #6
 8004b9a:	6820      	ldr	r0, [r4, #0]
 8004b9c:	682a      	ldr	r2, [r5, #0]
 8004b9e:	68e1      	ldr	r1, [r4, #12]
 8004ba0:	2500      	movs	r5, #0
 8004ba2:	4003      	ands	r3, r0
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d103      	bne.n	8004bb0 <_printf_common+0x74>
 8004ba8:	1a8d      	subs	r5, r1, r2
 8004baa:	43eb      	mvns	r3, r5
 8004bac:	17db      	asrs	r3, r3, #31
 8004bae:	401d      	ands	r5, r3
 8004bb0:	68a3      	ldr	r3, [r4, #8]
 8004bb2:	6922      	ldr	r2, [r4, #16]
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	dd01      	ble.n	8004bbc <_printf_common+0x80>
 8004bb8:	1a9b      	subs	r3, r3, r2
 8004bba:	18ed      	adds	r5, r5, r3
 8004bbc:	2700      	movs	r7, #0
 8004bbe:	42bd      	cmp	r5, r7
 8004bc0:	d120      	bne.n	8004c04 <_printf_common+0xc8>
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	e010      	b.n	8004be8 <_printf_common+0xac>
 8004bc6:	3701      	adds	r7, #1
 8004bc8:	68e3      	ldr	r3, [r4, #12]
 8004bca:	682a      	ldr	r2, [r5, #0]
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	42bb      	cmp	r3, r7
 8004bd0:	ddd2      	ble.n	8004b78 <_printf_common+0x3c>
 8004bd2:	0022      	movs	r2, r4
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	9901      	ldr	r1, [sp, #4]
 8004bd8:	9800      	ldr	r0, [sp, #0]
 8004bda:	9e08      	ldr	r6, [sp, #32]
 8004bdc:	3219      	adds	r2, #25
 8004bde:	47b0      	blx	r6
 8004be0:	1c43      	adds	r3, r0, #1
 8004be2:	d1f0      	bne.n	8004bc6 <_printf_common+0x8a>
 8004be4:	2001      	movs	r0, #1
 8004be6:	4240      	negs	r0, r0
 8004be8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004bea:	2030      	movs	r0, #48	; 0x30
 8004bec:	18e1      	adds	r1, r4, r3
 8004bee:	3143      	adds	r1, #67	; 0x43
 8004bf0:	7008      	strb	r0, [r1, #0]
 8004bf2:	0021      	movs	r1, r4
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	3145      	adds	r1, #69	; 0x45
 8004bf8:	7809      	ldrb	r1, [r1, #0]
 8004bfa:	18a2      	adds	r2, r4, r2
 8004bfc:	3243      	adds	r2, #67	; 0x43
 8004bfe:	3302      	adds	r3, #2
 8004c00:	7011      	strb	r1, [r2, #0]
 8004c02:	e7c1      	b.n	8004b88 <_printf_common+0x4c>
 8004c04:	0022      	movs	r2, r4
 8004c06:	2301      	movs	r3, #1
 8004c08:	9901      	ldr	r1, [sp, #4]
 8004c0a:	9800      	ldr	r0, [sp, #0]
 8004c0c:	9e08      	ldr	r6, [sp, #32]
 8004c0e:	321a      	adds	r2, #26
 8004c10:	47b0      	blx	r6
 8004c12:	1c43      	adds	r3, r0, #1
 8004c14:	d0e6      	beq.n	8004be4 <_printf_common+0xa8>
 8004c16:	3701      	adds	r7, #1
 8004c18:	e7d1      	b.n	8004bbe <_printf_common+0x82>
	...

08004c1c <_printf_i>:
 8004c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c1e:	b08b      	sub	sp, #44	; 0x2c
 8004c20:	9206      	str	r2, [sp, #24]
 8004c22:	000a      	movs	r2, r1
 8004c24:	3243      	adds	r2, #67	; 0x43
 8004c26:	9307      	str	r3, [sp, #28]
 8004c28:	9005      	str	r0, [sp, #20]
 8004c2a:	9204      	str	r2, [sp, #16]
 8004c2c:	7e0a      	ldrb	r2, [r1, #24]
 8004c2e:	000c      	movs	r4, r1
 8004c30:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004c32:	2a78      	cmp	r2, #120	; 0x78
 8004c34:	d807      	bhi.n	8004c46 <_printf_i+0x2a>
 8004c36:	2a62      	cmp	r2, #98	; 0x62
 8004c38:	d809      	bhi.n	8004c4e <_printf_i+0x32>
 8004c3a:	2a00      	cmp	r2, #0
 8004c3c:	d100      	bne.n	8004c40 <_printf_i+0x24>
 8004c3e:	e0c1      	b.n	8004dc4 <_printf_i+0x1a8>
 8004c40:	2a58      	cmp	r2, #88	; 0x58
 8004c42:	d100      	bne.n	8004c46 <_printf_i+0x2a>
 8004c44:	e08c      	b.n	8004d60 <_printf_i+0x144>
 8004c46:	0026      	movs	r6, r4
 8004c48:	3642      	adds	r6, #66	; 0x42
 8004c4a:	7032      	strb	r2, [r6, #0]
 8004c4c:	e022      	b.n	8004c94 <_printf_i+0x78>
 8004c4e:	0010      	movs	r0, r2
 8004c50:	3863      	subs	r0, #99	; 0x63
 8004c52:	2815      	cmp	r0, #21
 8004c54:	d8f7      	bhi.n	8004c46 <_printf_i+0x2a>
 8004c56:	f7fb fa5d 	bl	8000114 <__gnu_thumb1_case_shi>
 8004c5a:	0016      	.short	0x0016
 8004c5c:	fff6001f 	.word	0xfff6001f
 8004c60:	fff6fff6 	.word	0xfff6fff6
 8004c64:	001ffff6 	.word	0x001ffff6
 8004c68:	fff6fff6 	.word	0xfff6fff6
 8004c6c:	fff6fff6 	.word	0xfff6fff6
 8004c70:	003600a8 	.word	0x003600a8
 8004c74:	fff6009a 	.word	0xfff6009a
 8004c78:	00b9fff6 	.word	0x00b9fff6
 8004c7c:	0036fff6 	.word	0x0036fff6
 8004c80:	fff6fff6 	.word	0xfff6fff6
 8004c84:	009e      	.short	0x009e
 8004c86:	0026      	movs	r6, r4
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	3642      	adds	r6, #66	; 0x42
 8004c8c:	1d11      	adds	r1, r2, #4
 8004c8e:	6019      	str	r1, [r3, #0]
 8004c90:	6813      	ldr	r3, [r2, #0]
 8004c92:	7033      	strb	r3, [r6, #0]
 8004c94:	2301      	movs	r3, #1
 8004c96:	e0a7      	b.n	8004de8 <_printf_i+0x1cc>
 8004c98:	6808      	ldr	r0, [r1, #0]
 8004c9a:	6819      	ldr	r1, [r3, #0]
 8004c9c:	1d0a      	adds	r2, r1, #4
 8004c9e:	0605      	lsls	r5, r0, #24
 8004ca0:	d50b      	bpl.n	8004cba <_printf_i+0x9e>
 8004ca2:	680d      	ldr	r5, [r1, #0]
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	2d00      	cmp	r5, #0
 8004ca8:	da03      	bge.n	8004cb2 <_printf_i+0x96>
 8004caa:	232d      	movs	r3, #45	; 0x2d
 8004cac:	9a04      	ldr	r2, [sp, #16]
 8004cae:	426d      	negs	r5, r5
 8004cb0:	7013      	strb	r3, [r2, #0]
 8004cb2:	4b61      	ldr	r3, [pc, #388]	; (8004e38 <_printf_i+0x21c>)
 8004cb4:	270a      	movs	r7, #10
 8004cb6:	9303      	str	r3, [sp, #12]
 8004cb8:	e01b      	b.n	8004cf2 <_printf_i+0xd6>
 8004cba:	680d      	ldr	r5, [r1, #0]
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	0641      	lsls	r1, r0, #25
 8004cc0:	d5f1      	bpl.n	8004ca6 <_printf_i+0x8a>
 8004cc2:	b22d      	sxth	r5, r5
 8004cc4:	e7ef      	b.n	8004ca6 <_printf_i+0x8a>
 8004cc6:	680d      	ldr	r5, [r1, #0]
 8004cc8:	6819      	ldr	r1, [r3, #0]
 8004cca:	1d08      	adds	r0, r1, #4
 8004ccc:	6018      	str	r0, [r3, #0]
 8004cce:	062e      	lsls	r6, r5, #24
 8004cd0:	d501      	bpl.n	8004cd6 <_printf_i+0xba>
 8004cd2:	680d      	ldr	r5, [r1, #0]
 8004cd4:	e003      	b.n	8004cde <_printf_i+0xc2>
 8004cd6:	066d      	lsls	r5, r5, #25
 8004cd8:	d5fb      	bpl.n	8004cd2 <_printf_i+0xb6>
 8004cda:	680d      	ldr	r5, [r1, #0]
 8004cdc:	b2ad      	uxth	r5, r5
 8004cde:	4b56      	ldr	r3, [pc, #344]	; (8004e38 <_printf_i+0x21c>)
 8004ce0:	2708      	movs	r7, #8
 8004ce2:	9303      	str	r3, [sp, #12]
 8004ce4:	2a6f      	cmp	r2, #111	; 0x6f
 8004ce6:	d000      	beq.n	8004cea <_printf_i+0xce>
 8004ce8:	3702      	adds	r7, #2
 8004cea:	0023      	movs	r3, r4
 8004cec:	2200      	movs	r2, #0
 8004cee:	3343      	adds	r3, #67	; 0x43
 8004cf0:	701a      	strb	r2, [r3, #0]
 8004cf2:	6863      	ldr	r3, [r4, #4]
 8004cf4:	60a3      	str	r3, [r4, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	db03      	blt.n	8004d02 <_printf_i+0xe6>
 8004cfa:	2204      	movs	r2, #4
 8004cfc:	6821      	ldr	r1, [r4, #0]
 8004cfe:	4391      	bics	r1, r2
 8004d00:	6021      	str	r1, [r4, #0]
 8004d02:	2d00      	cmp	r5, #0
 8004d04:	d102      	bne.n	8004d0c <_printf_i+0xf0>
 8004d06:	9e04      	ldr	r6, [sp, #16]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00c      	beq.n	8004d26 <_printf_i+0x10a>
 8004d0c:	9e04      	ldr	r6, [sp, #16]
 8004d0e:	0028      	movs	r0, r5
 8004d10:	0039      	movs	r1, r7
 8004d12:	f7fb fa8f 	bl	8000234 <__aeabi_uidivmod>
 8004d16:	9b03      	ldr	r3, [sp, #12]
 8004d18:	3e01      	subs	r6, #1
 8004d1a:	5c5b      	ldrb	r3, [r3, r1]
 8004d1c:	7033      	strb	r3, [r6, #0]
 8004d1e:	002b      	movs	r3, r5
 8004d20:	0005      	movs	r5, r0
 8004d22:	429f      	cmp	r7, r3
 8004d24:	d9f3      	bls.n	8004d0e <_printf_i+0xf2>
 8004d26:	2f08      	cmp	r7, #8
 8004d28:	d109      	bne.n	8004d3e <_printf_i+0x122>
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	07db      	lsls	r3, r3, #31
 8004d2e:	d506      	bpl.n	8004d3e <_printf_i+0x122>
 8004d30:	6863      	ldr	r3, [r4, #4]
 8004d32:	6922      	ldr	r2, [r4, #16]
 8004d34:	4293      	cmp	r3, r2
 8004d36:	dc02      	bgt.n	8004d3e <_printf_i+0x122>
 8004d38:	2330      	movs	r3, #48	; 0x30
 8004d3a:	3e01      	subs	r6, #1
 8004d3c:	7033      	strb	r3, [r6, #0]
 8004d3e:	9b04      	ldr	r3, [sp, #16]
 8004d40:	1b9b      	subs	r3, r3, r6
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	9b07      	ldr	r3, [sp, #28]
 8004d46:	0021      	movs	r1, r4
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	9805      	ldr	r0, [sp, #20]
 8004d4c:	9b06      	ldr	r3, [sp, #24]
 8004d4e:	aa09      	add	r2, sp, #36	; 0x24
 8004d50:	f7ff fef4 	bl	8004b3c <_printf_common>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d14c      	bne.n	8004df2 <_printf_i+0x1d6>
 8004d58:	2001      	movs	r0, #1
 8004d5a:	4240      	negs	r0, r0
 8004d5c:	b00b      	add	sp, #44	; 0x2c
 8004d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d60:	3145      	adds	r1, #69	; 0x45
 8004d62:	700a      	strb	r2, [r1, #0]
 8004d64:	4a34      	ldr	r2, [pc, #208]	; (8004e38 <_printf_i+0x21c>)
 8004d66:	9203      	str	r2, [sp, #12]
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	6821      	ldr	r1, [r4, #0]
 8004d6c:	ca20      	ldmia	r2!, {r5}
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	0608      	lsls	r0, r1, #24
 8004d72:	d516      	bpl.n	8004da2 <_printf_i+0x186>
 8004d74:	07cb      	lsls	r3, r1, #31
 8004d76:	d502      	bpl.n	8004d7e <_printf_i+0x162>
 8004d78:	2320      	movs	r3, #32
 8004d7a:	4319      	orrs	r1, r3
 8004d7c:	6021      	str	r1, [r4, #0]
 8004d7e:	2710      	movs	r7, #16
 8004d80:	2d00      	cmp	r5, #0
 8004d82:	d1b2      	bne.n	8004cea <_printf_i+0xce>
 8004d84:	2320      	movs	r3, #32
 8004d86:	6822      	ldr	r2, [r4, #0]
 8004d88:	439a      	bics	r2, r3
 8004d8a:	6022      	str	r2, [r4, #0]
 8004d8c:	e7ad      	b.n	8004cea <_printf_i+0xce>
 8004d8e:	2220      	movs	r2, #32
 8004d90:	6809      	ldr	r1, [r1, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	6022      	str	r2, [r4, #0]
 8004d96:	0022      	movs	r2, r4
 8004d98:	2178      	movs	r1, #120	; 0x78
 8004d9a:	3245      	adds	r2, #69	; 0x45
 8004d9c:	7011      	strb	r1, [r2, #0]
 8004d9e:	4a27      	ldr	r2, [pc, #156]	; (8004e3c <_printf_i+0x220>)
 8004da0:	e7e1      	b.n	8004d66 <_printf_i+0x14a>
 8004da2:	0648      	lsls	r0, r1, #25
 8004da4:	d5e6      	bpl.n	8004d74 <_printf_i+0x158>
 8004da6:	b2ad      	uxth	r5, r5
 8004da8:	e7e4      	b.n	8004d74 <_printf_i+0x158>
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	680d      	ldr	r5, [r1, #0]
 8004dae:	1d10      	adds	r0, r2, #4
 8004db0:	6949      	ldr	r1, [r1, #20]
 8004db2:	6018      	str	r0, [r3, #0]
 8004db4:	6813      	ldr	r3, [r2, #0]
 8004db6:	062e      	lsls	r6, r5, #24
 8004db8:	d501      	bpl.n	8004dbe <_printf_i+0x1a2>
 8004dba:	6019      	str	r1, [r3, #0]
 8004dbc:	e002      	b.n	8004dc4 <_printf_i+0x1a8>
 8004dbe:	066d      	lsls	r5, r5, #25
 8004dc0:	d5fb      	bpl.n	8004dba <_printf_i+0x19e>
 8004dc2:	8019      	strh	r1, [r3, #0]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	9e04      	ldr	r6, [sp, #16]
 8004dc8:	6123      	str	r3, [r4, #16]
 8004dca:	e7bb      	b.n	8004d44 <_printf_i+0x128>
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	1d11      	adds	r1, r2, #4
 8004dd0:	6019      	str	r1, [r3, #0]
 8004dd2:	6816      	ldr	r6, [r2, #0]
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	0030      	movs	r0, r6
 8004dd8:	6862      	ldr	r2, [r4, #4]
 8004dda:	f000 f831 	bl	8004e40 <memchr>
 8004dde:	2800      	cmp	r0, #0
 8004de0:	d001      	beq.n	8004de6 <_printf_i+0x1ca>
 8004de2:	1b80      	subs	r0, r0, r6
 8004de4:	6060      	str	r0, [r4, #4]
 8004de6:	6863      	ldr	r3, [r4, #4]
 8004de8:	6123      	str	r3, [r4, #16]
 8004dea:	2300      	movs	r3, #0
 8004dec:	9a04      	ldr	r2, [sp, #16]
 8004dee:	7013      	strb	r3, [r2, #0]
 8004df0:	e7a8      	b.n	8004d44 <_printf_i+0x128>
 8004df2:	6923      	ldr	r3, [r4, #16]
 8004df4:	0032      	movs	r2, r6
 8004df6:	9906      	ldr	r1, [sp, #24]
 8004df8:	9805      	ldr	r0, [sp, #20]
 8004dfa:	9d07      	ldr	r5, [sp, #28]
 8004dfc:	47a8      	blx	r5
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	d0aa      	beq.n	8004d58 <_printf_i+0x13c>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	079b      	lsls	r3, r3, #30
 8004e06:	d415      	bmi.n	8004e34 <_printf_i+0x218>
 8004e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e0a:	68e0      	ldr	r0, [r4, #12]
 8004e0c:	4298      	cmp	r0, r3
 8004e0e:	daa5      	bge.n	8004d5c <_printf_i+0x140>
 8004e10:	0018      	movs	r0, r3
 8004e12:	e7a3      	b.n	8004d5c <_printf_i+0x140>
 8004e14:	0022      	movs	r2, r4
 8004e16:	2301      	movs	r3, #1
 8004e18:	9906      	ldr	r1, [sp, #24]
 8004e1a:	9805      	ldr	r0, [sp, #20]
 8004e1c:	9e07      	ldr	r6, [sp, #28]
 8004e1e:	3219      	adds	r2, #25
 8004e20:	47b0      	blx	r6
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	d098      	beq.n	8004d58 <_printf_i+0x13c>
 8004e26:	3501      	adds	r5, #1
 8004e28:	68e3      	ldr	r3, [r4, #12]
 8004e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	42ab      	cmp	r3, r5
 8004e30:	dcf0      	bgt.n	8004e14 <_printf_i+0x1f8>
 8004e32:	e7e9      	b.n	8004e08 <_printf_i+0x1ec>
 8004e34:	2500      	movs	r5, #0
 8004e36:	e7f7      	b.n	8004e28 <_printf_i+0x20c>
 8004e38:	08005219 	.word	0x08005219
 8004e3c:	0800522a 	.word	0x0800522a

08004e40 <memchr>:
 8004e40:	b2c9      	uxtb	r1, r1
 8004e42:	1882      	adds	r2, r0, r2
 8004e44:	4290      	cmp	r0, r2
 8004e46:	d101      	bne.n	8004e4c <memchr+0xc>
 8004e48:	2000      	movs	r0, #0
 8004e4a:	4770      	bx	lr
 8004e4c:	7803      	ldrb	r3, [r0, #0]
 8004e4e:	428b      	cmp	r3, r1
 8004e50:	d0fb      	beq.n	8004e4a <memchr+0xa>
 8004e52:	3001      	adds	r0, #1
 8004e54:	e7f6      	b.n	8004e44 <memchr+0x4>

08004e56 <memmove>:
 8004e56:	b510      	push	{r4, lr}
 8004e58:	4288      	cmp	r0, r1
 8004e5a:	d902      	bls.n	8004e62 <memmove+0xc>
 8004e5c:	188b      	adds	r3, r1, r2
 8004e5e:	4298      	cmp	r0, r3
 8004e60:	d303      	bcc.n	8004e6a <memmove+0x14>
 8004e62:	2300      	movs	r3, #0
 8004e64:	e007      	b.n	8004e76 <memmove+0x20>
 8004e66:	5c8b      	ldrb	r3, [r1, r2]
 8004e68:	5483      	strb	r3, [r0, r2]
 8004e6a:	3a01      	subs	r2, #1
 8004e6c:	d2fb      	bcs.n	8004e66 <memmove+0x10>
 8004e6e:	bd10      	pop	{r4, pc}
 8004e70:	5ccc      	ldrb	r4, [r1, r3]
 8004e72:	54c4      	strb	r4, [r0, r3]
 8004e74:	3301      	adds	r3, #1
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d1fa      	bne.n	8004e70 <memmove+0x1a>
 8004e7a:	e7f8      	b.n	8004e6e <memmove+0x18>

08004e7c <_free_r>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	0005      	movs	r5, r0
 8004e80:	2900      	cmp	r1, #0
 8004e82:	d010      	beq.n	8004ea6 <_free_r+0x2a>
 8004e84:	1f0c      	subs	r4, r1, #4
 8004e86:	6823      	ldr	r3, [r4, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	da00      	bge.n	8004e8e <_free_r+0x12>
 8004e8c:	18e4      	adds	r4, r4, r3
 8004e8e:	0028      	movs	r0, r5
 8004e90:	f000 f918 	bl	80050c4 <__malloc_lock>
 8004e94:	4a1d      	ldr	r2, [pc, #116]	; (8004f0c <_free_r+0x90>)
 8004e96:	6813      	ldr	r3, [r2, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d105      	bne.n	8004ea8 <_free_r+0x2c>
 8004e9c:	6063      	str	r3, [r4, #4]
 8004e9e:	6014      	str	r4, [r2, #0]
 8004ea0:	0028      	movs	r0, r5
 8004ea2:	f000 f917 	bl	80050d4 <__malloc_unlock>
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	42a3      	cmp	r3, r4
 8004eaa:	d908      	bls.n	8004ebe <_free_r+0x42>
 8004eac:	6821      	ldr	r1, [r4, #0]
 8004eae:	1860      	adds	r0, r4, r1
 8004eb0:	4283      	cmp	r3, r0
 8004eb2:	d1f3      	bne.n	8004e9c <_free_r+0x20>
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	1841      	adds	r1, r0, r1
 8004eba:	6021      	str	r1, [r4, #0]
 8004ebc:	e7ee      	b.n	8004e9c <_free_r+0x20>
 8004ebe:	001a      	movs	r2, r3
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d001      	beq.n	8004eca <_free_r+0x4e>
 8004ec6:	42a3      	cmp	r3, r4
 8004ec8:	d9f9      	bls.n	8004ebe <_free_r+0x42>
 8004eca:	6811      	ldr	r1, [r2, #0]
 8004ecc:	1850      	adds	r0, r2, r1
 8004ece:	42a0      	cmp	r0, r4
 8004ed0:	d10b      	bne.n	8004eea <_free_r+0x6e>
 8004ed2:	6820      	ldr	r0, [r4, #0]
 8004ed4:	1809      	adds	r1, r1, r0
 8004ed6:	1850      	adds	r0, r2, r1
 8004ed8:	6011      	str	r1, [r2, #0]
 8004eda:	4283      	cmp	r3, r0
 8004edc:	d1e0      	bne.n	8004ea0 <_free_r+0x24>
 8004ede:	6818      	ldr	r0, [r3, #0]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	1841      	adds	r1, r0, r1
 8004ee4:	6011      	str	r1, [r2, #0]
 8004ee6:	6053      	str	r3, [r2, #4]
 8004ee8:	e7da      	b.n	8004ea0 <_free_r+0x24>
 8004eea:	42a0      	cmp	r0, r4
 8004eec:	d902      	bls.n	8004ef4 <_free_r+0x78>
 8004eee:	230c      	movs	r3, #12
 8004ef0:	602b      	str	r3, [r5, #0]
 8004ef2:	e7d5      	b.n	8004ea0 <_free_r+0x24>
 8004ef4:	6821      	ldr	r1, [r4, #0]
 8004ef6:	1860      	adds	r0, r4, r1
 8004ef8:	4283      	cmp	r3, r0
 8004efa:	d103      	bne.n	8004f04 <_free_r+0x88>
 8004efc:	6818      	ldr	r0, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	1841      	adds	r1, r0, r1
 8004f02:	6021      	str	r1, [r4, #0]
 8004f04:	6063      	str	r3, [r4, #4]
 8004f06:	6054      	str	r4, [r2, #4]
 8004f08:	e7ca      	b.n	8004ea0 <_free_r+0x24>
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	20002530 	.word	0x20002530

08004f10 <sbrk_aligned>:
 8004f10:	b570      	push	{r4, r5, r6, lr}
 8004f12:	4e0f      	ldr	r6, [pc, #60]	; (8004f50 <sbrk_aligned+0x40>)
 8004f14:	000d      	movs	r5, r1
 8004f16:	6831      	ldr	r1, [r6, #0]
 8004f18:	0004      	movs	r4, r0
 8004f1a:	2900      	cmp	r1, #0
 8004f1c:	d102      	bne.n	8004f24 <sbrk_aligned+0x14>
 8004f1e:	f000 f8bf 	bl	80050a0 <_sbrk_r>
 8004f22:	6030      	str	r0, [r6, #0]
 8004f24:	0029      	movs	r1, r5
 8004f26:	0020      	movs	r0, r4
 8004f28:	f000 f8ba 	bl	80050a0 <_sbrk_r>
 8004f2c:	1c43      	adds	r3, r0, #1
 8004f2e:	d00a      	beq.n	8004f46 <sbrk_aligned+0x36>
 8004f30:	2303      	movs	r3, #3
 8004f32:	1cc5      	adds	r5, r0, #3
 8004f34:	439d      	bics	r5, r3
 8004f36:	42a8      	cmp	r0, r5
 8004f38:	d007      	beq.n	8004f4a <sbrk_aligned+0x3a>
 8004f3a:	1a29      	subs	r1, r5, r0
 8004f3c:	0020      	movs	r0, r4
 8004f3e:	f000 f8af 	bl	80050a0 <_sbrk_r>
 8004f42:	1c43      	adds	r3, r0, #1
 8004f44:	d101      	bne.n	8004f4a <sbrk_aligned+0x3a>
 8004f46:	2501      	movs	r5, #1
 8004f48:	426d      	negs	r5, r5
 8004f4a:	0028      	movs	r0, r5
 8004f4c:	bd70      	pop	{r4, r5, r6, pc}
 8004f4e:	46c0      	nop			; (mov r8, r8)
 8004f50:	20002534 	.word	0x20002534

08004f54 <_malloc_r>:
 8004f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f56:	2203      	movs	r2, #3
 8004f58:	1ccb      	adds	r3, r1, #3
 8004f5a:	4393      	bics	r3, r2
 8004f5c:	3308      	adds	r3, #8
 8004f5e:	0006      	movs	r6, r0
 8004f60:	001f      	movs	r7, r3
 8004f62:	2b0c      	cmp	r3, #12
 8004f64:	d232      	bcs.n	8004fcc <_malloc_r+0x78>
 8004f66:	270c      	movs	r7, #12
 8004f68:	42b9      	cmp	r1, r7
 8004f6a:	d831      	bhi.n	8004fd0 <_malloc_r+0x7c>
 8004f6c:	0030      	movs	r0, r6
 8004f6e:	f000 f8a9 	bl	80050c4 <__malloc_lock>
 8004f72:	4d32      	ldr	r5, [pc, #200]	; (800503c <_malloc_r+0xe8>)
 8004f74:	682b      	ldr	r3, [r5, #0]
 8004f76:	001c      	movs	r4, r3
 8004f78:	2c00      	cmp	r4, #0
 8004f7a:	d12e      	bne.n	8004fda <_malloc_r+0x86>
 8004f7c:	0039      	movs	r1, r7
 8004f7e:	0030      	movs	r0, r6
 8004f80:	f7ff ffc6 	bl	8004f10 <sbrk_aligned>
 8004f84:	0004      	movs	r4, r0
 8004f86:	1c43      	adds	r3, r0, #1
 8004f88:	d11e      	bne.n	8004fc8 <_malloc_r+0x74>
 8004f8a:	682c      	ldr	r4, [r5, #0]
 8004f8c:	0025      	movs	r5, r4
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	d14a      	bne.n	8005028 <_malloc_r+0xd4>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	0029      	movs	r1, r5
 8004f96:	18e3      	adds	r3, r4, r3
 8004f98:	0030      	movs	r0, r6
 8004f9a:	9301      	str	r3, [sp, #4]
 8004f9c:	f000 f880 	bl	80050a0 <_sbrk_r>
 8004fa0:	9b01      	ldr	r3, [sp, #4]
 8004fa2:	4283      	cmp	r3, r0
 8004fa4:	d143      	bne.n	800502e <_malloc_r+0xda>
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	3703      	adds	r7, #3
 8004faa:	1aff      	subs	r7, r7, r3
 8004fac:	2303      	movs	r3, #3
 8004fae:	439f      	bics	r7, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	2f0c      	cmp	r7, #12
 8004fb4:	d200      	bcs.n	8004fb8 <_malloc_r+0x64>
 8004fb6:	270c      	movs	r7, #12
 8004fb8:	0039      	movs	r1, r7
 8004fba:	0030      	movs	r0, r6
 8004fbc:	f7ff ffa8 	bl	8004f10 <sbrk_aligned>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d034      	beq.n	800502e <_malloc_r+0xda>
 8004fc4:	6823      	ldr	r3, [r4, #0]
 8004fc6:	19df      	adds	r7, r3, r7
 8004fc8:	6027      	str	r7, [r4, #0]
 8004fca:	e013      	b.n	8004ff4 <_malloc_r+0xa0>
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	dacb      	bge.n	8004f68 <_malloc_r+0x14>
 8004fd0:	230c      	movs	r3, #12
 8004fd2:	2500      	movs	r5, #0
 8004fd4:	6033      	str	r3, [r6, #0]
 8004fd6:	0028      	movs	r0, r5
 8004fd8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004fda:	6822      	ldr	r2, [r4, #0]
 8004fdc:	1bd1      	subs	r1, r2, r7
 8004fde:	d420      	bmi.n	8005022 <_malloc_r+0xce>
 8004fe0:	290b      	cmp	r1, #11
 8004fe2:	d917      	bls.n	8005014 <_malloc_r+0xc0>
 8004fe4:	19e2      	adds	r2, r4, r7
 8004fe6:	6027      	str	r7, [r4, #0]
 8004fe8:	42a3      	cmp	r3, r4
 8004fea:	d111      	bne.n	8005010 <_malloc_r+0xbc>
 8004fec:	602a      	str	r2, [r5, #0]
 8004fee:	6863      	ldr	r3, [r4, #4]
 8004ff0:	6011      	str	r1, [r2, #0]
 8004ff2:	6053      	str	r3, [r2, #4]
 8004ff4:	0030      	movs	r0, r6
 8004ff6:	0025      	movs	r5, r4
 8004ff8:	f000 f86c 	bl	80050d4 <__malloc_unlock>
 8004ffc:	2207      	movs	r2, #7
 8004ffe:	350b      	adds	r5, #11
 8005000:	1d23      	adds	r3, r4, #4
 8005002:	4395      	bics	r5, r2
 8005004:	1aea      	subs	r2, r5, r3
 8005006:	429d      	cmp	r5, r3
 8005008:	d0e5      	beq.n	8004fd6 <_malloc_r+0x82>
 800500a:	1b5b      	subs	r3, r3, r5
 800500c:	50a3      	str	r3, [r4, r2]
 800500e:	e7e2      	b.n	8004fd6 <_malloc_r+0x82>
 8005010:	605a      	str	r2, [r3, #4]
 8005012:	e7ec      	b.n	8004fee <_malloc_r+0x9a>
 8005014:	6862      	ldr	r2, [r4, #4]
 8005016:	42a3      	cmp	r3, r4
 8005018:	d101      	bne.n	800501e <_malloc_r+0xca>
 800501a:	602a      	str	r2, [r5, #0]
 800501c:	e7ea      	b.n	8004ff4 <_malloc_r+0xa0>
 800501e:	605a      	str	r2, [r3, #4]
 8005020:	e7e8      	b.n	8004ff4 <_malloc_r+0xa0>
 8005022:	0023      	movs	r3, r4
 8005024:	6864      	ldr	r4, [r4, #4]
 8005026:	e7a7      	b.n	8004f78 <_malloc_r+0x24>
 8005028:	002c      	movs	r4, r5
 800502a:	686d      	ldr	r5, [r5, #4]
 800502c:	e7af      	b.n	8004f8e <_malloc_r+0x3a>
 800502e:	230c      	movs	r3, #12
 8005030:	0030      	movs	r0, r6
 8005032:	6033      	str	r3, [r6, #0]
 8005034:	f000 f84e 	bl	80050d4 <__malloc_unlock>
 8005038:	e7cd      	b.n	8004fd6 <_malloc_r+0x82>
 800503a:	46c0      	nop			; (mov r8, r8)
 800503c:	20002530 	.word	0x20002530

08005040 <_realloc_r>:
 8005040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005042:	0007      	movs	r7, r0
 8005044:	000e      	movs	r6, r1
 8005046:	0014      	movs	r4, r2
 8005048:	2900      	cmp	r1, #0
 800504a:	d105      	bne.n	8005058 <_realloc_r+0x18>
 800504c:	0011      	movs	r1, r2
 800504e:	f7ff ff81 	bl	8004f54 <_malloc_r>
 8005052:	0005      	movs	r5, r0
 8005054:	0028      	movs	r0, r5
 8005056:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005058:	2a00      	cmp	r2, #0
 800505a:	d103      	bne.n	8005064 <_realloc_r+0x24>
 800505c:	f7ff ff0e 	bl	8004e7c <_free_r>
 8005060:	0025      	movs	r5, r4
 8005062:	e7f7      	b.n	8005054 <_realloc_r+0x14>
 8005064:	f000 f83e 	bl	80050e4 <_malloc_usable_size_r>
 8005068:	9001      	str	r0, [sp, #4]
 800506a:	4284      	cmp	r4, r0
 800506c:	d803      	bhi.n	8005076 <_realloc_r+0x36>
 800506e:	0035      	movs	r5, r6
 8005070:	0843      	lsrs	r3, r0, #1
 8005072:	42a3      	cmp	r3, r4
 8005074:	d3ee      	bcc.n	8005054 <_realloc_r+0x14>
 8005076:	0021      	movs	r1, r4
 8005078:	0038      	movs	r0, r7
 800507a:	f7ff ff6b 	bl	8004f54 <_malloc_r>
 800507e:	1e05      	subs	r5, r0, #0
 8005080:	d0e8      	beq.n	8005054 <_realloc_r+0x14>
 8005082:	9b01      	ldr	r3, [sp, #4]
 8005084:	0022      	movs	r2, r4
 8005086:	429c      	cmp	r4, r3
 8005088:	d900      	bls.n	800508c <_realloc_r+0x4c>
 800508a:	001a      	movs	r2, r3
 800508c:	0031      	movs	r1, r6
 800508e:	0028      	movs	r0, r5
 8005090:	f7ff fbc0 	bl	8004814 <memcpy>
 8005094:	0031      	movs	r1, r6
 8005096:	0038      	movs	r0, r7
 8005098:	f7ff fef0 	bl	8004e7c <_free_r>
 800509c:	e7da      	b.n	8005054 <_realloc_r+0x14>
	...

080050a0 <_sbrk_r>:
 80050a0:	2300      	movs	r3, #0
 80050a2:	b570      	push	{r4, r5, r6, lr}
 80050a4:	4d06      	ldr	r5, [pc, #24]	; (80050c0 <_sbrk_r+0x20>)
 80050a6:	0004      	movs	r4, r0
 80050a8:	0008      	movs	r0, r1
 80050aa:	602b      	str	r3, [r5, #0]
 80050ac:	f7fb fd16 	bl	8000adc <_sbrk>
 80050b0:	1c43      	adds	r3, r0, #1
 80050b2:	d103      	bne.n	80050bc <_sbrk_r+0x1c>
 80050b4:	682b      	ldr	r3, [r5, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d000      	beq.n	80050bc <_sbrk_r+0x1c>
 80050ba:	6023      	str	r3, [r4, #0]
 80050bc:	bd70      	pop	{r4, r5, r6, pc}
 80050be:	46c0      	nop			; (mov r8, r8)
 80050c0:	20002538 	.word	0x20002538

080050c4 <__malloc_lock>:
 80050c4:	b510      	push	{r4, lr}
 80050c6:	4802      	ldr	r0, [pc, #8]	; (80050d0 <__malloc_lock+0xc>)
 80050c8:	f000 f814 	bl	80050f4 <__retarget_lock_acquire_recursive>
 80050cc:	bd10      	pop	{r4, pc}
 80050ce:	46c0      	nop			; (mov r8, r8)
 80050d0:	2000253c 	.word	0x2000253c

080050d4 <__malloc_unlock>:
 80050d4:	b510      	push	{r4, lr}
 80050d6:	4802      	ldr	r0, [pc, #8]	; (80050e0 <__malloc_unlock+0xc>)
 80050d8:	f000 f80d 	bl	80050f6 <__retarget_lock_release_recursive>
 80050dc:	bd10      	pop	{r4, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	2000253c 	.word	0x2000253c

080050e4 <_malloc_usable_size_r>:
 80050e4:	1f0b      	subs	r3, r1, #4
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	1f18      	subs	r0, r3, #4
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	da01      	bge.n	80050f2 <_malloc_usable_size_r+0xe>
 80050ee:	580b      	ldr	r3, [r1, r0]
 80050f0:	18c0      	adds	r0, r0, r3
 80050f2:	4770      	bx	lr

080050f4 <__retarget_lock_acquire_recursive>:
 80050f4:	4770      	bx	lr

080050f6 <__retarget_lock_release_recursive>:
 80050f6:	4770      	bx	lr

080050f8 <_init>:
 80050f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050fa:	46c0      	nop			; (mov r8, r8)
 80050fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050fe:	bc08      	pop	{r3}
 8005100:	469e      	mov	lr, r3
 8005102:	4770      	bx	lr

08005104 <_fini>:
 8005104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800510a:	bc08      	pop	{r3}
 800510c:	469e      	mov	lr, r3
 800510e:	4770      	bx	lr
